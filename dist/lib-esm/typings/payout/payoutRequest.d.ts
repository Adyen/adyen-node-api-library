/**
 * Adyen Payout Service
 * A set of API endpoints that allow you to store payout details, confirm, or decline a payout.  For more information, refer to [Third-party payouts](https://docs.adyen.com/features/third-party-payouts).
 *
 * OpenAPI spec version: 30
 * Contact: support@adyen.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ import { Address } from './address';
import { Amount } from './amount';
import { BankAccount } from './bankAccount';
import { BrowserInfo } from './browserInfo';
import { Card } from './card';
import { ForexQuote } from './forexQuote';
import { FundSource } from './fundSource';
import { Installments } from './installments';
import { Name } from './name';
import { Recurring } from './recurring';
import { ThreeDSecureData } from './threeDSecureData';
export interface PayoutRequest {
    additionalAmount?: Amount;
    /**
     * This field contains additional data, which may be required for a particular payment request.  The `additionalData` object consists of entries, each of which includes the key and value. For more information on possible key-value pairs, refer to the [additionalData section](https://docs.adyen.com/api-reference/payments-api#paymentrequestadditionaldata).
     */
    additionalData?: any;
    amount: Amount;
    bankAccount?: BankAccount;
    billingAddress?: Address;
    browserInfo?: BrowserInfo;
    /**
     * The delay between the authorisation and scheduled auto-capture, specified in hours.
     */
    captureDelayHours?: number;
    card?: Card;
    /**
     * The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD
     */
    dateOfBirth?: Date;
    dccQuote?: ForexQuote;
    deliveryAddress?: Address;
    /**
     * The date and time the purchased goods should be delivered.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD  Example: 2017-07-17T13:42:40.428+01:00
     */
    deliveryDate?: Date;
    /**
     * A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).
     */
    deviceFingerprint?: string;
    /**
     * The type of the entity the payment is processed for.
     */
    entityType?: PayoutRequest.EntityTypeEnum;
    /**
     * An integer value that is added to the normal fraud score. The value can be either positive or negative.
     */
    fraudOffset?: number;
    fundSource?: FundSource;
    installments?: Installments;
    /**
     * The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.
     */
    mcc?: string;
    /**
     * The merchant account identifier, with which you want to process the transaction.
     */
    merchantAccount: string;
    /**
     * This reference allows linking multiple transactions to each other. > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.
     */
    merchantOrderReference?: string;
    /**
     * Metadata consists of entries, each of which includes a key and a value. Limitations: Error \"177\", \"Metadata size exceeds limit\"
     */
    metadata?: any;
    mpiData?: ThreeDSecureData;
    /**
     * The two-character country code of the shopper's nationality.
     */
    nationality?: string;
    /**
     * The order reference to link multiple partial payments.
     */
    orderReference?: string;
    recurring?: Recurring;
    /**
     * Defines a recurring payment type. Allowed values: * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule. * `CardOnFile` – Card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction.
     */
    recurringProcessingModel?: PayoutRequest.RecurringProcessingModelEnum;
    /**
     * The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.
     */
    reference: string;
    /**
     * Some payment methods require defining a value for this field to specify how to process the transaction.  For the Bancontact payment method, it can be set to: * `maestro` (default), to be processed like a Maestro card, or * `bcmc`, to be processed like a Bancontact card.
     */
    selectedBrand?: string;
    /**
     * The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.
     */
    selectedRecurringDetailReference?: string;
    /**
     * A session ID used to identify a payment session.
     */
    sessionId?: string;
    /**
     * The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks.
     */
    shopperEmail?: string;
    /**
     * The shopper's IP address. We recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). > This field is mandatory for some merchants depending on your business model. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).
     */
    shopperIP?: string;
    /**
     * Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
     */
    shopperInteraction?: PayoutRequest.ShopperInteractionEnum;
    /**
     * The combination of a language code and a country code to specify the language to be used in the payment.
     */
    shopperLocale?: string;
    shopperName?: Name;
    /**
     * The shopper's reference to uniquely identify this shopper (e.g. user ID or account ID). > This field is required for recurring payments.
     */
    shopperReference?: string;
    /**
     * The text to appear on the shopper's bank statement.
     */
    shopperStatement?: string;
    /**
     * The shopper's social security number.
     */
    socialSecurityNumber?: string;
    /**
     * The physical store, for which this payment is processed.
     */
    store?: string;
    /**
     * The shopper's telephone number.
     */
    telephoneNumber?: string;
    /**
     * The reference value to aggregate sales totals in reporting. When not specified, the store field is used (if available).
     */
    totalsGroup?: string;
}
export declare namespace PayoutRequest {
    type EntityTypeEnum = 'NaturalPerson' | 'CompanyName';
    const EntityTypeEnum: {
        NaturalPerson: import("../checkout").PaymentRequest.EntityTypeEnum;
        CompanyName: import("../checkout").PaymentRequest.EntityTypeEnum;
    };
    type RecurringProcessingModelEnum = 'CardOnFile' | 'Subscription';
    const RecurringProcessingModelEnum: {
        CardOnFile: RecurringProcessingModelEnum;
        Subscription: RecurringProcessingModelEnum;
    };
    type ShopperInteractionEnum = 'Ecommerce' | 'ContAuth' | 'Moto' | 'POS';
    const ShopperInteractionEnum: {
        Ecommerce: import("../checkout").PaymentRequest.ShopperInteractionEnum;
        ContAuth: import("../checkout").PaymentRequest.ShopperInteractionEnum;
        Moto: import("../checkout").PaymentRequest.ShopperInteractionEnum;
        POS: import("../checkout").PaymentRequest.ShopperInteractionEnum;
    };
}
