/**
 * Adyen Payout Service
 * A set of API endpoints that allow you to store payout details, confirm, or decline a payout.  For more information, refer to [Third-party payouts](https://docs.adyen.com/features/third-party-payouts).
 *
 * OpenAPI spec version: 30
 * Contact: support@adyen.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ import { Amount } from './amount';
import { FraudResult } from './fraudResult';
export interface PayoutResponse {
    /**
     * This field contains additional data, which may be required to return in a particular payment response. To choose data fields to be returned, go to **Customer Area** > **Account** > **API URLs**.
     */
    additionalData?: any;
    /**
     * Authorisation code: * When the payment is authorised successfully, this field holds the authorisation code for the payment. * When the payment is not authorised, this field is empty.
     */
    authCode?: string;
    dccAmount?: Amount;
    /**
     * Cryptographic signature used to verify `dccQuote`. > This value only applies if you have implemented Dynamic Currency Conversion. For more information, [contact Support](https://support.adyen.com/hc/en-us/requests/new).
     */
    dccSignature?: string;
    fraudResult?: FraudResult;
    /**
     * The URL to direct the shopper to. > In case of SecurePlus, do not redirect a shopper to this URL.
     */
    issuerUrl?: string;
    /**
     * The payment session.
     */
    md?: string;
    /**
     * The 3D request data for the issuer.  If the value is **CUPSecurePlus-CollectSMSVerificationCode**, collect an SMS code from the shopper and pass it in the `/authorise3D` request. For more information, see [3D Secure](https://docs.adyen.com/risk-management/3d-secure).
     */
    paRequest?: string;
    /**
     * Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.  > `pspReference` is returned only for non-redirect payment methods.
     */
    pspReference?: string;
    /**
     * If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error.  When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.
     */
    refusalReason?: string;
    /**
     * The result of the payment. Possible values:  * **Authorised** – Indicates the payment authorisation was successfully completed. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. * **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state. * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation. * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments. * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state. * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. For more information on handling a pending payment, refer to [Payments with pending status](https://docs.adyen.com/development-resources/payments-with-pending-status). * **Error** – Indicates an error occurred during processing of the payment. The reason is given in the `refusalReason` field. This is a final state.
     */
    resultCode?: PayoutResponse.ResultCodeEnum;
}
export declare namespace PayoutResponse {
    type ResultCodeEnum = 'Authorised' | 'PartiallyAuthorised' | 'Refused' | 'Error' | 'Cancelled' | 'Received' | 'RedirectShopper';
    const ResultCodeEnum: {
        Authorised: ResultCodeEnum;
        PartiallyAuthorised: ResultCodeEnum;
        Refused: ResultCodeEnum;
        Error: ResultCodeEnum;
        Cancelled: ResultCodeEnum;
        Received: ResultCodeEnum;
        RedirectShopper: ResultCodeEnum;
    };
}
