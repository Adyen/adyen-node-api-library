/**
 * Adyen Recurring Service
 * The Recurring APIs allow you to manage and remove your tokens or saved payment details. Tokens should be created with validation during a payment request.  For more information, refer to our [Tokenization documentation](https://docs.adyen.com/features/tokenization). ## Authentication To connect to the Recurring API, you must use your basic authentication credentials. For this, create your web service user, as described in [How to get the WS user password](https://docs.adyen.com/user-management/how-to-get-the-web-service-ws-user-password). Then use its credentials to authenticate your request, for example:  ``` curl -U \"ws@Company.YourCompany\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Recurring API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Recurring/v30/disable ```
 *
 * OpenAPI spec version: 30
 * Contact: support@adyen.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
export interface Recurring {
    /**
     * The type of recurring contract to be used. Possible values: * `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-essentials/payment-glossary#card_security_code_cvc_cvv_cid_). * `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-essentials/payment-glossary#card_not_present_cnp_). * `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not. * `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/features/third-party-payouts).
     */
    contract?: Recurring.ContractEnum;
    /**
     * A descriptive name for this detail.
     */
    recurringDetailName?: string;
    /**
     * The name of the token service.
     */
    tokenService?: Recurring.TokenServiceEnum;
}
export declare namespace Recurring {
    type ContractEnum = 'ONECLICK' | 'RECURRING' | 'PAYOUT';
    const ContractEnum: {
        ONECLICK: import("../checkout").Recurring.ContractEnum;
        RECURRING: import("../checkout").Recurring.ContractEnum;
        PAYOUT: import("../checkout").Recurring.ContractEnum;
    };
    type TokenServiceEnum = 'VISATOKENSERVICE' | 'MCTOKENSERVICE';
    const TokenServiceEnum: {
        VISATOKENSERVICE: import("../checkout").Recurring.TokenServiceEnum;
        MCTOKENSERVICE: import("../checkout").Recurring.TokenServiceEnum;
    };
}
