/**
 * Adyen Checkout Service
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including One-Click and 3D Secure), mobile wallets, and local payment methods (e.g. iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [Checkout documentation](https://docs.adyen.com/checkout).  ## Authentication Each request to the Checkout API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/user-management/how-to-get-the-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_Checkout_API_key\" \\ ... ``` Note that when going live, you need to generate a new API Key to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Checkout API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v46/payments ```
 *
 * OpenAPI spec version: 46
 * Contact: support@adyen.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
export interface Recurring {
    /**
     * The type of recurring contract to be used. Possible values: * `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-essentials/payment-glossary#card_security_code_cvc_cvv_cid_). * `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payment-glossary#cardnotpresentcnp). * `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not. * `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/features/third-party-payouts).
     */
    contract?: Recurring.ContractEnum;
    /**
     * A descriptive name for this detail.
     */
    recurringDetailName?: string;
    /**
     * Date after which no further authorisations shall be performed. Only for 3D Secure 2.
     */
    recurringExpiry?: Date;
    /**
     * Minimum number of days between authorisations. Only for 3D Secure 2.
     */
    recurringFrequency?: string;
    /**
     * The name of the token service.
     */
    tokenService?: Recurring.TokenServiceEnum;
}
export declare namespace Recurring {
    type ContractEnum = 'ONECLICK' | 'RECURRING' | 'PAYOUT';
    const ContractEnum: {
        ONECLICK: ContractEnum;
        RECURRING: ContractEnum;
        PAYOUT: ContractEnum;
    };
    type TokenServiceEnum = 'VISATOKENSERVICE' | 'MCTOKENSERVICE';
    const TokenServiceEnum: {
        VISATOKENSERVICE: TokenServiceEnum;
        MCTOKENSERVICE: TokenServiceEnum;
    };
}
