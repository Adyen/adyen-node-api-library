/**
 * Adyen Checkout Service
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including One-Click and 3D Secure), mobile wallets, and local payment methods (e.g. iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [Checkout documentation](https://docs.adyen.com/checkout).  ## Authentication Each request to the Checkout API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/user-management/how-to-get-the-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_Checkout_API_key\" \\ ... ``` Note that when going live, you need to generate a new API Key to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Checkout API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v46/payments ```
 *
 * OpenAPI spec version: 46
 * Contact: support@adyen.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
export interface ThreeDSecureData {
    /**
     * In 3D Secure 1, the authentication response if the shopper was redirected.  In 3D Secure 2, this is the `transStatus` from challenge flow. If the transaction was frictionless, set this value to **Y**.
     */
    authenticationResponse?: ThreeDSecureData.AuthenticationResponseEnum;
    /**
     * The cardholder authentication value (base64 encoded, 20 bytes in a decoded form).
     */
    cavv?: string;
    /**
     * The CAVV algorithm used. Include this only for 3D Secure 1.
     */
    cavvAlgorithm?: string;
    /**
     * In 3D Secure 1, this is the enrollment response from the 3D directory server.  In 3D Secure 2, this is the `transStatus` from 3D Secure device fingerprinting result.
     */
    directoryResponse?: ThreeDSecureData.DirectoryResponseEnum;
    /**
     * Supported for 3D Secure 2. The unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.
     */
    dsTransID?: string;
    /**
     * The electronic commerce indicator.
     */
    eci?: string;
    /**
     * The version of the 3D Secure protocol.
     */
    threeDSVersion?: string;
    /**
     * Supported for 3D Secure 1. The transaction identifier (Base64-encoded, 20 bytes in a decoded form).
     */
    xid?: string;
}
export declare namespace ThreeDSecureData {
    type AuthenticationResponseEnum = 'Y' | 'N' | 'U' | 'A';
    const AuthenticationResponseEnum: {
        Y: AuthenticationResponseEnum;
        N: AuthenticationResponseEnum;
        U: AuthenticationResponseEnum;
        A: AuthenticationResponseEnum;
    };
    type DirectoryResponseEnum = 'Y' | 'N' | 'U' | 'E' | 'C';
    const DirectoryResponseEnum: {
        Y: DirectoryResponseEnum;
        N: DirectoryResponseEnum;
        U: DirectoryResponseEnum;
        E: DirectoryResponseEnum;
        C: DirectoryResponseEnum;
    };
}
