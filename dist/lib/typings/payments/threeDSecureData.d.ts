/**
 * Adyen Payment Service
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication To connect to the Payments API, you must use your basic authentication credentials. For this, create your web service user, as described in [How to get the WS user password](https://docs.adyen.com/user-management/how-to-get-the-web-service-ws-user-password). Then use its credentials to authenticate your request, for example:  ``` curl -U \"ws@Company.YourCompany\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Payments API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v46/authorise ```
 *
 * OpenAPI spec version: 46
 * Contact: support@adyen.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
export interface ThreeDSecureData {
    /**
     * In 3D Secure 1, the authentication response if the shopper was redirected.  In 3D Secure 2, this is the `transStatus` from challenge flow. If the transaction was frictionless, set this value to **Y**.
     */
    authenticationResponse?: ThreeDSecureData.AuthenticationResponseEnum;
    /**
     * The cardholder authentication value (base64 encoded, 20 bytes in a decoded form).
     */
    cavv?: string;
    /**
     * The CAVV algorithm used. Include this only for 3D Secure 1.
     */
    cavvAlgorithm?: string;
    /**
     * In 3D Secure 1, this is the enrollment response from the 3D directory server.  In 3D Secure 2, this is the `transStatus` from 3D Secure device fingerprinting result.
     */
    directoryResponse?: ThreeDSecureData.DirectoryResponseEnum;
    /**
     * Supported for 3D Secure 2. The unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.
     */
    dsTransID?: string;
    /**
     * The electronic commerce indicator.
     */
    eci?: string;
    /**
     * The version of the 3D Secure protocol.
     */
    threeDSVersion?: string;
    /**
     * Supported for 3D Secure 1. The transaction identifier (Base64-encoded, 20 bytes in a decoded form).
     */
    xid?: string;
}
export declare namespace ThreeDSecureData {
    type AuthenticationResponseEnum = 'Y' | 'N' | 'U' | 'A';
    const AuthenticationResponseEnum: {
        Y: import("../checkout").ThreeDSecureData.AuthenticationResponseEnum;
        N: import("../checkout").ThreeDSecureData.AuthenticationResponseEnum;
        U: import("../checkout").ThreeDSecureData.AuthenticationResponseEnum;
        A: import("../checkout").ThreeDSecureData.AuthenticationResponseEnum;
    };
    type DirectoryResponseEnum = 'Y' | 'N' | 'U' | 'E' | 'C';
    const DirectoryResponseEnum: {
        Y: import("../checkout").ThreeDSecureData.DirectoryResponseEnum;
        N: import("../checkout").ThreeDSecureData.DirectoryResponseEnum;
        U: import("../checkout").ThreeDSecureData.DirectoryResponseEnum;
        E: import("../checkout").ThreeDSecureData.DirectoryResponseEnum;
        C: import("../checkout").ThreeDSecureData.DirectoryResponseEnum;
    };
}
