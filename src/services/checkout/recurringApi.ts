/*
 * The version of the OpenAPI document: v71
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import getJsonResponse from "../../helpers/getJsonResponse";
import Service from "../../service";
import Client from "../../client";
import { 
    ListStoredPaymentMethodsResponse,
    ObjectSerializer
} from "../../typings/checkout/models";
import { IRequest } from "../../typings/requestOptions";
import Resource from "../resource";

export class RecurringApi extends Service {

    private readonly API_BASEPATH: string = "https://checkout-test.adyen.com/v71";
    private baseUrl: string;

    public constructor(client: Client){
        super(client);
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }

    /**
    * @summary Delete a token for stored payment details
    * @param storedPaymentMethodId {@link string } The unique identifier of the token.
    * @param requestOptions {@link IRequest.Options }
    * @param shopperReference {@link string } Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address.
    * @param merchantAccount {@link string } Your merchant account.
    */
    public async deleteTokenForStoredPaymentDetails(storedPaymentMethodId: string, shopperReference?: string, merchantAccount?: string, requestOptions?: IRequest.Options): Promise<void> {
        const endpoint = `${this.baseUrl}/storedPaymentMethods/{storedPaymentMethodId}`
            .replace("{" + "storedPaymentMethodId" + "}", encodeURIComponent(String(storedPaymentMethodId)));
        const resource = new Resource(this, endpoint);
        const hasDefinedQueryParams = shopperReference ?? merchantAccount;
        if(hasDefinedQueryParams) {
            if(!requestOptions) requestOptions = {};
            if(!requestOptions.params) requestOptions.params = {};
            if(shopperReference) requestOptions.params["shopperReference"] = shopperReference;
            if(merchantAccount) requestOptions.params["merchantAccount"] = merchantAccount;
        }
        await getJsonResponse<string, void>(
            resource,
            "",
            { ...requestOptions, method: "DELETE" }
        );
    }

    /**
    * @summary Get tokens for stored payment details
    * @param requestOptions {@link IRequest.Options }
    * @param shopperReference {@link string } Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address.
    * @param merchantAccount {@link string } Your merchant account.
    * @return {@link ListStoredPaymentMethodsResponse }
    */
    public async getTokensForStoredPaymentDetails(shopperReference?: string, merchantAccount?: string, requestOptions?: IRequest.Options): Promise<ListStoredPaymentMethodsResponse> {
        const endpoint = `${this.baseUrl}/storedPaymentMethods`;
        const resource = new Resource(this, endpoint);
        const hasDefinedQueryParams = shopperReference ?? merchantAccount;
        if(hasDefinedQueryParams) {
            if(!requestOptions) requestOptions = {};
            if(!requestOptions.params) requestOptions.params = {};
            if(shopperReference) requestOptions.params["shopperReference"] = shopperReference;
            if(merchantAccount) requestOptions.params["merchantAccount"] = merchantAccount;
        }
        const response = await getJsonResponse<string, ListStoredPaymentMethodsResponse>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "ListStoredPaymentMethodsResponse");
    }
}
