/*
 * The version of the OpenAPI document: v70
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import getJsonResponse from "../../helpers/getJsonResponse";
import Service from "../../service";
import Client from "../../client";
import { CheckoutBalanceCheckRequest } from "../../typings/checkout/models";
import { CheckoutBalanceCheckResponse } from "../../typings/checkout/models";
import { CheckoutCancelOrderRequest } from "../../typings/checkout/models";
import { CheckoutCancelOrderResponse } from "../../typings/checkout/models";
import { CheckoutCreateOrderRequest } from "../../typings/checkout/models";
import { CheckoutCreateOrderResponse } from "../../typings/checkout/models";
import { IRequest } from "../../typings/requestOptions";
import Resource from "../resource";
import { ObjectSerializer } from "../../typings/checkout/models";

export class OrdersApi extends Service {

    readonly API_BASEPATH: string = "https://checkout-test.adyen.com/v70";
    private baseUrl: string;

    public constructor(client: Client){
        super(client);
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }

    /**
    * @summary Create an order
    * @param idempotencyKey {@link string } A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    * @param checkoutCreateOrderRequest {@link CheckoutCreateOrderRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link CheckoutCreateOrderResponse }
    */
    public async orders(checkoutCreateOrderRequest: CheckoutCreateOrderRequest, requestOptions?: IRequest.Options): Promise<CheckoutCreateOrderResponse> {
        const endpoint = `${this.baseUrl}/orders`;
        const resource = new Resource(this, endpoint);
        const request: CheckoutCreateOrderRequest = ObjectSerializer.serialize(checkoutCreateOrderRequest, "CheckoutCreateOrderRequest");
        const response = await getJsonResponse<CheckoutCreateOrderRequest, CheckoutCreateOrderResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "CheckoutCreateOrderResponse");
    }

    /**
    * @summary Cancel an order
    * @param idempotencyKey {@link string } A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    * @param checkoutCancelOrderRequest {@link CheckoutCancelOrderRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link CheckoutCancelOrderResponse }
    */
    public async cancelOrder(checkoutCancelOrderRequest: CheckoutCancelOrderRequest, requestOptions?: IRequest.Options): Promise<CheckoutCancelOrderResponse> {
        const endpoint = `${this.baseUrl}/orders/cancel`;
        const resource = new Resource(this, endpoint);
        const request: CheckoutCancelOrderRequest = ObjectSerializer.serialize(checkoutCancelOrderRequest, "CheckoutCancelOrderRequest");
        const response = await getJsonResponse<CheckoutCancelOrderRequest, CheckoutCancelOrderResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "CheckoutCancelOrderResponse");
    }

    /**
    * @summary Get the balance of a gift card
    * @param idempotencyKey {@link string } A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    * @param checkoutBalanceCheckRequest {@link CheckoutBalanceCheckRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link CheckoutBalanceCheckResponse }
    */
    public async getBalanceOfGiftCard(checkoutBalanceCheckRequest: CheckoutBalanceCheckRequest, requestOptions?: IRequest.Options): Promise<CheckoutBalanceCheckResponse> {
        const endpoint = `${this.baseUrl}/paymentMethods/balance`;
        const resource = new Resource(this, endpoint);
        const request: CheckoutBalanceCheckRequest = ObjectSerializer.serialize(checkoutBalanceCheckRequest, "CheckoutBalanceCheckRequest");
        const response = await getJsonResponse<CheckoutBalanceCheckRequest, CheckoutBalanceCheckResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "CheckoutBalanceCheckResponse");
    }
}
