/*
 * The version of the OpenAPI document: v70
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import getJsonResponse from "../../helpers/getJsonResponse";
import Service from "../../service";
import Client from "../../client";
import { CardDetailsRequest } from "../../typings/checkout/models";
import { CardDetailsResponse } from "../../typings/checkout/models";
import { CheckoutDonationPaymentRequest } from "../../typings/checkout/models";
import { CheckoutPaymentRequest } from "../../typings/checkout/models";
import { CreateCheckoutSessionRequest } from "../../typings/checkout/models";
import { CreateCheckoutSessionResponse } from "../../typings/checkout/models";
import { DetailsRequest } from "../../typings/checkout/models";
import { DonationResponse } from "../../typings/checkout/models";
import { PaymentDetailsResponse } from "../../typings/checkout/models";
import { PaymentMethodsRequest } from "../../typings/checkout/models";
import { PaymentMethodsResponse } from "../../typings/checkout/models";
import { PaymentResponse } from "../../typings/checkout/models";
import { IRequest } from "../../typings/requestOptions";
import Resource from "../resource";
import { ObjectSerializer } from "../../typings/checkout/models";

export class PaymentsApi extends Service {

    private readonly API_BASEPATH: string = "https://checkout-test.adyen.com/v70";
    private baseUrl: string;

    public constructor(client: Client){
        super(client);
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }

    /**
    * @summary Get the list of brands on the card
    * @param idempotencyKey {@link string } A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    * @param cardDetailsRequest {@link CardDetailsRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link CardDetailsResponse }
    */
    public async cardDetails(cardDetailsRequest: CardDetailsRequest, requestOptions?: IRequest.Options): Promise<CardDetailsResponse> {
        const endpoint = `${this.baseUrl}/cardDetails`;
        const resource = new Resource(this, endpoint);
        const request: CardDetailsRequest = ObjectSerializer.serialize(cardDetailsRequest, "CardDetailsRequest");
        const response = await getJsonResponse<CardDetailsRequest, CardDetailsResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "CardDetailsResponse");
    }

    /**
    * @summary Start a transaction for donations
    * @param idempotencyKey {@link string } A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    * @param checkoutDonationPaymentRequest {@link CheckoutDonationPaymentRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link DonationResponse }
    */
    public async donations(checkoutDonationPaymentRequest: CheckoutDonationPaymentRequest, requestOptions?: IRequest.Options): Promise<DonationResponse> {
        const endpoint = `${this.baseUrl}/donations`;
        const resource = new Resource(this, endpoint);
        const request: CheckoutDonationPaymentRequest = ObjectSerializer.serialize(checkoutDonationPaymentRequest, "CheckoutDonationPaymentRequest");
        const response = await getJsonResponse<CheckoutDonationPaymentRequest, DonationResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "DonationResponse");
    }

    /**
    * @summary Get a list of available payment methods
    * @param idempotencyKey {@link string } A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    * @param paymentMethodsRequest {@link PaymentMethodsRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link PaymentMethodsResponse }
    */
    public async paymentMethods(paymentMethodsRequest: PaymentMethodsRequest, requestOptions?: IRequest.Options): Promise<PaymentMethodsResponse> {
        const endpoint = `${this.baseUrl}/paymentMethods`;
        const resource = new Resource(this, endpoint);
        const request: PaymentMethodsRequest = ObjectSerializer.serialize(paymentMethodsRequest, "PaymentMethodsRequest");
        const response = await getJsonResponse<PaymentMethodsRequest, PaymentMethodsResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "PaymentMethodsResponse");
    }

    /**
    * @summary Start a transaction
    * @param idempotencyKey {@link string } A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    * @param checkoutPaymentRequest {@link CheckoutPaymentRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link PaymentResponse }
    */
    public async payments(checkoutPaymentRequest: CheckoutPaymentRequest, requestOptions?: IRequest.Options): Promise<PaymentResponse> {
        const endpoint = `${this.baseUrl}/payments`;
        const resource = new Resource(this, endpoint);
        const request: CheckoutPaymentRequest = ObjectSerializer.serialize(checkoutPaymentRequest, "CheckoutPaymentRequest");
        const response = await getJsonResponse<CheckoutPaymentRequest, PaymentResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "PaymentResponse");
    }

    /**
    * @summary Submit details for a payment
    * @param idempotencyKey {@link string } A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    * @param detailsRequest {@link DetailsRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link PaymentDetailsResponse }
    */
    public async paymentsDetails(detailsRequest: DetailsRequest, requestOptions?: IRequest.Options): Promise<PaymentDetailsResponse> {
        const endpoint = `${this.baseUrl}/payments/details`;
        const resource = new Resource(this, endpoint);
        const request: DetailsRequest = ObjectSerializer.serialize(detailsRequest, "DetailsRequest");
        const response = await getJsonResponse<DetailsRequest, PaymentDetailsResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "PaymentDetailsResponse");
    }

    /**
    * @summary Create a payment session
    * @param idempotencyKey {@link string } A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
    * @param createCheckoutSessionRequest {@link CreateCheckoutSessionRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link CreateCheckoutSessionResponse }
    */
    public async sessions(createCheckoutSessionRequest: CreateCheckoutSessionRequest, requestOptions?: IRequest.Options): Promise<CreateCheckoutSessionResponse> {
        const endpoint = `${this.baseUrl}/sessions`;
        const resource = new Resource(this, endpoint);
        const request: CreateCheckoutSessionRequest = ObjectSerializer.serialize(createCheckoutSessionRequest, "CreateCheckoutSessionRequest");
        const response = await getJsonResponse<CreateCheckoutSessionRequest, CreateCheckoutSessionResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "CreateCheckoutSessionResponse");
    }
}
