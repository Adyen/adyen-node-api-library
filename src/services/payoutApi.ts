/*
 * The version of the OpenAPI document: v68
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import Client from "../client";
import getJsonResponse from "../helpers/getJsonResponse";
import Service from "../service";
import { ModifyRequest } from "../typings/payout/models";
import { ModifyResponse } from "../typings/payout/models";
import { PayoutRequest } from "../typings/payout/models";
import { PayoutResponse } from "../typings/payout/models";
import { StoreDetailAndSubmitRequest } from "../typings/payout/models";
import { StoreDetailAndSubmitResponse } from "../typings/payout/models";
import { StoreDetailRequest } from "../typings/payout/models";
import { StoreDetailResponse } from "../typings/payout/models";
import { SubmitRequest } from "../typings/payout/models";
import { SubmitResponse } from "../typings/payout/models";
import { IRequest } from "../typings/requestOptions";
import Resource from "./resource";
import { ObjectSerializer } from "../typings/payout/models";

export class PayoutAPI extends Service {
    
    private baseUrl: string;

    public constructor(client: Client) {
        super(client);
        this.baseUrl = this.createBaseUrl("https://pal-test.adyen.com/pal/servlet/Payout/v68");
    }

    /**
    * @summary Confirm a payout
    * @param modifyRequest {@link ModifyRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link ModifyResponse }
    */
    public async confirmThirdParty(modifyRequest: ModifyRequest, requestOptions?: IRequest.Options): Promise<ModifyResponse> {
        const endpoint = `${this.baseUrl}/confirmThirdParty`;
        const resource = new Resource(this, endpoint);
        const request: ModifyRequest = ObjectSerializer.serialize(modifyRequest, "ModifyRequest");
        const response = await getJsonResponse<ModifyRequest, ModifyResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "ModifyResponse");
    }

    /**
    * @summary Cancel a payout
    * @param modifyRequest {@link ModifyRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link ModifyResponse }
    */
    public async declineThirdParty(modifyRequest: ModifyRequest, requestOptions?: IRequest.Options): Promise<ModifyResponse> {
        const endpoint = `${this.baseUrl}/declineThirdParty`;
        const resource = new Resource(this, endpoint);
        const request: ModifyRequest = ObjectSerializer.serialize(modifyRequest, "ModifyRequest");
        const response = await getJsonResponse<ModifyRequest, ModifyResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "ModifyResponse");
    }

    /**
    * @summary Make an instant card payout
    * @param payoutRequest {@link PayoutRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link PayoutResponse }
    */
    public async payout(payoutRequest: PayoutRequest, requestOptions?: IRequest.Options): Promise<PayoutResponse> {
        const endpoint = `${this.baseUrl}/payout`;
        const resource = new Resource(this, endpoint);
        const request: PayoutRequest = ObjectSerializer.serialize(payoutRequest, "PayoutRequest");
        const response = await getJsonResponse<PayoutRequest, PayoutResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "PayoutResponse");
    }

    /**
    * @summary Store payout details
    * @param storeDetailRequest {@link StoreDetailRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link StoreDetailResponse }
    */
    public async storeDetail(storeDetailRequest: StoreDetailRequest, requestOptions?: IRequest.Options): Promise<StoreDetailResponse> {
        const endpoint = `${this.baseUrl}/storeDetail`;
        const resource = new Resource(this, endpoint);
        const request: StoreDetailRequest = ObjectSerializer.serialize(storeDetailRequest, "StoreDetailRequest");
        const response = await getJsonResponse<StoreDetailRequest, StoreDetailResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "StoreDetailResponse");
    }

    /**
    * @summary Store details and submit a payout
    * @param storeDetailAndSubmitRequest {@link StoreDetailAndSubmitRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link StoreDetailAndSubmitResponse }
    */
    public async storeDetailAndSubmitThirdParty(storeDetailAndSubmitRequest: StoreDetailAndSubmitRequest, requestOptions?: IRequest.Options): Promise<StoreDetailAndSubmitResponse> {
        const endpoint = `${this.baseUrl}/storeDetailAndSubmitThirdParty`;
        const resource = new Resource(this, endpoint);
        const request: StoreDetailAndSubmitRequest = ObjectSerializer.serialize(storeDetailAndSubmitRequest, "StoreDetailAndSubmitRequest");
        const response = await getJsonResponse<StoreDetailAndSubmitRequest, StoreDetailAndSubmitResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "StoreDetailAndSubmitResponse");
    }

    /**
    * @summary Submit a payout
    * @param submitRequest {@link SubmitRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SubmitResponse }
    */
    public async submitThirdParty(submitRequest: SubmitRequest, requestOptions?: IRequest.Options): Promise<SubmitResponse> {
        const endpoint = `${this.baseUrl}/submitThirdParty`;
        const resource = new Resource(this, endpoint);
        const request: SubmitRequest = ObjectSerializer.serialize(submitRequest, "SubmitRequest");
        const response = await getJsonResponse<SubmitRequest, SubmitResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "SubmitResponse");
    }
}

export default PayoutAPI;
