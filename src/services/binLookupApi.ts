/*
 * The version of the OpenAPI document: v54
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import Client from "../client";
import getJsonResponse from "../helpers/getJsonResponse";
import Service from "../service";
import { CostEstimateRequest } from "../typings/binLookup/models";
import { CostEstimateResponse } from "../typings/binLookup/models";
import { ThreeDSAvailabilityRequest } from "../typings/binLookup/models";
import { ThreeDSAvailabilityResponse } from "../typings/binLookup/models";
import { IRequest } from "../typings/requestOptions";
import BinLookupResource from "./resource/binLookupResource";
import { ObjectSerializer } from "../typings/binLookup/models";

export class BinLookupAPI extends Service {
    public constructor(client: Client) {
        super(client);
    }

    /**
    * @summary Check if 3D Secure is available
    * @param threeDSAvailabilityRequest {@link ThreeDSAvailabilityRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link ThreeDSAvailabilityResponse }
    */
    public async get3dsAvailability(threeDSAvailabilityRequest: ThreeDSAvailabilityRequest, requestOptions?: IRequest.Options): Promise<ThreeDSAvailabilityResponse> {
        const localVarPath = "/get3dsAvailability";
        const resource = new BinLookupResource(this, localVarPath);
        const request: ThreeDSAvailabilityRequest = ObjectSerializer.serialize(threeDSAvailabilityRequest, "ThreeDSAvailabilityRequest");
        const response = await getJsonResponse<ThreeDSAvailabilityRequest, ThreeDSAvailabilityResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "ThreeDSAvailabilityResponse");
    }

    /**
    * @summary Get a fees cost estimate
    * @param costEstimateRequest {@link CostEstimateRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link CostEstimateResponse }
    */
    public async getCostEstimate(costEstimateRequest: CostEstimateRequest, requestOptions?: IRequest.Options): Promise<CostEstimateResponse> {
        const localVarPath = "/getCostEstimate";
        const resource = new BinLookupResource(this, localVarPath);
        const request: CostEstimateRequest = ObjectSerializer.serialize(costEstimateRequest, "CostEstimateRequest");
        const response = await getJsonResponse<CostEstimateRequest, CostEstimateResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "CostEstimateResponse");
    }
}

export default BinLookupAPI;
