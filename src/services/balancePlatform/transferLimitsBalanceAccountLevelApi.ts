/*
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */


import getJsonResponse from "../../helpers/getJsonResponse";
import Service from "../../service";
import Client from "../../client";
import { IRequest } from "../../typings/requestOptions";
import Resource from "../resource";

import { ObjectSerializer } from "../../typings/balancePlatform/objectSerializer";
import { ApproveTransferLimitRequest } from "../../typings/balancePlatform/models";
import { CreateTransferLimitRequest } from "../../typings/balancePlatform/models";
import { DefaultErrorResponseEntity } from "../../typings/balancePlatform/models";
import { LimitStatus } from "../../typings/balancePlatform/models";
import { Scope } from "../../typings/balancePlatform/models";
import { TransferLimit } from "../../typings/balancePlatform/models";
import { TransferLimitListResponse } from "../../typings/balancePlatform/models";
import { TransferType } from "../../typings/balancePlatform/models";

/**
 * API handler for TransferLimitsBalanceAccountLevelApi
 */
export class TransferLimitsBalanceAccountLevelApi extends Service {

    private readonly API_BASEPATH: string = "https://balanceplatform-api-test.adyen.com/bcl/v2";
    private baseUrl: string;

    public constructor(client: Client){
        super(client);
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }

    /**
    * @summary Approve pending transfer limits
    * @param id {@link string } The unique identifier of the balance account.
    * @param approveTransferLimitRequest {@link ApproveTransferLimitRequest } 
    * @param requestOptions {@link IRequest.Options }
    * @return {@link void }
    */
    public async approvePendingTransferLimits(id: string, approveTransferLimitRequest: ApproveTransferLimitRequest, requestOptions?: IRequest.Options): Promise<void> {
        const endpoint = `${this.baseUrl}/balanceAccounts/{id}/transferLimits/approve`
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new Resource(this, endpoint);
        
        const request: ApproveTransferLimitRequest = ObjectSerializer.serialize(approveTransferLimitRequest, "ApproveTransferLimitRequest");
        await getJsonResponse<ApproveTransferLimitRequest, void>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
    }

    /**
    * @summary Create a transfer limit
    * @param id {@link string } The unique identifier of the balance account.
    * @param createTransferLimitRequest {@link CreateTransferLimitRequest } 
    * @param requestOptions {@link IRequest.Options }
    * @return {@link TransferLimit }
    */
    public async createTransferLimit(id: string, createTransferLimitRequest: CreateTransferLimitRequest, requestOptions?: IRequest.Options): Promise<TransferLimit> {
        const endpoint = `${this.baseUrl}/balanceAccounts/{id}/transferLimits`
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new Resource(this, endpoint);
        
        const request: CreateTransferLimitRequest = ObjectSerializer.serialize(createTransferLimitRequest, "CreateTransferLimitRequest");
        const response = await getJsonResponse<CreateTransferLimitRequest, TransferLimit>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );

        return ObjectSerializer.deserialize(response, "TransferLimit");
    }

    /**
    * @summary Delete a scheduled or pending transfer limit
    * @param transferLimitId {@link string } The unique identifier of the transfer limit.
    * @param id {@link string } The unique identifier of the balance account.
    * @param requestOptions {@link IRequest.Options }
    * @return {@link void }
    */
    public async deletePendingTransferLimit(transferLimitId: string, id: string, requestOptions?: IRequest.Options): Promise<void> {
        const endpoint = `${this.baseUrl}/balanceAccounts/{id}/transferLimits/{transferLimitId}`
            .replace("{" + "transferLimitId" + "}", encodeURIComponent(String(transferLimitId)))
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new Resource(this, endpoint);
        
        await getJsonResponse<string, void>(
            resource,
            "",
            { ...requestOptions, method: "DELETE" }
        );
    }

    /**
    * @summary Get all current transfer limits
    * @param id {@link string } The unique identifier of the balance account.
    * @param requestOptions {@link IRequest.Options }
    * @param scope {@link Scope } The scope to which the transfer limit applies. Possible values: * **perTransaction**: you set a maximum amount for each transfer made from the balance account or balance platform. * **perDay**: you set a maximum total amount for all transfers made from the balance account or balance platform in a day.
    * @param transferType {@link TransferType } The type of transfer to which the limit applies. Possible values: * **instant**: the limit applies to transfers with an **instant** priority. * **all**: the limit applies to all transfers, regardless of priority.
    * @return {@link TransferLimitListResponse }
    */
    public async getCurrentTransferLimits(id: string, scope?: Scope, transferType?: TransferType, requestOptions?: IRequest.Options): Promise<TransferLimitListResponse> {
        const endpoint = `${this.baseUrl}/balanceAccounts/{id}/transferLimits/current`
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new Resource(this, endpoint);
        
        const hasDefinedQueryParams = scope ?? transferType;
        if(hasDefinedQueryParams) {
            if(!requestOptions) requestOptions = {};
            if(!requestOptions.params) requestOptions.params = {};
            if(scope) requestOptions.params["scope"] = scope;
            if(transferType) requestOptions.params["transferType"] = transferType;
        }
        const response = await getJsonResponse<string, TransferLimitListResponse>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );

        return ObjectSerializer.deserialize(response, "TransferLimitListResponse");
    }

    /**
    * @summary Get the details of a transfer limit
    * @param transferLimitId {@link string } The unique identifier of the transfer limit.
    * @param id {@link string } The unique identifier of the balance account.
    * @param requestOptions {@link IRequest.Options }
    * @return {@link TransferLimit }
    */
    public async getSpecificTransferLimit(transferLimitId: string, id: string, requestOptions?: IRequest.Options): Promise<TransferLimit> {
        const endpoint = `${this.baseUrl}/balanceAccounts/{id}/transferLimits/{transferLimitId}`
            .replace("{" + "transferLimitId" + "}", encodeURIComponent(String(transferLimitId)))
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new Resource(this, endpoint);
        
        const response = await getJsonResponse<string, TransferLimit>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );

        return ObjectSerializer.deserialize(response, "TransferLimit");
    }

    /**
    * @summary Filter and view the transfer limits
    * @param id {@link string } The unique identifier of the balance account.
    * @param requestOptions {@link IRequest.Options }
    * @param scope {@link Scope } The scope to which the transfer limit applies. Possible values: * **perTransaction**: you set a maximum amount for each transfer made from the balance account or balance platform. * **perDay**: you set a maximum total amount for all transfers made from the balance account or balance platform in a day.
    * @param transferType {@link TransferType } The type of transfer to which the limit applies. Possible values: * **instant**: the limit applies to transfers with an **instant** priority. * **all**: the limit applies to all transfers, regardless of priority.
    * @param status {@link LimitStatus } The status of the transfer limit. Possible values:    * **active**: the limit is currently active. * **inactive**: the limit is currently inactive. * **pendingSCA**: the limit is pending until your user performs SCA. * **scheduled**: the limit is scheduled to become active at a future date.
    * @return {@link TransferLimitListResponse }
    */
    public async getTransferLimits(id: string, scope?: Scope, transferType?: TransferType, status?: LimitStatus, requestOptions?: IRequest.Options): Promise<TransferLimitListResponse> {
        const endpoint = `${this.baseUrl}/balanceAccounts/{id}/transferLimits`
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new Resource(this, endpoint);
        
        const hasDefinedQueryParams = scope ?? transferType ?? status;
        if(hasDefinedQueryParams) {
            if(!requestOptions) requestOptions = {};
            if(!requestOptions.params) requestOptions.params = {};
            if(scope) requestOptions.params["scope"] = scope;
            if(transferType) requestOptions.params["transferType"] = transferType;
            if(status) requestOptions.params["status"] = status;
        }
        const response = await getJsonResponse<string, TransferLimitListResponse>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );

        return ObjectSerializer.deserialize(response, "TransferLimitListResponse");
    }

}
