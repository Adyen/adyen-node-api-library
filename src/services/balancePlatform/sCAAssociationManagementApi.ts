/*
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */


import getJsonResponse from "../../helpers/getJsonResponse";
import Service from "../../service";
import Client from "../../client";
import { IRequest } from "../../typings/requestOptions";
import Resource from "../resource";

import { ObjectSerializer } from "../../typings/balancePlatform/objectSerializer";
import { ApproveAssociationRequest } from "../../typings/balancePlatform/models";
import { ApproveAssociationResponse } from "../../typings/balancePlatform/models";
import { DefaultErrorResponseEntity } from "../../typings/balancePlatform/models";
import { ListAssociationsResponse } from "../../typings/balancePlatform/models";
import { RemoveAssociationRequest } from "../../typings/balancePlatform/models";
import { ScaEntityType } from "../../typings/balancePlatform/models";

/**
 * API handler for SCAAssociationManagementApi
 */
export class SCAAssociationManagementApi extends Service {

    private readonly API_BASEPATH: string = "https://balanceplatform-api-test.adyen.com/bcl/v2";
    private baseUrl: string;

    public constructor(client: Client){
        super(client);
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }

    /**
    * @summary Approve a pending approval association
    * @param approveAssociationRequest {@link ApproveAssociationRequest } 
    * @param requestOptions {@link IRequest.Options }
    * @return {@link ApproveAssociationResponse }
    */
    public async approveAssociation(approveAssociationRequest: ApproveAssociationRequest, requestOptions?: IRequest.Options): Promise<ApproveAssociationResponse> {
        const endpoint = `${this.baseUrl}/scaAssociations`;
        const resource = new Resource(this, endpoint);
        
        const request: ApproveAssociationRequest = ObjectSerializer.serialize(approveAssociationRequest, "ApproveAssociationRequest");
        const response = await getJsonResponse<ApproveAssociationRequest, ApproveAssociationResponse>(
            resource,
            request,
            { ...requestOptions, method: "PATCH" }
        );

        return ObjectSerializer.deserialize(response, "ApproveAssociationResponse");
    }

    /**
    * @summary Get a list of devices associated with an entity
    * @param requestOptions {@link IRequest.Options }
    * @param entityType {@link ScaEntityType } (Required) The type of entity you want to retrieve a list of associations for.   Possible values: **accountHolder** or **paymentInstrument**.
    * @param entityId {@link string } (Required) The unique identifier of the entity.
    * @param pageSize {@link number } (Required) The number of items to have on a page.   Default: **5**.
    * @param pageNumber {@link number } (Required) The index of the page to retrieve. The index of the first page is **0** (zero).   Default:  **0**.
    * @return {@link ListAssociationsResponse }
    */
    public async listAssociations(entityType: ScaEntityType, entityId: string, pageSize: number, pageNumber: number, requestOptions?: IRequest.Options): Promise<ListAssociationsResponse> {
        const endpoint = `${this.baseUrl}/scaAssociations`;
        const resource = new Resource(this, endpoint);
        
        const hasDefinedQueryParams = entityType ?? entityId ?? pageSize ?? pageNumber;
        if(hasDefinedQueryParams) {
            if(!requestOptions) requestOptions = {};
            if(!requestOptions.params) requestOptions.params = {};
            if(entityType) requestOptions.params["entityType"] = entityType;
            if(entityId) requestOptions.params["entityId"] = entityId;
            if(pageSize) requestOptions.params["pageSize"] = pageSize;
            if(pageNumber) requestOptions.params["pageNumber"] = pageNumber;
        }
        const response = await getJsonResponse<string, ListAssociationsResponse>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );

        return ObjectSerializer.deserialize(response, "ListAssociationsResponse");
    }

    /**
    * @summary Delete association to devices
    * @param removeAssociationRequest {@link RemoveAssociationRequest } 
    * @param requestOptions {@link IRequest.Options }
    * @return {@link void }
    */
    public async removeAssociation(removeAssociationRequest: RemoveAssociationRequest, requestOptions?: IRequest.Options): Promise<void> {
        const endpoint = `${this.baseUrl}/scaAssociations`;
        const resource = new Resource(this, endpoint);
        
        const request: RemoveAssociationRequest = ObjectSerializer.serialize(removeAssociationRequest, "RemoveAssociationRequest");
        await getJsonResponse<RemoveAssociationRequest, void>(
            resource,
            request,
            { ...requestOptions, method: "DELETE" }
        );
    }

}
