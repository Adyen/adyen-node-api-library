/*
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */


import getJsonResponse from "../../helpers/getJsonResponse";
import Service from "../../service";
import Client from "../../client";
import { IRequest } from "../../typings/requestOptions";
import Resource from "../resource";

import { ObjectSerializer } from "../../typings/balancePlatform/objectSerializer";
import { BeginScaDeviceRegistrationRequest } from "../../typings/balancePlatform/models";
import { BeginScaDeviceRegistrationResponse } from "../../typings/balancePlatform/models";
import { DefaultErrorResponseEntity } from "../../typings/balancePlatform/models";
import { FinishScaDeviceRegistrationRequest } from "../../typings/balancePlatform/models";
import { FinishScaDeviceRegistrationResponse } from "../../typings/balancePlatform/models";
import { SubmitScaAssociationRequest } from "../../typings/balancePlatform/models";
import { SubmitScaAssociationResponse } from "../../typings/balancePlatform/models";

/**
 * API handler for SCADeviceManagementApi
 */
export class SCADeviceManagementApi extends Service {

    private readonly API_BASEPATH: string = "https://balanceplatform-api-test.adyen.com/bcl/v2";
    private baseUrl: string;

    public constructor(client: Client){
        super(client);
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }

    /**
    * @summary Begin SCA device registration
    * @param beginScaDeviceRegistrationRequest {@link BeginScaDeviceRegistrationRequest } 
    * @param requestOptions {@link IRequest.Options }
    * @return {@link BeginScaDeviceRegistrationResponse }
    */
    public async beginScaDeviceRegistration(beginScaDeviceRegistrationRequest: BeginScaDeviceRegistrationRequest, requestOptions?: IRequest.Options): Promise<BeginScaDeviceRegistrationResponse> {
        const endpoint = `${this.baseUrl}/scaDevices`;
        const resource = new Resource(this, endpoint);
        
        const request: BeginScaDeviceRegistrationRequest = ObjectSerializer.serialize(beginScaDeviceRegistrationRequest, "BeginScaDeviceRegistrationRequest");
        const response = await getJsonResponse<BeginScaDeviceRegistrationRequest, BeginScaDeviceRegistrationResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );

        return ObjectSerializer.deserialize(response, "BeginScaDeviceRegistrationResponse");
    }

    /**
    * @summary Finish registration process for a SCA device
    * @param deviceId {@link string } The unique identifier of the SCA device that you are associating with a resource.
    * @param finishScaDeviceRegistrationRequest {@link FinishScaDeviceRegistrationRequest } 
    * @param requestOptions {@link IRequest.Options }
    * @return {@link FinishScaDeviceRegistrationResponse }
    */
    public async finishScaDeviceRegistration(deviceId: string, finishScaDeviceRegistrationRequest: FinishScaDeviceRegistrationRequest, requestOptions?: IRequest.Options): Promise<FinishScaDeviceRegistrationResponse> {
        const endpoint = `${this.baseUrl}/scaDevices/{deviceId}`
            .replace("{" + "deviceId" + "}", encodeURIComponent(String(deviceId)));
        const resource = new Resource(this, endpoint);
        
        const request: FinishScaDeviceRegistrationRequest = ObjectSerializer.serialize(finishScaDeviceRegistrationRequest, "FinishScaDeviceRegistrationRequest");
        const response = await getJsonResponse<FinishScaDeviceRegistrationRequest, FinishScaDeviceRegistrationResponse>(
            resource,
            request,
            { ...requestOptions, method: "PATCH" }
        );

        return ObjectSerializer.deserialize(response, "FinishScaDeviceRegistrationResponse");
    }

    /**
    * @summary Create a new SCA association for a device
    * @param deviceId {@link string } The unique identifier of the SCA device that you are associating with a resource.
    * @param submitScaAssociationRequest {@link SubmitScaAssociationRequest } 
    * @param requestOptions {@link IRequest.Options }
    * @return {@link SubmitScaAssociationResponse }
    */
    public async submitScaAssociation(deviceId: string, submitScaAssociationRequest: SubmitScaAssociationRequest, requestOptions?: IRequest.Options): Promise<SubmitScaAssociationResponse> {
        const endpoint = `${this.baseUrl}/scaDevices/{deviceId}/scaAssociations`
            .replace("{" + "deviceId" + "}", encodeURIComponent(String(deviceId)));
        const resource = new Resource(this, endpoint);
        
        const request: SubmitScaAssociationRequest = ObjectSerializer.serialize(submitScaAssociationRequest, "SubmitScaAssociationRequest");
        const response = await getJsonResponse<SubmitScaAssociationRequest, SubmitScaAssociationResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );

        return ObjectSerializer.deserialize(response, "SubmitScaAssociationResponse");
    }

}
