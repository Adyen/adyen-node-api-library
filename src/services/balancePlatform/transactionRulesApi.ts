/*
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import getJsonResponse from "../../helpers/getJsonResponse";
import Service from "../../service";
import Client from "../../client";
import { 
    RestServiceError,
    TransactionRule,
    TransactionRuleInfo,
    TransactionRuleResponse,
    ObjectSerializer
} from "../../typings/balancePlatform/models";
import { IRequest } from "../../typings/requestOptions";
import Resource from "../resource";

export class TransactionRulesApi extends Service {

    private readonly API_BASEPATH: string = "https://balanceplatform-api-test.adyen.com/bcl/v2";
    private baseUrl: string;

    public constructor(client: Client){
        super(client);
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }

    /**
    * @summary Create a transaction rule
    * @param transactionRuleInfo {@link TransactionRuleInfo } 
    * @param requestOptions {@link IRequest.Options }
    * @return {@link TransactionRule }
    */
    public async createTransactionRule(transactionRuleInfo: TransactionRuleInfo, requestOptions?: IRequest.Options): Promise<TransactionRule> {
        const endpoint = `${this.baseUrl}/transactionRules`;
        const resource = new Resource(this, endpoint);
        const request: TransactionRuleInfo = ObjectSerializer.serialize(transactionRuleInfo, "TransactionRuleInfo");
        const response = await getJsonResponse<TransactionRuleInfo, TransactionRule>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "TransactionRule");
    }

    /**
    * @summary Delete a transaction rule
    * @param transactionRuleId {@link string } The unique identifier of the transaction rule.
    * @param requestOptions {@link IRequest.Options }
    * @return {@link TransactionRule }
    */
    public async deleteTransactionRule(transactionRuleId: string, requestOptions?: IRequest.Options): Promise<TransactionRule> {
        const endpoint = `${this.baseUrl}/transactionRules/{transactionRuleId}`
            .replace("{" + "transactionRuleId" + "}", encodeURIComponent(String(transactionRuleId)));
        const resource = new Resource(this, endpoint);
        const response = await getJsonResponse<string, TransactionRule>(
            resource,
            "",
            { ...requestOptions, method: "DELETE" }
        );
        return ObjectSerializer.deserialize(response, "TransactionRule");
    }

    /**
    * @summary Get a transaction rule
    * @param transactionRuleId {@link string } The unique identifier of the transaction rule.
    * @param requestOptions {@link IRequest.Options }
    * @return {@link TransactionRuleResponse }
    */
    public async getTransactionRule(transactionRuleId: string, requestOptions?: IRequest.Options): Promise<TransactionRuleResponse> {
        const endpoint = `${this.baseUrl}/transactionRules/{transactionRuleId}`
            .replace("{" + "transactionRuleId" + "}", encodeURIComponent(String(transactionRuleId)));
        const resource = new Resource(this, endpoint);
        const response = await getJsonResponse<string, TransactionRuleResponse>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "TransactionRuleResponse");
    }

    /**
    * @summary Update a transaction rule
    * @param transactionRuleId {@link string } The unique identifier of the transaction rule.
    * @param transactionRuleInfo {@link TransactionRuleInfo } 
    * @param requestOptions {@link IRequest.Options }
    * @return {@link TransactionRule }
    */
    public async updateTransactionRule(transactionRuleId: string, transactionRuleInfo: TransactionRuleInfo, requestOptions?: IRequest.Options): Promise<TransactionRule> {
        const endpoint = `${this.baseUrl}/transactionRules/{transactionRuleId}`
            .replace("{" + "transactionRuleId" + "}", encodeURIComponent(String(transactionRuleId)));
        const resource = new Resource(this, endpoint);
        const request: TransactionRuleInfo = ObjectSerializer.serialize(transactionRuleInfo, "TransactionRuleInfo");
        const response = await getJsonResponse<TransactionRuleInfo, TransactionRule>(
            resource,
            request,
            { ...requestOptions, method: "PATCH" }
        );
        return ObjectSerializer.deserialize(response, "TransactionRule");
    }
}
