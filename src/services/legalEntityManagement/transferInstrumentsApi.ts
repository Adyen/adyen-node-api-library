/*
 * The version of the OpenAPI document: v3
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import getJsonResponse from "../../helpers/getJsonResponse";
import Service from "../../service";
import { TransferInstrument } from "../../typings/legalEntityManagement/models";
import { TransferInstrumentInfo } from "../../typings/legalEntityManagement/models";
import { IRequest } from "../../typings/requestOptions";
import LegalEntityManagementResource from "../resource/legalEntityManagementResource";
import { ObjectSerializer } from "../../typings/legalEntityManagement/models";

export class TransferInstrumentsApi extends Service {

    /**
    * @summary Delete a transfer instrument
    * @param id {@link string } The unique identifier of the transfer instrument to be deleted.
    * @param requestOptions {@link IRequest.Options}
    */
    public async deleteTransferInstrument(id: string, requestOptions?: IRequest.Options): Promise<void> {
        const localVarPath = "/transferInstruments/{id}"
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new LegalEntityManagementResource(this, localVarPath);
        await getJsonResponse<string, void>(
            resource,
            "",
            { ...requestOptions, method: "DELETE" }
        );
    }

    /**
    * @summary Get a transfer instrument
    * @param id {@link string } The unique identifier of the transfer instrument.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link TransferInstrument }
    */
    public async getTransferInstrument(id: string, requestOptions?: IRequest.Options): Promise<TransferInstrument> {
        const localVarPath = "/transferInstruments/{id}"
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new LegalEntityManagementResource(this, localVarPath);
        const response = await getJsonResponse<string, TransferInstrument>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "TransferInstrument");
    }

    /**
    * @summary Update a transfer instrument
    * @param id {@link string } The unique identifier of the transfer instrument.
    * @param transferInstrumentInfo {@link TransferInstrumentInfo } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link TransferInstrument }
    */
    public async updateTransferInstrument(id: string, transferInstrumentInfo: TransferInstrumentInfo, requestOptions?: IRequest.Options): Promise<TransferInstrument> {
        const localVarPath = "/transferInstruments/{id}"
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new LegalEntityManagementResource(this, localVarPath);
        const request: TransferInstrumentInfo = ObjectSerializer.serialize(transferInstrumentInfo, "TransferInstrumentInfo");
        const response = await getJsonResponse<TransferInstrumentInfo, TransferInstrument>(
            resource,
            request,
            { ...requestOptions, method: "PATCH" }
        );
        return ObjectSerializer.deserialize(response, "TransferInstrument");
    }

    /**
    * @summary Create a transfer instrument
    * @param transferInstrumentInfo {@link TransferInstrumentInfo } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link TransferInstrument }
    */
    public async createTransferInstrument(transferInstrumentInfo: TransferInstrumentInfo, requestOptions?: IRequest.Options): Promise<TransferInstrument> {
        const localVarPath = "/transferInstruments";
        const resource = new LegalEntityManagementResource(this, localVarPath);
        const request: TransferInstrumentInfo = ObjectSerializer.serialize(transferInstrumentInfo, "TransferInstrumentInfo");
        const response = await getJsonResponse<TransferInstrumentInfo, TransferInstrument>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "TransferInstrument");
    }
}
