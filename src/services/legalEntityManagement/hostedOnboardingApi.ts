/*
 * The version of the OpenAPI document: v3
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import getJsonResponse from "../../helpers/getJsonResponse";
import Service from "../../service";
import { OnboardingLink } from "../../typings/legalEntityManagement/models";
import { OnboardingLinkInfo } from "../../typings/legalEntityManagement/models";
import { OnboardingTheme } from "../../typings/legalEntityManagement/models";
import { OnboardingThemes } from "../../typings/legalEntityManagement/models";
import { IRequest } from "../../typings/requestOptions";
import LegalEntityManagementResource from "../resource/legalEntityManagementResource";
import { ObjectSerializer } from "../../typings/legalEntityManagement/models";

export class HostedOnboardingApi extends Service {

    /**
    * @summary Get a list of hosted onboarding page themes
    * @param requestOptions {@link IRequest.Options}
    * @return {@link OnboardingThemes }
    */
    public async listHostedOnboardingPageThemes(requestOptions?: IRequest.Options): Promise<OnboardingThemes> {
        const localVarPath = "/themes";
        const resource = new LegalEntityManagementResource(this, localVarPath);
        const response = await getJsonResponse<string, OnboardingThemes>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "OnboardingThemes");
    }

    /**
    * @summary Get an onboarding link theme
    * @param id {@link string } The unique identifier of the theme
    * @param requestOptions {@link IRequest.Options}
    * @return {@link OnboardingTheme }
    */
    public async getOnboardingLinkTheme(id: string, requestOptions?: IRequest.Options): Promise<OnboardingTheme> {
        const localVarPath = "/themes/{id}"
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new LegalEntityManagementResource(this, localVarPath);
        const response = await getJsonResponse<string, OnboardingTheme>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "OnboardingTheme");
    }

    /**
    * @summary Get a link to an Adyen-hosted onboarding page
    * @param id {@link string } The unique identifier of the legal entity
    * @param onboardingLinkInfo {@link OnboardingLinkInfo } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link OnboardingLink }
    */
    public async getLinkToAdyenhostedOnboardingPage(id: string, onboardingLinkInfo: OnboardingLinkInfo, requestOptions?: IRequest.Options): Promise<OnboardingLink> {
        const localVarPath = "/legalEntities/{id}/onboardingLinks"
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new LegalEntityManagementResource(this, localVarPath);
        const request: OnboardingLinkInfo = ObjectSerializer.serialize(onboardingLinkInfo, "OnboardingLinkInfo");
        const response = await getJsonResponse<OnboardingLinkInfo, OnboardingLink>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "OnboardingLink");
    }
}
