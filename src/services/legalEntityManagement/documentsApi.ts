/*
 * The version of the OpenAPI document: v3
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import getJsonResponse from "../../helpers/getJsonResponse";
import Service from "../../service";
import { Document } from "../../typings/legalEntityManagement/models";
import { IRequest } from "../../typings/requestOptions";
import LegalEntityManagementResource from "../resource/legalEntityManagementResource";
import { ObjectSerializer } from "../../typings/legalEntityManagement/models";

export class DocumentsApi extends Service {

    /**
    * @summary Delete a document
    * @param id {@link string } The unique identifier of the document to be deleted.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link object }
    */
    public async deleteDocument(id: string, requestOptions?: IRequest.Options): Promise<object> {
        const localVarPath = "/documents/{id}"
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new LegalEntityManagementResource(this, localVarPath);
        const response = await getJsonResponse<string, object>(
            resource,
            "",
            { ...requestOptions, method: "DELETE" }
        );
        return ObjectSerializer.deserialize(response, "object");
    }

    /**
    * @summary Get a document
    * @param id {@link string } The unique identifier of the document.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link Document }
    */
    public async getDocument(id: string, requestOptions?: IRequest.Options): Promise<Document> {
        const localVarPath = "/documents/{id}"
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new LegalEntityManagementResource(this, localVarPath);
        const response = await getJsonResponse<string, Document>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "Document");
    }

    /**
    * @summary Update a document
    * @param id {@link string } The unique identifier of the document to be updated.
    * @param document {@link Document } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link Document }
    */
    public async updateDocument(id: string, document: Document, requestOptions?: IRequest.Options): Promise<Document> {
        const localVarPath = "/documents/{id}"
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new LegalEntityManagementResource(this, localVarPath);
        const request: Document = ObjectSerializer.serialize(document, "Document");
        const response = await getJsonResponse<Document, Document>(
            resource,
            request,
            { ...requestOptions, method: "PATCH" }
        );
        return ObjectSerializer.deserialize(response, "Document");
    }

    /**
    * @summary Upload a document for verification checks
    * @param document {@link Document } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link Document }
    */
    public async uploadDocumentForVerificationChecks(document: Document, requestOptions?: IRequest.Options): Promise<Document> {
        const localVarPath = "/documents";
        const resource = new LegalEntityManagementResource(this, localVarPath);
        const request: Document = ObjectSerializer.serialize(document, "Document");
        const response = await getJsonResponse<Document, Document>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "Document");
    }
}
