/*
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import getJsonResponse from "../../helpers/getJsonResponse";
import Service from "../../service";
import Client from "../../client";
import { 
    CalculatePciStatusRequest,
    CalculatePciStatusResponse,
    GeneratePciDescriptionRequest,
    GeneratePciDescriptionResponse,
    GetPciQuestionnaireInfosResponse,
    GetPciQuestionnaireResponse,
    PciSigningRequest,
    PciSigningResponse,
    ObjectSerializer
} from "../../typings/legalEntityManagement/models";
import { IRequest } from "../../typings/requestOptions";
import Resource from "../resource";

export class PCIQuestionnairesApi extends Service {

    private readonly API_BASEPATH: string = "https://kyc-test.adyen.com/lem/v3";
    private baseUrl: string;

    public constructor(client: Client){
        super(client);
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }

    /**
    * @summary Calculate PCI status of a legal entity
    * @param id {@link string } The unique identifier of the legal entity to calculate PCI status.
    * @param calculatePciStatusRequest {@link CalculatePciStatusRequest } 
    * @param requestOptions {@link IRequest.Options }
    * @return {@link CalculatePciStatusResponse }
    */
    public async calculatePciStatusOfLegalEntity(id: string, calculatePciStatusRequest: CalculatePciStatusRequest, requestOptions?: IRequest.Options): Promise<CalculatePciStatusResponse> {
        const endpoint = `${this.baseUrl}/legalEntities/{id}/pciQuestionnaires/signingRequired`
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new Resource(this, endpoint);
        const request: CalculatePciStatusRequest = ObjectSerializer.serialize(calculatePciStatusRequest, "CalculatePciStatusRequest");
        const response = await getJsonResponse<CalculatePciStatusRequest, CalculatePciStatusResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "CalculatePciStatusResponse");
    }

    /**
    * @summary Generate PCI questionnaire
    * @param id {@link string } The unique identifier of the legal entity to get PCI questionnaire information.
    * @param generatePciDescriptionRequest {@link GeneratePciDescriptionRequest } 
    * @param requestOptions {@link IRequest.Options }
    * @return {@link GeneratePciDescriptionResponse }
    */
    public async generatePciQuestionnaire(id: string, generatePciDescriptionRequest: GeneratePciDescriptionRequest, requestOptions?: IRequest.Options): Promise<GeneratePciDescriptionResponse> {
        const endpoint = `${this.baseUrl}/legalEntities/{id}/pciQuestionnaires/generatePciTemplates`
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new Resource(this, endpoint);
        const request: GeneratePciDescriptionRequest = ObjectSerializer.serialize(generatePciDescriptionRequest, "GeneratePciDescriptionRequest");
        const response = await getJsonResponse<GeneratePciDescriptionRequest, GeneratePciDescriptionResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "GeneratePciDescriptionResponse");
    }

    /**
    * @summary Get PCI questionnaire
    * @param id {@link string } The legal entity ID of the individual who signed the PCI questionnaire.
    * @param pciid {@link string } The unique identifier of the signed PCI questionnaire.
    * @param requestOptions {@link IRequest.Options }
    * @return {@link GetPciQuestionnaireResponse }
    */
    public async getPciQuestionnaire(id: string, pciid: string, requestOptions?: IRequest.Options): Promise<GetPciQuestionnaireResponse> {
        const endpoint = `${this.baseUrl}/legalEntities/{id}/pciQuestionnaires/{pciid}`
            .replace("{" + "id" + "}", encodeURIComponent(String(id)))
            .replace("{" + "pciid" + "}", encodeURIComponent(String(pciid)));
        const resource = new Resource(this, endpoint);
        const response = await getJsonResponse<string, GetPciQuestionnaireResponse>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "GetPciQuestionnaireResponse");
    }

    /**
    * @summary Get PCI questionnaire details
    * @param id {@link string } The unique identifier of the legal entity to get PCI questionnaire information.
    * @param requestOptions {@link IRequest.Options }
    * @return {@link GetPciQuestionnaireInfosResponse }
    */
    public async getPciQuestionnaireDetails(id: string, requestOptions?: IRequest.Options): Promise<GetPciQuestionnaireInfosResponse> {
        const endpoint = `${this.baseUrl}/legalEntities/{id}/pciQuestionnaires`
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new Resource(this, endpoint);
        const response = await getJsonResponse<string, GetPciQuestionnaireInfosResponse>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "GetPciQuestionnaireInfosResponse");
    }

    /**
    * @summary Sign PCI questionnaire
    * @param id {@link string } The legal entity ID of the user that has a contractual relationship with your platform.
    * @param pciSigningRequest {@link PciSigningRequest } 
    * @param requestOptions {@link IRequest.Options }
    * @return {@link PciSigningResponse }
    */
    public async signPciQuestionnaire(id: string, pciSigningRequest: PciSigningRequest, requestOptions?: IRequest.Options): Promise<PciSigningResponse> {
        const endpoint = `${this.baseUrl}/legalEntities/{id}/pciQuestionnaires/signPciTemplates`
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new Resource(this, endpoint);
        const request: PciSigningRequest = ObjectSerializer.serialize(pciSigningRequest, "PciSigningRequest");
        const response = await getJsonResponse<PciSigningRequest, PciSigningResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "PciSigningResponse");
    }
}
