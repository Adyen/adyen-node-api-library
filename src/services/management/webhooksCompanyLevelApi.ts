/*
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */


import getJsonResponse from "../../helpers/getJsonResponse";
import Service from "../../service";
import Client from "../../client";
import { IRequest } from "../../typings/requestOptions";
import Resource from "../resource";

import { ObjectSerializer } from "../../typings/management/objectSerializer";
import { CreateCompanyWebhookRequest } from "../../typings/management/models";
import { GenerateHmacKeyResponse } from "../../typings/management/models";
import { ListWebhooksResponse } from "../../typings/management/models";
import { TestCompanyWebhookRequest } from "../../typings/management/models";
import { TestWebhookResponse } from "../../typings/management/models";
import { UpdateCompanyWebhookRequest } from "../../typings/management/models";
import { Webhook } from "../../typings/management/models";

/**
 * API handler for WebhooksCompanyLevelApi
 */
export class WebhooksCompanyLevelApi extends Service {

    private readonly API_BASEPATH: string = "https://management-test.adyen.com/v3";
    private baseUrl: string;

    public constructor(client: Client){
        super(client);
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }

    /**
    * @summary Generate an HMAC key
    * @param companyId {@link string } The unique identifier of the company account.
    * @param webhookId {@link string } Unique identifier of the webhook configuration.
    * @param requestOptions {@link IRequest.Options }
    * @return {@link GenerateHmacKeyResponse }
    */
    public async generateHmacKey(companyId: string, webhookId: string, requestOptions?: IRequest.Options): Promise<GenerateHmacKeyResponse> {
        const endpoint = `${this.baseUrl}/companies/{companyId}/webhooks/{webhookId}/generateHmac`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)))
            .replace("{" + "webhookId" + "}", encodeURIComponent(String(webhookId)));
        const resource = new Resource(this, endpoint);
        
        const response = await getJsonResponse<string, GenerateHmacKeyResponse>(
            resource,
            "",
            { ...requestOptions, method: "POST" }
        );

        return ObjectSerializer.deserialize(response, "GenerateHmacKeyResponse");
    }

    /**
    * @summary Get a webhook
    * @param companyId {@link string } Unique identifier of the [company account](https://docs.adyen.com/account/account-structure#company-account).
    * @param webhookId {@link string } Unique identifier of the webhook configuration.
    * @param requestOptions {@link IRequest.Options }
    * @return {@link Webhook }
    */
    public async getWebhook(companyId: string, webhookId: string, requestOptions?: IRequest.Options): Promise<Webhook> {
        const endpoint = `${this.baseUrl}/companies/{companyId}/webhooks/{webhookId}`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)))
            .replace("{" + "webhookId" + "}", encodeURIComponent(String(webhookId)));
        const resource = new Resource(this, endpoint);
        
        const response = await getJsonResponse<string, Webhook>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );

        return ObjectSerializer.deserialize(response, "Webhook");
    }

    /**
    * @summary List all webhooks
    * @param companyId {@link string } Unique identifier of the [company account](https://docs.adyen.com/account/account-structure#company-account).
    * @param requestOptions {@link IRequest.Options }
    * @param pageNumber {@link number } The number of the page to fetch.
    * @param pageSize {@link number } The number of items to have on a page, maximum 100. The default is 10 items on a page.
    * @return {@link ListWebhooksResponse }
    */
    public async listAllWebhooks(companyId: string, pageNumber?: number, pageSize?: number, requestOptions?: IRequest.Options): Promise<ListWebhooksResponse> {
        const endpoint = `${this.baseUrl}/companies/{companyId}/webhooks`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)));
        const resource = new Resource(this, endpoint);
        
        const hasDefinedQueryParams = pageNumber ?? pageSize;
        if(hasDefinedQueryParams) {
            if(!requestOptions) requestOptions = {};
            if(!requestOptions.params) requestOptions.params = {};
            if(pageNumber) requestOptions.params["pageNumber"] = pageNumber;
            if(pageSize) requestOptions.params["pageSize"] = pageSize;
        }
        const response = await getJsonResponse<string, ListWebhooksResponse>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );

        return ObjectSerializer.deserialize(response, "ListWebhooksResponse");
    }

    /**
    * @summary Remove a webhook
    * @param companyId {@link string } The unique identifier of the company account.
    * @param webhookId {@link string } Unique identifier of the webhook configuration.
    * @param requestOptions {@link IRequest.Options }
    * @return {@link void }
    */
    public async removeWebhook(companyId: string, webhookId: string, requestOptions?: IRequest.Options): Promise<void> {
        const endpoint = `${this.baseUrl}/companies/{companyId}/webhooks/{webhookId}`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)))
            .replace("{" + "webhookId" + "}", encodeURIComponent(String(webhookId)));
        const resource = new Resource(this, endpoint);
        
        await getJsonResponse<string, void>(
            resource,
            "",
            { ...requestOptions, method: "DELETE" }
        );
    }

    /**
    * @summary Set up a webhook
    * @param companyId {@link string } Unique identifier of the [company account](https://docs.adyen.com/account/account-structure#company-account).
    * @param createCompanyWebhookRequest {@link CreateCompanyWebhookRequest } 
    * @param requestOptions {@link IRequest.Options }
    * @return {@link Webhook }
    */
    public async setUpWebhook(companyId: string, createCompanyWebhookRequest: CreateCompanyWebhookRequest, requestOptions?: IRequest.Options): Promise<Webhook> {
        const endpoint = `${this.baseUrl}/companies/{companyId}/webhooks`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)));
        const resource = new Resource(this, endpoint);
        
        const request: CreateCompanyWebhookRequest = ObjectSerializer.serialize(createCompanyWebhookRequest, "CreateCompanyWebhookRequest");
        const response = await getJsonResponse<CreateCompanyWebhookRequest, Webhook>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );

        return ObjectSerializer.deserialize(response, "Webhook");
    }

    /**
    * @summary Test a webhook
    * @param companyId {@link string } The unique identifier of the company account.
    * @param webhookId {@link string } Unique identifier of the webhook configuration.
    * @param testCompanyWebhookRequest {@link TestCompanyWebhookRequest } 
    * @param requestOptions {@link IRequest.Options }
    * @return {@link TestWebhookResponse }
    */
    public async testWebhook(companyId: string, webhookId: string, testCompanyWebhookRequest: TestCompanyWebhookRequest, requestOptions?: IRequest.Options): Promise<TestWebhookResponse> {
        const endpoint = `${this.baseUrl}/companies/{companyId}/webhooks/{webhookId}/test`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)))
            .replace("{" + "webhookId" + "}", encodeURIComponent(String(webhookId)));
        const resource = new Resource(this, endpoint);
        
        const request: TestCompanyWebhookRequest = ObjectSerializer.serialize(testCompanyWebhookRequest, "TestCompanyWebhookRequest");
        const response = await getJsonResponse<TestCompanyWebhookRequest, TestWebhookResponse>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );

        return ObjectSerializer.deserialize(response, "TestWebhookResponse");
    }

    /**
    * @summary Update a webhook
    * @param companyId {@link string } The unique identifier of the company account.
    * @param webhookId {@link string } Unique identifier of the webhook configuration.
    * @param updateCompanyWebhookRequest {@link UpdateCompanyWebhookRequest } 
    * @param requestOptions {@link IRequest.Options }
    * @return {@link Webhook }
    */
    public async updateWebhook(companyId: string, webhookId: string, updateCompanyWebhookRequest: UpdateCompanyWebhookRequest, requestOptions?: IRequest.Options): Promise<Webhook> {
        const endpoint = `${this.baseUrl}/companies/{companyId}/webhooks/{webhookId}`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)))
            .replace("{" + "webhookId" + "}", encodeURIComponent(String(webhookId)));
        const resource = new Resource(this, endpoint);
        
        const request: UpdateCompanyWebhookRequest = ObjectSerializer.serialize(updateCompanyWebhookRequest, "UpdateCompanyWebhookRequest");
        const response = await getJsonResponse<UpdateCompanyWebhookRequest, Webhook>(
            resource,
            request,
            { ...requestOptions, method: "PATCH" }
        );

        return ObjectSerializer.deserialize(response, "Webhook");
    }

}
