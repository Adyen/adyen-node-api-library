/*
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import getJsonResponse from "../../helpers/getJsonResponse";
import Service from "../../service";
import Client from "../../client";
import { 
    ApplePayInfo,
    PaymentMethod,
    PaymentMethodResponse,
    PaymentMethodSetupInfo,
    RestServiceError,
    UpdatePaymentMethodInfo,
    ObjectSerializer
} from "../../typings/management/models";
import { IRequest } from "../../typings/requestOptions";
import Resource from "../resource";

export class PaymentMethodsMerchantLevelApi extends Service {

    private readonly API_BASEPATH: string = "https://management-test.adyen.com/v3";
    private baseUrl: string;

    public constructor(client: Client){
        super(client);
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }

    /**
    * @summary Add an Apple Pay domain
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param paymentMethodId {@link string } The unique identifier of the payment method.
    * @param applePayInfo {@link ApplePayInfo } 
    * @param requestOptions {@link IRequest.Options }
    */
    public async addApplePayDomain(merchantId: string, paymentMethodId: string, applePayInfo: ApplePayInfo, requestOptions?: IRequest.Options): Promise<void> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}/addApplePayDomains`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "paymentMethodId" + "}", encodeURIComponent(String(paymentMethodId)));
        const resource = new Resource(this, endpoint);
        const request: ApplePayInfo = ObjectSerializer.serialize(applePayInfo, "ApplePayInfo");
        await getJsonResponse<ApplePayInfo, void>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
    }

    /**
    * @summary Get all payment methods
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param requestOptions {@link IRequest.Options }
    * @param storeId {@link string } The unique identifier of the store for which to return the payment methods.
    * @param businessLineId {@link string } The unique identifier of the Business Line for which to return the payment methods.
    * @param pageSize {@link number } The number of items to have on a page, maximum 100. The default is 10 items on a page.
    * @param pageNumber {@link number } The number of the page to fetch.
    * @return {@link PaymentMethodResponse }
    */
    public async getAllPaymentMethods(merchantId: string, storeId?: string, businessLineId?: string, pageSize?: number, pageNumber?: number, requestOptions?: IRequest.Options): Promise<PaymentMethodResponse> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/paymentMethodSettings`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)));
        const resource = new Resource(this, endpoint);
        const hasDefinedQueryParams = storeId ?? businessLineId ?? pageSize ?? pageNumber;
        if(hasDefinedQueryParams) {
            if(!requestOptions) requestOptions = {};
            if(!requestOptions.params) requestOptions.params = {};
            if(storeId) requestOptions.params["storeId"] = storeId;
            if(businessLineId) requestOptions.params["businessLineId"] = businessLineId;
            if(pageSize) requestOptions.params["pageSize"] = pageSize;
            if(pageNumber) requestOptions.params["pageNumber"] = pageNumber;
        }
        const response = await getJsonResponse<string, PaymentMethodResponse>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "PaymentMethodResponse");
    }

    /**
    * @summary Get Apple Pay domains
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param paymentMethodId {@link string } The unique identifier of the payment method.
    * @param requestOptions {@link IRequest.Options }
    * @return {@link ApplePayInfo }
    */
    public async getApplePayDomains(merchantId: string, paymentMethodId: string, requestOptions?: IRequest.Options): Promise<ApplePayInfo> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}/getApplePayDomains`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "paymentMethodId" + "}", encodeURIComponent(String(paymentMethodId)));
        const resource = new Resource(this, endpoint);
        const response = await getJsonResponse<string, ApplePayInfo>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "ApplePayInfo");
    }

    /**
    * @summary Get payment method details
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param paymentMethodId {@link string } The unique identifier of the payment method.
    * @param requestOptions {@link IRequest.Options }
    * @return {@link PaymentMethod }
    */
    public async getPaymentMethodDetails(merchantId: string, paymentMethodId: string, requestOptions?: IRequest.Options): Promise<PaymentMethod> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "paymentMethodId" + "}", encodeURIComponent(String(paymentMethodId)));
        const resource = new Resource(this, endpoint);
        const response = await getJsonResponse<string, PaymentMethod>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "PaymentMethod");
    }

    /**
    * @summary Request a payment method
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param paymentMethodSetupInfo {@link PaymentMethodSetupInfo } 
    * @param requestOptions {@link IRequest.Options }
    * @return {@link PaymentMethod }
    */
    public async requestPaymentMethod(merchantId: string, paymentMethodSetupInfo: PaymentMethodSetupInfo, requestOptions?: IRequest.Options): Promise<PaymentMethod> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/paymentMethodSettings`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)));
        const resource = new Resource(this, endpoint);
        const request: PaymentMethodSetupInfo = ObjectSerializer.serialize(paymentMethodSetupInfo, "PaymentMethodSetupInfo");
        const response = await getJsonResponse<PaymentMethodSetupInfo, PaymentMethod>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "PaymentMethod");
    }

    /**
    * @summary Update a payment method
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param paymentMethodId {@link string } The unique identifier of the payment method.
    * @param updatePaymentMethodInfo {@link UpdatePaymentMethodInfo } 
    * @param requestOptions {@link IRequest.Options }
    * @return {@link PaymentMethod }
    */
    public async updatePaymentMethod(merchantId: string, paymentMethodId: string, updatePaymentMethodInfo: UpdatePaymentMethodInfo, requestOptions?: IRequest.Options): Promise<PaymentMethod> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "paymentMethodId" + "}", encodeURIComponent(String(paymentMethodId)));
        const resource = new Resource(this, endpoint);
        const request: UpdatePaymentMethodInfo = ObjectSerializer.serialize(updatePaymentMethodInfo, "UpdatePaymentMethodInfo");
        const response = await getJsonResponse<UpdatePaymentMethodInfo, PaymentMethod>(
            resource,
            request,
            { ...requestOptions, method: "PATCH" }
        );
        return ObjectSerializer.deserialize(response, "PaymentMethod");
    }
}
