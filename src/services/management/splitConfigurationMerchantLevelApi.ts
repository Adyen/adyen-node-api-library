/*
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import getJsonResponse from "../../helpers/getJsonResponse";
import Service from "../../service";
import Client from "../../client";
import { SplitConfiguration } from "../../typings/management/models";
import { SplitConfigurationList } from "../../typings/management/models";
import { SplitConfigurationRule } from "../../typings/management/models";
import { UpdateSplitConfigurationLogicRequest } from "../../typings/management/models";
import { UpdateSplitConfigurationRequest } from "../../typings/management/models";
import { UpdateSplitConfigurationRuleRequest } from "../../typings/management/models";
import { IRequest } from "../../typings/requestOptions";
import Resource from "../resource";
import { ObjectSerializer } from "../../typings/management/models";

export class SplitConfigurationMerchantLevelApi extends Service {

    private baseUrl: string;

    public constructor(client: Client){
        super(client);
        this.baseUrl = this.createBaseUrl("https://management-test.adyen.com/v1");
    }

    /**
    * @summary Delete a split configuration
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param splitConfigurationId {@link string } The unique identifier of the split configuration.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SplitConfiguration }
    */
    public async deleteSplitConfiguration(merchantId: string, splitConfigurationId: string, requestOptions?: IRequest.Options): Promise<SplitConfiguration> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "splitConfigurationId" + "}", encodeURIComponent(String(splitConfigurationId)));
        const resource = new Resource(this, endpoint);
        const response = await getJsonResponse<string, SplitConfiguration>(
            resource,
            "",
            { ...requestOptions, method: "DELETE" }
        );
        return ObjectSerializer.deserialize(response, "SplitConfiguration");
    }

    /**
    * @summary Delete a split configuration rule
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param splitConfigurationId {@link string } The unique identifier of the split configuration.
    * @param ruleId {@link string } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SplitConfiguration }
    */
    public async deleteSplitConfigurationRule(merchantId: string, splitConfigurationId: string, ruleId: string, requestOptions?: IRequest.Options): Promise<SplitConfiguration> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}/rules/{ruleId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "splitConfigurationId" + "}", encodeURIComponent(String(splitConfigurationId)))
            .replace("{" + "ruleId" + "}", encodeURIComponent(String(ruleId)));
        const resource = new Resource(this, endpoint);
        const response = await getJsonResponse<string, SplitConfiguration>(
            resource,
            "",
            { ...requestOptions, method: "DELETE" }
        );
        return ObjectSerializer.deserialize(response, "SplitConfiguration");
    }

    /**
    * @summary Get a list of split configurations
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SplitConfigurationList }
    */
    public async listSplitConfigurations(merchantId: string, requestOptions?: IRequest.Options): Promise<SplitConfigurationList> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/splitConfigurations`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)));
        const resource = new Resource(this, endpoint);
        const response = await getJsonResponse<string, SplitConfigurationList>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "SplitConfigurationList");
    }

    /**
    * @summary Get a split configuration
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param splitConfigurationId {@link string } The unique identifier of the split configuration.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SplitConfiguration }
    */
    public async getSplitConfiguration(merchantId: string, splitConfigurationId: string, requestOptions?: IRequest.Options): Promise<SplitConfiguration> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "splitConfigurationId" + "}", encodeURIComponent(String(splitConfigurationId)));
        const resource = new Resource(this, endpoint);
        const response = await getJsonResponse<string, SplitConfiguration>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "SplitConfiguration");
    }

    /**
    * @summary Update split configuration description
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param splitConfigurationId {@link string } The unique identifier of the split configuration.
    * @param updateSplitConfigurationRequest {@link UpdateSplitConfigurationRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SplitConfiguration }
    */
    public async updateSplitConfigurationDescription(merchantId: string, splitConfigurationId: string, updateSplitConfigurationRequest: UpdateSplitConfigurationRequest, requestOptions?: IRequest.Options): Promise<SplitConfiguration> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "splitConfigurationId" + "}", encodeURIComponent(String(splitConfigurationId)));
        const resource = new Resource(this, endpoint);
        const request: UpdateSplitConfigurationRequest = ObjectSerializer.serialize(updateSplitConfigurationRequest, "UpdateSplitConfigurationRequest");
        const response = await getJsonResponse<UpdateSplitConfigurationRequest, SplitConfiguration>(
            resource,
            request,
            { ...requestOptions, method: "PATCH" }
        );
        return ObjectSerializer.deserialize(response, "SplitConfiguration");
    }

    /**
    * @summary Update split conditions
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param splitConfigurationId {@link string } The identifier of the split configuration.
    * @param ruleId {@link string } The unique identifier of the split configuration rule.
    * @param updateSplitConfigurationRuleRequest {@link UpdateSplitConfigurationRuleRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SplitConfiguration }
    */
    public async updateSplitConditions(merchantId: string, splitConfigurationId: string, ruleId: string, updateSplitConfigurationRuleRequest: UpdateSplitConfigurationRuleRequest, requestOptions?: IRequest.Options): Promise<SplitConfiguration> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}/rules/{ruleId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "splitConfigurationId" + "}", encodeURIComponent(String(splitConfigurationId)))
            .replace("{" + "ruleId" + "}", encodeURIComponent(String(ruleId)));
        const resource = new Resource(this, endpoint);
        const request: UpdateSplitConfigurationRuleRequest = ObjectSerializer.serialize(updateSplitConfigurationRuleRequest, "UpdateSplitConfigurationRuleRequest");
        const response = await getJsonResponse<UpdateSplitConfigurationRuleRequest, SplitConfiguration>(
            resource,
            request,
            { ...requestOptions, method: "PATCH" }
        );
        return ObjectSerializer.deserialize(response, "SplitConfiguration");
    }

    /**
    * @summary Update the split logic
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param splitConfigurationId {@link string } The unique identifier of the split configuration.
    * @param ruleId {@link string } The unique identifier of the split configuration rule.
    * @param splitLogicId {@link string } The unique identifier of the split configuration split.
    * @param updateSplitConfigurationLogicRequest {@link UpdateSplitConfigurationLogicRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SplitConfiguration }
    */
    public async updateSplitLogic(merchantId: string, splitConfigurationId: string, ruleId: string, splitLogicId: string, updateSplitConfigurationLogicRequest: UpdateSplitConfigurationLogicRequest, requestOptions?: IRequest.Options): Promise<SplitConfiguration> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}/rules/{ruleId}/splitLogic/{splitLogicId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "splitConfigurationId" + "}", encodeURIComponent(String(splitConfigurationId)))
            .replace("{" + "ruleId" + "}", encodeURIComponent(String(ruleId)))
            .replace("{" + "splitLogicId" + "}", encodeURIComponent(String(splitLogicId)));
        const resource = new Resource(this, endpoint);
        const request: UpdateSplitConfigurationLogicRequest = ObjectSerializer.serialize(updateSplitConfigurationLogicRequest, "UpdateSplitConfigurationLogicRequest");
        const response = await getJsonResponse<UpdateSplitConfigurationLogicRequest, SplitConfiguration>(
            resource,
            request,
            { ...requestOptions, method: "PATCH" }
        );
        return ObjectSerializer.deserialize(response, "SplitConfiguration");
    }

    /**
    * @summary Create a split configuration
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param splitConfiguration {@link SplitConfiguration } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SplitConfiguration }
    */
    public async createSplitConfiguration(merchantId: string, splitConfiguration: SplitConfiguration, requestOptions?: IRequest.Options): Promise<SplitConfiguration> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/splitConfigurations`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)));
        const resource = new Resource(this, endpoint);
        const request: SplitConfiguration = ObjectSerializer.serialize(splitConfiguration, "SplitConfiguration");
        const response = await getJsonResponse<SplitConfiguration, SplitConfiguration>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "SplitConfiguration");
    }

    /**
    * @summary Create a rule
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param splitConfigurationId {@link string } The unique identifier of the split configuration.
    * @param splitConfigurationRule {@link SplitConfigurationRule } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link SplitConfiguration }
    */
    public async createRule(merchantId: string, splitConfigurationId: string, splitConfigurationRule: SplitConfigurationRule, requestOptions?: IRequest.Options): Promise<SplitConfiguration> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "splitConfigurationId" + "}", encodeURIComponent(String(splitConfigurationId)));
        const resource = new Resource(this, endpoint);
        const request: SplitConfigurationRule = ObjectSerializer.serialize(splitConfigurationRule, "SplitConfigurationRule");
        const response = await getJsonResponse<SplitConfigurationRule, SplitConfiguration>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "SplitConfiguration");
    }
}
