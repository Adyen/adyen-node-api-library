/*
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import getJsonResponse from "../../helpers/getJsonResponse";
import Service from "../../service";
import Client from "../../client";
import { ListStoresResponse } from "../../typings/management/models";
import { Store } from "../../typings/management/models";
import { StoreCreationRequest } from "../../typings/management/models";
import { StoreCreationWithMerchantCodeRequest } from "../../typings/management/models";
import { UpdateStoreRequest } from "../../typings/management/models";
import { IRequest } from "../../typings/requestOptions";
import Resource from "../resource";
import { ObjectSerializer } from "../../typings/management/models";

export class AccountStoreLevelApi extends Service {

    private readonly API_BASEPATH: string = "https://management-test.adyen.com/v3";
    private baseUrl: string;

    public constructor(client: Client){
        super(client);
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }

    /**
    * @summary Get a list of stores
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param pageNumber {@link number } The number of the page to fetch.
    * @param pageSize {@link number } The number of items to have on a page, maximum 100. The default is 10 items on a page.
    * @param reference {@link string } The reference of the store.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link ListStoresResponse }
    */
    public async listStoresByMerchantId(merchantId: string, requestOptions?: IRequest.Options): Promise<ListStoresResponse> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/stores`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)));
        const resource = new Resource(this, endpoint);
        const response = await getJsonResponse<string, ListStoresResponse>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "ListStoresResponse");
    }

    /**
    * @summary Get a store
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param storeId {@link string } The unique identifier of the store.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link Store }
    */
    public async getStore(merchantId: string, storeId: string, requestOptions?: IRequest.Options): Promise<Store> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/stores/{storeId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "storeId" + "}", encodeURIComponent(String(storeId)));
        const resource = new Resource(this, endpoint);
        const response = await getJsonResponse<string, Store>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "Store");
    }

    /**
    * @summary Get a list of stores
    * @param pageNumber {@link number } The number of the page to fetch.
    * @param pageSize {@link number } The number of items to have on a page, maximum 100. The default is 10 items on a page.
    * @param reference {@link string } The reference of the store.
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link ListStoresResponse }
    */
    public async listStores(requestOptions?: IRequest.Options): Promise<ListStoresResponse> {
        const endpoint = `${this.baseUrl}/stores`;
        const resource = new Resource(this, endpoint);
        const response = await getJsonResponse<string, ListStoresResponse>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "ListStoresResponse");
    }

    /**
    * @summary Get a store
    * @param storeId {@link string } The unique identifier of the store.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link Store }
    */
    public async getStoreById(storeId: string, requestOptions?: IRequest.Options): Promise<Store> {
        const endpoint = `${this.baseUrl}/stores/{storeId}`
            .replace("{" + "storeId" + "}", encodeURIComponent(String(storeId)));
        const resource = new Resource(this, endpoint);
        const response = await getJsonResponse<string, Store>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "Store");
    }

    /**
    * @summary Update a store
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param storeId {@link string } The unique identifier of the store.
    * @param updateStoreRequest {@link UpdateStoreRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link Store }
    */
    public async updateStore(merchantId: string, storeId: string, updateStoreRequest: UpdateStoreRequest, requestOptions?: IRequest.Options): Promise<Store> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/stores/{storeId}`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "storeId" + "}", encodeURIComponent(String(storeId)));
        const resource = new Resource(this, endpoint);
        const request: UpdateStoreRequest = ObjectSerializer.serialize(updateStoreRequest, "UpdateStoreRequest");
        const response = await getJsonResponse<UpdateStoreRequest, Store>(
            resource,
            request,
            { ...requestOptions, method: "PATCH" }
        );
        return ObjectSerializer.deserialize(response, "Store");
    }

    /**
    * @summary Update a store
    * @param storeId {@link string } The unique identifier of the store.
    * @param updateStoreRequest {@link UpdateStoreRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link Store }
    */
    public async updateStoreById(storeId: string, updateStoreRequest: UpdateStoreRequest, requestOptions?: IRequest.Options): Promise<Store> {
        const endpoint = `${this.baseUrl}/stores/{storeId}`
            .replace("{" + "storeId" + "}", encodeURIComponent(String(storeId)));
        const resource = new Resource(this, endpoint);
        const request: UpdateStoreRequest = ObjectSerializer.serialize(updateStoreRequest, "UpdateStoreRequest");
        const response = await getJsonResponse<UpdateStoreRequest, Store>(
            resource,
            request,
            { ...requestOptions, method: "PATCH" }
        );
        return ObjectSerializer.deserialize(response, "Store");
    }

    /**
    * @summary Create a store
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param storeCreationRequest {@link StoreCreationRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link Store }
    */
    public async createStoreByMerchantId(merchantId: string, storeCreationRequest: StoreCreationRequest, requestOptions?: IRequest.Options): Promise<Store> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/stores`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)));
        const resource = new Resource(this, endpoint);
        const request: StoreCreationRequest = ObjectSerializer.serialize(storeCreationRequest, "StoreCreationRequest");
        const response = await getJsonResponse<StoreCreationRequest, Store>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "Store");
    }

    /**
    * @summary Create a store
    * @param storeCreationWithMerchantCodeRequest {@link StoreCreationWithMerchantCodeRequest } 
    * @param requestOptions {@link IRequest.Options}
    * @return {@link Store }
    */
    public async createStore(storeCreationWithMerchantCodeRequest: StoreCreationWithMerchantCodeRequest, requestOptions?: IRequest.Options): Promise<Store> {
        const endpoint = `${this.baseUrl}/stores`;
        const resource = new Resource(this, endpoint);
        const request: StoreCreationWithMerchantCodeRequest = ObjectSerializer.serialize(storeCreationWithMerchantCodeRequest, "StoreCreationWithMerchantCodeRequest");
        const response = await getJsonResponse<StoreCreationWithMerchantCodeRequest, Store>(
            resource,
            request,
            { ...requestOptions, method: "POST" }
        );
        return ObjectSerializer.deserialize(response, "Store");
    }
}
