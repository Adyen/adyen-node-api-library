/*
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */


import getJsonResponse from "../../helpers/getJsonResponse";
import Service from "../../service";
import Client from "../../client";
import { IRequest } from "../../typings/requestOptions";
import Resource from "../resource";

import { ObjectSerializer } from "../../typings/management/objectSerializer";
import { AndroidApp } from "../../typings/management/models";
import { AndroidAppsResponse } from "../../typings/management/models";
import { AndroidCertificatesResponse } from "../../typings/management/models";
import { ReprocessAndroidAppResponse } from "../../typings/management/models";
import { RestServiceError } from "../../typings/management/models";
import { UploadAndroidAppResponse } from "../../typings/management/models";
import { UploadAndroidCertificateResponse } from "../../typings/management/models";

/**
 * API handler for AndroidFilesCompanyLevelApi
 */
export class AndroidFilesCompanyLevelApi extends Service {

    private readonly API_BASEPATH: string = "https://management-test.adyen.com/v3";
    private baseUrl: string;

    public constructor(client: Client){
        super(client);
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }

    /**
    * @summary Get Android app
    * @param companyId {@link string } The unique identifier of the company account.
    * @param id {@link string } The unique identifier of the app.
    * @param requestOptions {@link IRequest.Options }
    * @return {@link AndroidApp }
    */
    public async getAndroidApp(companyId: string, id: string, requestOptions?: IRequest.Options): Promise<AndroidApp> {
        const endpoint = `${this.baseUrl}/companies/{companyId}/androidApps/{id}`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)))
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new Resource(this, endpoint);
        
        const response = await getJsonResponse<string, AndroidApp>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );

        return ObjectSerializer.deserialize(response, "AndroidApp");
    }

    /**
    * @summary Get a list of Android apps
    * @param companyId {@link string } The unique identifier of the company account.
    * @param requestOptions {@link IRequest.Options }
    * @param pageNumber {@link number } The number of the page to fetch.
    * @param pageSize {@link number } The number of items to have on a page, maximum 100. The default is 20 items on a page.
    * @param packageName {@link string } The package name that uniquely identifies the Android app.
    * @param versionCode {@link number } The version number of the app.
    * @return {@link AndroidAppsResponse }
    */
    public async listAndroidApps(companyId: string, pageNumber?: number, pageSize?: number, packageName?: string, versionCode?: number, requestOptions?: IRequest.Options): Promise<AndroidAppsResponse> {
        const endpoint = `${this.baseUrl}/companies/{companyId}/androidApps`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)));
        const resource = new Resource(this, endpoint);
        
        const hasDefinedQueryParams = pageNumber ?? pageSize ?? packageName ?? versionCode;
        if(hasDefinedQueryParams) {
            if(!requestOptions) requestOptions = {};
            if(!requestOptions.params) requestOptions.params = {};
            if(pageNumber) requestOptions.params["pageNumber"] = pageNumber;
            if(pageSize) requestOptions.params["pageSize"] = pageSize;
            if(packageName) requestOptions.params["packageName"] = packageName;
            if(versionCode) requestOptions.params["versionCode"] = versionCode;
        }
        const response = await getJsonResponse<string, AndroidAppsResponse>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );

        return ObjectSerializer.deserialize(response, "AndroidAppsResponse");
    }

    /**
    * @summary Get a list of Android certificates
    * @param companyId {@link string } The unique identifier of the company account.
    * @param requestOptions {@link IRequest.Options }
    * @param pageNumber {@link number } The number of the page to fetch.
    * @param pageSize {@link number } The number of items to have on a page, maximum 100. The default is 20 items on a page.
    * @param certificateName {@link string } The name of the certificate.
    * @return {@link AndroidCertificatesResponse }
    */
    public async listAndroidCertificates(companyId: string, pageNumber?: number, pageSize?: number, certificateName?: string, requestOptions?: IRequest.Options): Promise<AndroidCertificatesResponse> {
        const endpoint = `${this.baseUrl}/companies/{companyId}/androidCertificates`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)));
        const resource = new Resource(this, endpoint);
        
        const hasDefinedQueryParams = pageNumber ?? pageSize ?? certificateName;
        if(hasDefinedQueryParams) {
            if(!requestOptions) requestOptions = {};
            if(!requestOptions.params) requestOptions.params = {};
            if(pageNumber) requestOptions.params["pageNumber"] = pageNumber;
            if(pageSize) requestOptions.params["pageSize"] = pageSize;
            if(certificateName) requestOptions.params["certificateName"] = certificateName;
        }
        const response = await getJsonResponse<string, AndroidCertificatesResponse>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );

        return ObjectSerializer.deserialize(response, "AndroidCertificatesResponse");
    }

    /**
    * @summary Reprocess Android App
    * @param companyId {@link string } The unique identifier of the company account.
    * @param id {@link string } The unique identifier of the app.
    * @param requestOptions {@link IRequest.Options }
    * @return {@link ReprocessAndroidAppResponse }
    */
    public async reprocessAndroidApp(companyId: string, id: string, requestOptions?: IRequest.Options): Promise<ReprocessAndroidAppResponse> {
        const endpoint = `${this.baseUrl}/companies/{companyId}/androidApps/{id}`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)))
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new Resource(this, endpoint);
        
        const response = await getJsonResponse<string, ReprocessAndroidAppResponse>(
            resource,
            "",
            { ...requestOptions, method: "PATCH" }
        );

        return ObjectSerializer.deserialize(response, "ReprocessAndroidAppResponse");
    }

    /**
    * @summary Upload Android App
    * @param companyId {@link string } The unique identifier of the company account.
    * @param requestOptions {@link IRequest.Options }
    * @return {@link UploadAndroidAppResponse }
    */
    public async uploadAndroidApp(companyId: string, requestOptions?: IRequest.Options): Promise<UploadAndroidAppResponse> {
        const endpoint = `${this.baseUrl}/companies/{companyId}/androidApps`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)));
        const resource = new Resource(this, endpoint);
        
        const response = await getJsonResponse<string, UploadAndroidAppResponse>(
            resource,
            "",
            { ...requestOptions, method: "POST" }
        );

        return ObjectSerializer.deserialize(response, "UploadAndroidAppResponse");
    }

    /**
    * @summary Upload Android Certificate
    * @param companyId {@link string } The unique identifier of the company account.
    * @param requestOptions {@link IRequest.Options }
    * @return {@link UploadAndroidCertificateResponse }
    */
    public async uploadAndroidCertificate(companyId: string, requestOptions?: IRequest.Options): Promise<UploadAndroidCertificateResponse> {
        const endpoint = `${this.baseUrl}/companies/{companyId}/androidCertificates`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)));
        const resource = new Resource(this, endpoint);
        
        const response = await getJsonResponse<string, UploadAndroidCertificateResponse>(
            resource,
            "",
            { ...requestOptions, method: "POST" }
        );

        return ObjectSerializer.deserialize(response, "UploadAndroidCertificateResponse");
    }

}
