/*
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import getJsonResponse from "../../helpers/getJsonResponse";
import Service from "../../service";
import Client from "../../client";
import { AndroidApp } from "../../typings/management/models";
import { AndroidAppsResponse } from "../../typings/management/models";
import { AndroidCertificatesResponse } from "../../typings/management/models";
import { IRequest } from "../../typings/requestOptions";
import Resource from "../resource";
import { ObjectSerializer } from "../../typings/management/models";

export class AndroidFilesCompanyLevelApi extends Service {

    private readonly API_BASEPATH: string = "https://management-test.adyen.com/v3";
    private baseUrl: string;

    public constructor(client: Client){
        super(client);
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }

    /**
    * @summary Get a list of Android apps
    * @param companyId {@link string } The unique identifier of the company account.
    * @param pageNumber {@link number } The number of the page to fetch.
    * @param pageSize {@link number } The number of items to have on a page, maximum 100. The default is 20 items on a page.
    * @param packageName {@link string } The package name that uniquely identifies the Android app.
    * @param versionCode {@link number } The version number of the app.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link AndroidAppsResponse }
    */
    public async listAndroidApps(companyId: string, requestOptions?: IRequest.Options): Promise<AndroidAppsResponse> {
        const endpoint = `${this.baseUrl}/companies/{companyId}/androidApps`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)));
        const resource = new Resource(this, endpoint);
        const response = await getJsonResponse<string, AndroidAppsResponse>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "AndroidAppsResponse");
    }

    /**
    * @summary Get Android app
    * @param companyId {@link string } The unique identifier of the company account.
    * @param id {@link string } The unique identifier of the app.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link AndroidApp }
    */
    public async getAndroidApp(companyId: string, id: string, requestOptions?: IRequest.Options): Promise<AndroidApp> {
        const endpoint = `${this.baseUrl}/companies/{companyId}/androidApps/{id}`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)))
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new Resource(this, endpoint);
        const response = await getJsonResponse<string, AndroidApp>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "AndroidApp");
    }

    /**
    * @summary Get a list of Android certificates
    * @param companyId {@link string } The unique identifier of the company account.
    * @param pageNumber {@link number } The number of the page to fetch.
    * @param pageSize {@link number } The number of items to have on a page, maximum 100. The default is 20 items on a page.
    * @param certificateName {@link string } The name of the certificate.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link AndroidCertificatesResponse }
    */
    public async listAndroidCertificates(companyId: string, requestOptions?: IRequest.Options): Promise<AndroidCertificatesResponse> {
        const endpoint = `${this.baseUrl}/companies/{companyId}/androidCertificates`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)));
        const resource = new Resource(this, endpoint);
        const response = await getJsonResponse<string, AndroidCertificatesResponse>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "AndroidCertificatesResponse");
    }

    /**
    * @summary Upload Android App
    * @param companyId {@link string } The unique identifier of the company account.
    * @param requestOptions {@link IRequest.Options}
    */
    public async uploadAndroidApp(companyId: string, requestOptions?: IRequest.Options): Promise<void> {
        const endpoint = `${this.baseUrl}/companies/{companyId}/androidApps`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)));
        const resource = new Resource(this, endpoint);
        await getJsonResponse<string, void>(
            resource,
            "",
            { ...requestOptions, method: "POST" }
        );
    }
}
