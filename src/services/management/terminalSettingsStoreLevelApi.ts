/*
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import getJsonResponse from "../../helpers/getJsonResponse";
import Service from "../../service";
import Client from "../../client";
import { 
    Logo,
    TerminalSettings,
    ObjectSerializer
} from "../../typings/management/models";
import { IRequest } from "../../typings/requestOptions";
import Resource from "../resource";

export class TerminalSettingsStoreLevelApi extends Service {

    private readonly API_BASEPATH: string = "https://management-test.adyen.com/v3";
    private baseUrl: string;

    public constructor(client: Client){
        super(client);
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }

    /**
    * @summary Get the terminal logo
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param reference {@link string } The reference that identifies the store.
    * @param requestOptions {@link IRequest.Options }
    * @param model {@link string } The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.
    * @return {@link Logo }
    */
    public async getTerminalLogo(merchantId: string, reference: string, model?: string, requestOptions?: IRequest.Options): Promise<Logo> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/stores/{reference}/terminalLogos`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "reference" + "}", encodeURIComponent(String(reference)));
        const resource = new Resource(this, endpoint);
        const hasDefinedQueryParams = model;
        if(hasDefinedQueryParams) {
            if(!requestOptions) requestOptions = {};
            if(!requestOptions.params) requestOptions.params = {};
            if(model) requestOptions.params["model"] = model;
        }
        const response = await getJsonResponse<string, Logo>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "Logo");
    }

    /**
    * @summary Get the terminal logo
    * @param storeId {@link string } The unique identifier of the store.
    * @param requestOptions {@link IRequest.Options }
    * @param model {@link string } The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.
    * @return {@link Logo }
    */
    public async getTerminalLogoByStoreId(storeId: string, model?: string, requestOptions?: IRequest.Options): Promise<Logo> {
        const endpoint = `${this.baseUrl}/stores/{storeId}/terminalLogos`
            .replace("{" + "storeId" + "}", encodeURIComponent(String(storeId)));
        const resource = new Resource(this, endpoint);
        const hasDefinedQueryParams = model;
        if(hasDefinedQueryParams) {
            if(!requestOptions) requestOptions = {};
            if(!requestOptions.params) requestOptions.params = {};
            if(model) requestOptions.params["model"] = model;
        }
        const response = await getJsonResponse<string, Logo>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "Logo");
    }

    /**
    * @summary Get terminal settings
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param reference {@link string } The reference that identifies the store.
    * @param requestOptions {@link IRequest.Options }
    * @return {@link TerminalSettings }
    */
    public async getTerminalSettings(merchantId: string, reference: string, requestOptions?: IRequest.Options): Promise<TerminalSettings> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/stores/{reference}/terminalSettings`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "reference" + "}", encodeURIComponent(String(reference)));
        const resource = new Resource(this, endpoint);
        const response = await getJsonResponse<string, TerminalSettings>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "TerminalSettings");
    }

    /**
    * @summary Get terminal settings
    * @param storeId {@link string } The unique identifier of the store.
    * @param requestOptions {@link IRequest.Options }
    * @return {@link TerminalSettings }
    */
    public async getTerminalSettingsByStoreId(storeId: string, requestOptions?: IRequest.Options): Promise<TerminalSettings> {
        const endpoint = `${this.baseUrl}/stores/{storeId}/terminalSettings`
            .replace("{" + "storeId" + "}", encodeURIComponent(String(storeId)));
        const resource = new Resource(this, endpoint);
        const response = await getJsonResponse<string, TerminalSettings>(
            resource,
            "",
            { ...requestOptions, method: "GET" }
        );
        return ObjectSerializer.deserialize(response, "TerminalSettings");
    }

    /**
    * @summary Update the terminal logo
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param reference {@link string } The reference that identifies the store.
    * @param logo {@link Logo } 
    * @param requestOptions {@link IRequest.Options }
    * @param model {@link string } The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T
    * @return {@link Logo }
    */
    public async updateTerminalLogo(merchantId: string, reference: string, logo: Logo, model?: string, requestOptions?: IRequest.Options): Promise<Logo> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/stores/{reference}/terminalLogos`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "reference" + "}", encodeURIComponent(String(reference)));
        const resource = new Resource(this, endpoint);
        const request: Logo = ObjectSerializer.serialize(logo, "Logo");
        const hasDefinedQueryParams = model;
        if(hasDefinedQueryParams) {
            if(!requestOptions) requestOptions = {};
            if(!requestOptions.params) requestOptions.params = {};
            if(model) requestOptions.params["model"] = model;
        }
        const response = await getJsonResponse<Logo, Logo>(
            resource,
            request,
            { ...requestOptions, method: "PATCH" }
        );
        return ObjectSerializer.deserialize(response, "Logo");
    }

    /**
    * @summary Update the terminal logo
    * @param storeId {@link string } The unique identifier of the store.
    * @param logo {@link Logo } 
    * @param requestOptions {@link IRequest.Options }
    * @param model {@link string } The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.
    * @return {@link Logo }
    */
    public async updateTerminalLogoByStoreId(storeId: string, logo: Logo, model?: string, requestOptions?: IRequest.Options): Promise<Logo> {
        const endpoint = `${this.baseUrl}/stores/{storeId}/terminalLogos`
            .replace("{" + "storeId" + "}", encodeURIComponent(String(storeId)));
        const resource = new Resource(this, endpoint);
        const request: Logo = ObjectSerializer.serialize(logo, "Logo");
        const hasDefinedQueryParams = model;
        if(hasDefinedQueryParams) {
            if(!requestOptions) requestOptions = {};
            if(!requestOptions.params) requestOptions.params = {};
            if(model) requestOptions.params["model"] = model;
        }
        const response = await getJsonResponse<Logo, Logo>(
            resource,
            request,
            { ...requestOptions, method: "PATCH" }
        );
        return ObjectSerializer.deserialize(response, "Logo");
    }

    /**
    * @summary Update terminal settings
    * @param merchantId {@link string } The unique identifier of the merchant account.
    * @param reference {@link string } The reference that identifies the store.
    * @param terminalSettings {@link TerminalSettings } 
    * @param requestOptions {@link IRequest.Options }
    * @return {@link TerminalSettings }
    */
    public async updateTerminalSettings(merchantId: string, reference: string, terminalSettings: TerminalSettings, requestOptions?: IRequest.Options): Promise<TerminalSettings> {
        const endpoint = `${this.baseUrl}/merchants/{merchantId}/stores/{reference}/terminalSettings`
            .replace("{" + "merchantId" + "}", encodeURIComponent(String(merchantId)))
            .replace("{" + "reference" + "}", encodeURIComponent(String(reference)));
        const resource = new Resource(this, endpoint);
        const request: TerminalSettings = ObjectSerializer.serialize(terminalSettings, "TerminalSettings");
        const response = await getJsonResponse<TerminalSettings, TerminalSettings>(
            resource,
            request,
            { ...requestOptions, method: "PATCH" }
        );
        return ObjectSerializer.deserialize(response, "TerminalSettings");
    }

    /**
    * @summary Update terminal settings
    * @param storeId {@link string } The unique identifier of the store.
    * @param terminalSettings {@link TerminalSettings } 
    * @param requestOptions {@link IRequest.Options }
    * @return {@link TerminalSettings }
    */
    public async updateTerminalSettingsByStoreId(storeId: string, terminalSettings: TerminalSettings, requestOptions?: IRequest.Options): Promise<TerminalSettings> {
        const endpoint = `${this.baseUrl}/stores/{storeId}/terminalSettings`
            .replace("{" + "storeId" + "}", encodeURIComponent(String(storeId)));
        const resource = new Resource(this, endpoint);
        const request: TerminalSettings = ObjectSerializer.serialize(terminalSettings, "TerminalSettings");
        const response = await getJsonResponse<TerminalSettings, TerminalSettings>(
            resource,
            request,
            { ...requestOptions, method: "PATCH" }
        );
        return ObjectSerializer.deserialize(response, "TerminalSettings");
    }
}
