/*
 * The version of the OpenAPI document: v71
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import { Address } from "./address";
import { CardDetails } from "./cardDetails";
import { Name } from "./name";
import { SubMerchant } from "./subMerchant";


export class FundRecipient {
    /**
    * The IBAN of the bank account where the funds are being transferred to.
    */
    "IBAN"?: string;
    "billingAddress"?: Address;
    "paymentMethod"?: CardDetails;
    /**
    * The email address of the shopper.
    */
    "shopperEmail"?: string;
    "shopperName"?: Name;
    /**
    * Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. > Your reference must not include personally identifiable information (PII) such as name or email address.
    */
    "shopperReference"?: string;
    /**
    * This is the `recurringDetailReference` returned in the response when you created the token.
    */
    "storedPaymentMethodId"?: string;
    "subMerchant"?: SubMerchant;
    /**
    * The telephone number of the shopper.
    */
    "telephoneNumber"?: string;
    /**
    * The unique identifier for the wallet the funds are being transferred to. You can use the shopper reference or any other identifier.
    */
    "walletIdentifier"?: string;
    /**
    * The tax identifier of the person receiving the funds.
    */
    "walletOwnerTaxId"?: string;
    /**
    * The purpose of a digital wallet transaction.
    */
    "walletPurpose"?: FundRecipient.WalletPurposeEnum;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "IBAN",
            "baseName": "IBAN",
            "type": "string",
            "format": ""
        },
        {
            "name": "billingAddress",
            "baseName": "billingAddress",
            "type": "Address",
            "format": ""
        },
        {
            "name": "paymentMethod",
            "baseName": "paymentMethod",
            "type": "CardDetails",
            "format": ""
        },
        {
            "name": "shopperEmail",
            "baseName": "shopperEmail",
            "type": "string",
            "format": ""
        },
        {
            "name": "shopperName",
            "baseName": "shopperName",
            "type": "Name",
            "format": ""
        },
        {
            "name": "shopperReference",
            "baseName": "shopperReference",
            "type": "string",
            "format": ""
        },
        {
            "name": "storedPaymentMethodId",
            "baseName": "storedPaymentMethodId",
            "type": "string",
            "format": ""
        },
        {
            "name": "subMerchant",
            "baseName": "subMerchant",
            "type": "SubMerchant",
            "format": ""
        },
        {
            "name": "telephoneNumber",
            "baseName": "telephoneNumber",
            "type": "string",
            "format": ""
        },
        {
            "name": "walletIdentifier",
            "baseName": "walletIdentifier",
            "type": "string",
            "format": ""
        },
        {
            "name": "walletOwnerTaxId",
            "baseName": "walletOwnerTaxId",
            "type": "string",
            "format": ""
        },
        {
            "name": "walletPurpose",
            "baseName": "walletPurpose",
            "type": "FundRecipient.WalletPurposeEnum",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return FundRecipient.attributeTypeMap;
    }

    public constructor() {
    }
}

export namespace FundRecipient {
    export enum WalletPurposeEnum {
        IdentifiedBoleto = 'identifiedBoleto',
        TransferDifferentWallet = 'transferDifferentWallet',
        TransferOwnWallet = 'transferOwnWallet',
        TransferSameWallet = 'transferSameWallet',
        UnidentifiedBoleto = 'unidentifiedBoleto'
    }
}
