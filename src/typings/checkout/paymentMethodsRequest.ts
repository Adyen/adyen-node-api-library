/*
 * The version of the OpenAPI document: v71
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import { Amount } from "./amount";
import { BrowserInfo } from "./browserInfo";
import { EncryptedOrderData } from "./encryptedOrderData";


export class PaymentMethodsRequest {
    /**
    * This field contains additional data, which may be required for a particular payment request.  The `additionalData` object consists of entries, each of which includes the key and value.
    */
    "additionalData"?: { [key: string]: string; };
    /**
    * List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"applepay\"]`
    */
    "allowedPaymentMethods"?: Array<string>;
    "amount"?: Amount | null;
    /**
    * List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"applepay\"]`
    */
    "blockedPaymentMethods"?: Array<string>;
    "browserInfo"?: BrowserInfo | null;
    /**
    * The platform where a payment transaction takes place. This field can be used for filtering out payment methods that are only available on specific platforms. Possible values: * iOS * Android * Web
    */
    "channel"?: PaymentMethodsRequest.ChannelEnum;
    /**
    * The shopper\'s country code.
    */
    "countryCode"?: string;
    /**
    * The merchant account identifier, with which you want to process the transaction.
    */
    "merchantAccount": string;
    "order"?: EncryptedOrderData | null;
    /**
    * A unique ID that can be used to associate `/paymentMethods` and `/payments` requests with the same shopper transaction, offering insights into conversion rates.
    */
    "shopperConversionId"?: string;
    /**
    * The shopper\'s email address. We recommend that you provide this data, as it is used in velocity fraud checks. > Required for Visa and JCB transactions that require 3D Secure 2 authentication if you did not include the `telephoneNumber`.
    */
    "shopperEmail"?: string;
    /**
    * The shopper\'s IP address. We recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). > Required for Visa and JCB transactions that require 3D Secure 2 authentication for all web and mobile integrations, if you did not include the `shopperEmail`. For native mobile integrations, the field is required to support cases where authentication is routed to the redirect flow. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).
    */
    "shopperIP"?: string;
    /**
    * The combination of a language code and a country code to specify the language to be used in the payment.
    */
    "shopperLocale"?: string;
    /**
    * Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. The value is case-sensitive and must be at least three characters. > Your reference must not include personally identifiable information (PII) such as name or email address.
    */
    "shopperReference"?: string;
    /**
    * Boolean value indicating whether the card payment method should be split into separate debit and credit options.
    */
    "splitCardFundingSources"?: boolean;
    /**
    * Required for Adyen for Platforms integrations if you are a platform model. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/platforms)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/classic-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.
    */
    "store"?: string;
    /**
    * Specifies how payment methods should be filtered based on the \'store\' parameter:   - \'exclusive\': Only payment methods belonging to the specified \'store\' are returned.   - \'inclusive\': Payment methods from the \'store\' and those not associated with any other store are returned.
    */
    "storeFiltrationMode"?: PaymentMethodsRequest.StoreFiltrationModeEnum;
    /**
    * The shopper\'s telephone number.  The phone number must include a plus sign (+) and a country code (1-3 digits), followed by the number (4-15 digits). If the value you provide does not follow the guidelines, we do not submit it for authentication. > Required for Visa and JCB transactions that require 3D Secure 2 authentication, if you did not include the `shopperEmail`.
    */
    "telephoneNumber"?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "additionalData",
            "baseName": "additionalData",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        {
            "name": "allowedPaymentMethods",
            "baseName": "allowedPaymentMethods",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "Amount | null",
            "format": ""
        },
        {
            "name": "blockedPaymentMethods",
            "baseName": "blockedPaymentMethods",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "browserInfo",
            "baseName": "browserInfo",
            "type": "BrowserInfo | null",
            "format": ""
        },
        {
            "name": "channel",
            "baseName": "channel",
            "type": "PaymentMethodsRequest.ChannelEnum",
            "format": ""
        },
        {
            "name": "countryCode",
            "baseName": "countryCode",
            "type": "string",
            "format": ""
        },
        {
            "name": "merchantAccount",
            "baseName": "merchantAccount",
            "type": "string",
            "format": ""
        },
        {
            "name": "order",
            "baseName": "order",
            "type": "EncryptedOrderData | null",
            "format": ""
        },
        {
            "name": "shopperConversionId",
            "baseName": "shopperConversionId",
            "type": "string",
            "format": ""
        },
        {
            "name": "shopperEmail",
            "baseName": "shopperEmail",
            "type": "string",
            "format": ""
        },
        {
            "name": "shopperIP",
            "baseName": "shopperIP",
            "type": "string",
            "format": ""
        },
        {
            "name": "shopperLocale",
            "baseName": "shopperLocale",
            "type": "string",
            "format": ""
        },
        {
            "name": "shopperReference",
            "baseName": "shopperReference",
            "type": "string",
            "format": ""
        },
        {
            "name": "splitCardFundingSources",
            "baseName": "splitCardFundingSources",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "store",
            "baseName": "store",
            "type": "string",
            "format": ""
        },
        {
            "name": "storeFiltrationMode",
            "baseName": "storeFiltrationMode",
            "type": "PaymentMethodsRequest.StoreFiltrationModeEnum",
            "format": ""
        },
        {
            "name": "telephoneNumber",
            "baseName": "telephoneNumber",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return PaymentMethodsRequest.attributeTypeMap;
    }

    public constructor() {
    }
}

export namespace PaymentMethodsRequest {
    export enum ChannelEnum {
        IOs = 'iOS',
        Android = 'Android',
        Web = 'Web'
    }
    export enum StoreFiltrationModeEnum {
        Exclusive = 'exclusive',
        Inclusive = 'inclusive',
        SkipFilter = 'skipFilter'
    }
}
