/*
 * The version of the OpenAPI document: v71
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */


export class CardDonations {
    /**
    * Secondary brand of the card. For example: **plastix**, **hmclub**.
    */
    "brand"?: string;
    /**
    * The checkout attempt identifier.
    */
    "checkoutAttemptId"?: string;
    /**
	* @deprecated 
    */
    "cupsecureplus_smscode"?: string;
    /**
    * The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
    */
    "cvc"?: string;
    /**
    * Only include this for JSON Web Encryption (JWE) implementations. The JWE-encrypted card details.
    */
    "encryptedCard"?: string;
    /**
    * The encrypted card number.
    */
    "encryptedCardNumber"?: string;
    /**
    * The encrypted card expiry month.
    */
    "encryptedExpiryMonth"?: string;
    /**
    * The encrypted card expiry year.
    */
    "encryptedExpiryYear"?: string;
    /**
    * The encrypted card verification code.
    */
    "encryptedSecurityCode"?: string;
    /**
    * The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
    */
    "expiryMonth"?: string;
    /**
    * The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
    */
    "expiryYear"?: string;
    /**
    * The encoded fastlane data blob
    */
    "fastlaneData"?: string;
    /**
    * The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.
    */
    "fundingSource"?: CardDonations.FundingSourceEnum;
    /**
    * The name of the card holder.
    */
    "holderName"?: string;
    /**
    * The transaction identifier from card schemes. This is the [`networkTxReference`](https://docs.adyen.com/api-explorer/Checkout/latest/post/payments#responses-200-additionalData-ResponseAdditionalDataCommon-networkTxReference) from the response to the first payment.
    */
    "networkPaymentReference"?: string;
    /**
    * The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
    */
    "number"?: string;
    /**
    * This is the `recurringDetailReference` returned in the response when you created the token.
    *
	* @deprecated since Adyen Checkout API v49
	* Use `storedPaymentMethodId` instead.
    */
    "recurringDetailReference"?: string;
    /**
    * The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used only for recurring payments in India.
    */
    "shopperNotificationReference"?: string;
    /**
    * An identifier used for the Click to Pay transaction.
    */
    "srcCorrelationId"?: string;
    /**
    * The SRC reference for the Click to Pay token.
    */
    "srcDigitalCardId"?: string;
    /**
    * The scheme that is being used for Click to Pay.
    */
    "srcScheme"?: string;
    /**
    * The reference for the Click to Pay token.
    */
    "srcTokenReference"?: string;
    /**
    * This is the `recurringDetailReference` returned in the response when you created the token.
    */
    "storedPaymentMethodId"?: string;
    /**
    * Required for mobile integrations. Version of the 3D Secure 2 mobile SDK.
    */
    "threeDS2SdkVersion"?: string;
    /**
    * Default payment method details. Common for scheme payment methods, and for simple payment method details.
    */
    "type"?: CardDonations.TypeEnum;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "brand",
            "baseName": "brand",
            "type": "string",
            "format": ""
        },
        {
            "name": "checkoutAttemptId",
            "baseName": "checkoutAttemptId",
            "type": "string",
            "format": ""
        },
        {
            "name": "cupsecureplus_smscode",
            "baseName": "cupsecureplus.smscode",
            "type": "string",
            "format": ""
        },
        {
            "name": "cvc",
            "baseName": "cvc",
            "type": "string",
            "format": ""
        },
        {
            "name": "encryptedCard",
            "baseName": "encryptedCard",
            "type": "string",
            "format": ""
        },
        {
            "name": "encryptedCardNumber",
            "baseName": "encryptedCardNumber",
            "type": "string",
            "format": ""
        },
        {
            "name": "encryptedExpiryMonth",
            "baseName": "encryptedExpiryMonth",
            "type": "string",
            "format": ""
        },
        {
            "name": "encryptedExpiryYear",
            "baseName": "encryptedExpiryYear",
            "type": "string",
            "format": ""
        },
        {
            "name": "encryptedSecurityCode",
            "baseName": "encryptedSecurityCode",
            "type": "string",
            "format": ""
        },
        {
            "name": "expiryMonth",
            "baseName": "expiryMonth",
            "type": "string",
            "format": ""
        },
        {
            "name": "expiryYear",
            "baseName": "expiryYear",
            "type": "string",
            "format": ""
        },
        {
            "name": "fastlaneData",
            "baseName": "fastlaneData",
            "type": "string",
            "format": ""
        },
        {
            "name": "fundingSource",
            "baseName": "fundingSource",
            "type": "CardDonations.FundingSourceEnum",
            "format": ""
        },
        {
            "name": "holderName",
            "baseName": "holderName",
            "type": "string",
            "format": ""
        },
        {
            "name": "networkPaymentReference",
            "baseName": "networkPaymentReference",
            "type": "string",
            "format": ""
        },
        {
            "name": "number",
            "baseName": "number",
            "type": "string",
            "format": ""
        },
        {
            "name": "recurringDetailReference",
            "baseName": "recurringDetailReference",
            "type": "string",
            "format": ""
        },
        {
            "name": "shopperNotificationReference",
            "baseName": "shopperNotificationReference",
            "type": "string",
            "format": ""
        },
        {
            "name": "srcCorrelationId",
            "baseName": "srcCorrelationId",
            "type": "string",
            "format": ""
        },
        {
            "name": "srcDigitalCardId",
            "baseName": "srcDigitalCardId",
            "type": "string",
            "format": ""
        },
        {
            "name": "srcScheme",
            "baseName": "srcScheme",
            "type": "string",
            "format": ""
        },
        {
            "name": "srcTokenReference",
            "baseName": "srcTokenReference",
            "type": "string",
            "format": ""
        },
        {
            "name": "storedPaymentMethodId",
            "baseName": "storedPaymentMethodId",
            "type": "string",
            "format": ""
        },
        {
            "name": "threeDS2SdkVersion",
            "baseName": "threeDS2SdkVersion",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "CardDonations.TypeEnum",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return CardDonations.attributeTypeMap;
    }

    public constructor() {
    }
}

export namespace CardDonations {
    export enum FundingSourceEnum {
        Credit = 'credit',
        Debit = 'debit'
    }
    export enum TypeEnum {
        Bcmc = 'bcmc',
        Scheme = 'scheme',
        NetworkToken = 'networkToken',
        Giftcard = 'giftcard',
        Card = 'card',
        Clicktopay = 'clicktopay'
    }
}
