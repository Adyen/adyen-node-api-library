/*
 * The version of the OpenAPI document: v71
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import { ApplePayDonations } from './applePayDonations';
import { CardDonations } from './cardDonations';
import { GooglePayDonations } from './googlePayDonations';
import { IdealDonations } from './idealDonations';
import { PayWithGoogleDonations } from './payWithGoogleDonations';

/**
* The type and required details of a payment method to use.
*/
export class DonationPaymentRequestPaymentMethod {
    /**
    * The stringified and base64 encoded `paymentData` you retrieved from the Apple framework.
    */
    'applePayToken': string;
    /**
    * The checkout attempt identifier.
    */
    'checkoutAttemptId'?: string;
    /**
    * The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.
    */
    'fundingSource'?: DonationPaymentRequestPaymentMethod.FundingSourceEnum;
    /**
    * This is the `recurringDetailReference` returned in the response when you created the token.
    *
	* @deprecated since Adyen Checkout API v49
	* Use `storedPaymentMethodId` instead.
    */
    'recurringDetailReference'?: string;
    /**
    * This is the `recurringDetailReference` returned in the response when you created the token.
    */
    'storedPaymentMethodId'?: string;
    /**
    * **applepay**
    */
    'type'?: DonationPaymentRequestPaymentMethod.TypeEnum = DonationPaymentRequestPaymentMethod.TypeEnum.Applepay;
    /**
    * Secondary brand of the card. For example: **plastix**, **hmclub**.
    */
    'brand'?: string;
    /**
	* @deprecated 
    */
    'cupsecureplus_smscode'?: string;
    /**
    * The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
    */
    'cvc'?: string;
    /**
    * Only include this for JSON Web Encryption (JWE) implementations. The JWE-encrypted card details.
    */
    'encryptedCard'?: string;
    /**
    * The encrypted card number.
    */
    'encryptedCardNumber'?: string;
    /**
    * The encrypted card expiry month.
    */
    'encryptedExpiryMonth'?: string;
    /**
    * The encrypted card expiry year.
    */
    'encryptedExpiryYear'?: string;
    /**
    * The encrypted card verification code.
    */
    'encryptedSecurityCode'?: string;
    /**
    * The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
    */
    'expiryMonth'?: string;
    /**
    * The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
    */
    'expiryYear'?: string;
    /**
    * The encoded fastlane data blob
    */
    'fastlaneData'?: string;
    /**
    * The name of the card holder.
    */
    'holderName'?: string;
    /**
    * The transaction identifier from card schemes. This is the [`networkTxReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_additionalData-ResponseAdditionalDataCommon-networkTxReference) from the response to the first payment.
    */
    'networkPaymentReference'?: string;
    /**
    * The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
    */
    'number'?: string;
    /**
    * The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used only for recurring payments in India.
    */
    'shopperNotificationReference'?: string;
    /**
    * An identifier used for the Click to Pay transaction.
    */
    'srcCorrelationId'?: string;
    /**
    * The SRC reference for the Click to Pay token.
    */
    'srcDigitalCardId'?: string;
    /**
    * The scheme that is being used for Click to Pay.
    */
    'srcScheme'?: string;
    /**
    * The reference for the Click to Pay token.
    */
    'srcTokenReference'?: string;
    /**
    * Required for mobile integrations. Version of the 3D Secure 2 mobile SDK.
    */
    'threeDS2SdkVersion'?: string;
    /**
    * The selected payment card network. 
    */
    'googlePayCardNetwork'?: string;
    /**
    * The `token` that you obtained from the [Google Pay API](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) `PaymentData` response.
    */
    'googlePayToken': string;
    /**
    * The iDEAL issuer value of the shopper\'s selected bank. Set this to an **id** of an iDEAL issuer to preselect it.
    */
    'issuer'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "applePayToken",
            "baseName": "applePayToken",
            "type": "string"
        },
        {
            "name": "checkoutAttemptId",
            "baseName": "checkoutAttemptId",
            "type": "string"
        },
        {
            "name": "fundingSource",
            "baseName": "fundingSource",
            "type": "DonationPaymentRequestPaymentMethod.FundingSourceEnum"
        },
        {
            "name": "recurringDetailReference",
            "baseName": "recurringDetailReference",
            "type": "string"
        },
        {
            "name": "storedPaymentMethodId",
            "baseName": "storedPaymentMethodId",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "DonationPaymentRequestPaymentMethod.TypeEnum"
        },
        {
            "name": "brand",
            "baseName": "brand",
            "type": "string"
        },
        {
            "name": "cupsecureplus_smscode",
            "baseName": "cupsecureplus.smscode",
            "type": "string"
        },
        {
            "name": "cvc",
            "baseName": "cvc",
            "type": "string"
        },
        {
            "name": "encryptedCard",
            "baseName": "encryptedCard",
            "type": "string"
        },
        {
            "name": "encryptedCardNumber",
            "baseName": "encryptedCardNumber",
            "type": "string"
        },
        {
            "name": "encryptedExpiryMonth",
            "baseName": "encryptedExpiryMonth",
            "type": "string"
        },
        {
            "name": "encryptedExpiryYear",
            "baseName": "encryptedExpiryYear",
            "type": "string"
        },
        {
            "name": "encryptedSecurityCode",
            "baseName": "encryptedSecurityCode",
            "type": "string"
        },
        {
            "name": "expiryMonth",
            "baseName": "expiryMonth",
            "type": "string"
        },
        {
            "name": "expiryYear",
            "baseName": "expiryYear",
            "type": "string"
        },
        {
            "name": "fastlaneData",
            "baseName": "fastlaneData",
            "type": "string"
        },
        {
            "name": "holderName",
            "baseName": "holderName",
            "type": "string"
        },
        {
            "name": "networkPaymentReference",
            "baseName": "networkPaymentReference",
            "type": "string"
        },
        {
            "name": "number",
            "baseName": "number",
            "type": "string"
        },
        {
            "name": "shopperNotificationReference",
            "baseName": "shopperNotificationReference",
            "type": "string"
        },
        {
            "name": "srcCorrelationId",
            "baseName": "srcCorrelationId",
            "type": "string"
        },
        {
            "name": "srcDigitalCardId",
            "baseName": "srcDigitalCardId",
            "type": "string"
        },
        {
            "name": "srcScheme",
            "baseName": "srcScheme",
            "type": "string"
        },
        {
            "name": "srcTokenReference",
            "baseName": "srcTokenReference",
            "type": "string"
        },
        {
            "name": "threeDS2SdkVersion",
            "baseName": "threeDS2SdkVersion",
            "type": "string"
        },
        {
            "name": "googlePayCardNetwork",
            "baseName": "googlePayCardNetwork",
            "type": "string"
        },
        {
            "name": "googlePayToken",
            "baseName": "googlePayToken",
            "type": "string"
        },
        {
            "name": "issuer",
            "baseName": "issuer",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return DonationPaymentRequestPaymentMethod.attributeTypeMap;
    }
}

export namespace DonationPaymentRequestPaymentMethod {
    export enum FundingSourceEnum {
        Credit = <any> 'credit',
        Debit = <any> 'debit'
    }
    export enum TypeEnum {
        Applepay = <any> 'applepay',
        Bcmc = <any> 'bcmc',
        Scheme = <any> 'scheme',
        NetworkToken = <any> 'networkToken',
        Giftcard = <any> 'giftcard',
        Card = <any> 'card',
        Clicktopay = <any> 'clicktopay',
        Googlepay = <any> 'googlepay',
        Ideal = <any> 'ideal',
        Paywithgoogle = <any> 'paywithgoogle'
    }
}
