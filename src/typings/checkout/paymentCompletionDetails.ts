/**
 *                       ######
 *                       ######
 * ############    ####( ######  #####. ######  ############   ############
 * #############  #####( ######  #####. ######  #############  #############
 *        ######  #####( ######  #####. ######  #####  ######  #####  ######
 * ###### ######  #####( ######  #####. ######  #####  #####   #####  ######
 * ###### ######  #####( ######  #####. ######  #####          #####  ######
 * #############  #############  #############  #############  #####  ######
 *  ############   ############  #############   ############  #####  ######
 *                                      ######
 *                               #############
 *                               ############
 * Adyen NodeJS API Library
 * Copyright (c) 2022 Adyen B.V.
 * This file is open source and available under the MIT license.
 * See the LICENSE file for more info.
 *
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [Checkout documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to the Checkout API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_Checkout_API_key\" \\ ... ``` Note that when going live, you need to generate a new API Key to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v68/payments ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=68) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 68
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export class PaymentCompletionDetails {
    /**
    * A payment session identifier returned by the card issuer.
    */
    'mD'?: string;
    /**
    * (3D) Payment Authentication Request data for the card issuer.
    */
    'paReq'?: string;
    /**
    * (3D) Payment Authentication Response data by the card issuer.
    */
    'paRes'?: string;
    /**
    * PayPal-generated token for recurring payments.
    */
    'billingToken'?: string;
    /**
    * The SMS verification code collected from the shopper.
    */
    'cupsecureplusSmscode'?: string;
    /**
    * PayPal-generated third party access token.
    */
    'facilitatorAccessToken'?: string;
    /**
    * A random number sent to the mobile phone number of the shopper to verify the payment.
    */
    'oneTimePasscode'?: string;
    /**
    * PayPal-assigned ID for the order.
    */
    'orderID'?: string;
    /**
    * PayPal-assigned ID for the payer (shopper).
    */
    'payerID'?: string;
    /**
    * Payload appended to the `returnURL` as a result of the redirect.
    */
    'payload'?: string;
    /**
    * PayPal-generated ID for the payment.
    */
    'paymentID'?: string;
    /**
    * Value passed from the WeChat MiniProgram `wx.requestPayment` **complete** callback. Possible values: any value starting with `requestPayment:`.
    */
    'paymentStatus'?: string;
    /**
    * The result of the redirect as appended to the `returnURL`.
    */
    'redirectResult'?: string;
    /**
    * Base64-encoded string returned by the Component after the challenge flow. It contains the following parameters: `transStatus`, `authorisationToken`.
    */
    'threeDSResult'?: string;
    /**
    * Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: `transStatus`.
    */
    'threeds2ChallengeResult'?: string;
    /**
    * Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: `threeDSCompInd`.
    */
    'threeds2Fingerprint'?: string;
}

