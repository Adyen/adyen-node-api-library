/*
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import { AddressRequirement } from './addressRequirement';
import { AmountMinMaxRequirement } from './amountMinMaxRequirement';
import { AmountNonZeroDecimalsRequirement } from './amountNonZeroDecimalsRequirement';
import { BankAccountIdentificationTypeRequirement } from './bankAccountIdentificationTypeRequirement';
import { IbanAccountIdentificationRequirement } from './ibanAccountIdentificationRequirement';
import { PaymentInstrumentRequirement } from './paymentInstrumentRequirement';
import { USInternationalAchAddressRequirement } from './uSInternationalAchAddressRequirement';

export class TransferRouteRequirementsInner {
    /**
    * Specifies that you must provide a complete street address for International ACH (IAT) transactions.
    */
    'description'?: string;
    /**
    * List of address fields.
    */
    'requiredAddressFields'?: Array<TransferRouteRequirementsInner.RequiredAddressFieldsEnum>;
    /**
    * **addressRequirement**
    */
    'type': TransferRouteRequirementsInner.TypeEnum = TransferRouteRequirementsInner.TypeEnum.AddressRequirement;
    /**
    * Maximum amount.
    */
    'max'?: number;
    /**
    * Minimum amount.
    */
    'min'?: number;
    /**
    * List of bank account identification types: eg.; [iban , numberAndBic]
    */
    'bankAccountIdentificationTypes'?: Array<TransferRouteRequirementsInner.BankAccountIdentificationTypesEnum>;
    /**
    * Contains the list of allowed prefixes for international bank accounts. For example: NL, US, UK.
    */
    'ibanPrefixes'?: Array<string>;
    /**
    * The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.
    */
    'issuingCountryCode'?: string;
    /**
    * The two-character ISO-3166-1 alpha-2 country code list for payment instruments.
    */
    'issuingCountryCodes'?: Array<string>;
    /**
    * Specifies if the requirement only applies to transfers to another balance platform.
    */
    'onlyForCrossBalancePlatform'?: boolean;
    /**
    * The type of the payment instrument. For example, \"BankAccount\" or \"Card\".
    */
    'paymentInstrumentType'?: TransferRouteRequirementsInner.PaymentInstrumentTypeEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "requiredAddressFields",
            "baseName": "requiredAddressFields",
            "type": "Array<TransferRouteRequirementsInner.RequiredAddressFieldsEnum>"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "TransferRouteRequirementsInner.TypeEnum"
        },
        {
            "name": "max",
            "baseName": "max",
            "type": "number"
        },
        {
            "name": "min",
            "baseName": "min",
            "type": "number"
        },
        {
            "name": "bankAccountIdentificationTypes",
            "baseName": "bankAccountIdentificationTypes",
            "type": "Array<TransferRouteRequirementsInner.BankAccountIdentificationTypesEnum>"
        },
        {
            "name": "ibanPrefixes",
            "baseName": "ibanPrefixes",
            "type": "Array<string>"
        },
        {
            "name": "issuingCountryCode",
            "baseName": "issuingCountryCode",
            "type": "string"
        },
        {
            "name": "issuingCountryCodes",
            "baseName": "issuingCountryCodes",
            "type": "Array<string>"
        },
        {
            "name": "onlyForCrossBalancePlatform",
            "baseName": "onlyForCrossBalancePlatform",
            "type": "boolean"
        },
        {
            "name": "paymentInstrumentType",
            "baseName": "paymentInstrumentType",
            "type": "TransferRouteRequirementsInner.PaymentInstrumentTypeEnum"
        }    ];

    static getAttributeTypeMap() {
        return TransferRouteRequirementsInner.attributeTypeMap;
    }
}

export namespace TransferRouteRequirementsInner {
    export enum RequiredAddressFieldsEnum {
        City = <any> 'city',
        Country = <any> 'country',
        Line1 = <any> 'line1',
        PostalCode = <any> 'postalCode',
        StateOrProvince = <any> 'stateOrProvince'
    }
    export enum TypeEnum {
        AddressRequirement = <any> 'addressRequirement',
        AmountMinMaxRequirement = <any> 'amountMinMaxRequirement',
        AmountNonZeroDecimalsRequirement = <any> 'amountNonZeroDecimalsRequirement',
        BankAccountIdentificationTypeRequirement = <any> 'bankAccountIdentificationTypeRequirement',
        IbanAccountIdentificationRequirement = <any> 'ibanAccountIdentificationRequirement',
        PaymentInstrumentRequirement = <any> 'paymentInstrumentRequirement',
        UsInternationalAchAddressRequirement = <any> 'usInternationalAchAddressRequirement'
    }
    export enum BankAccountIdentificationTypesEnum {
        AuLocal = <any> 'auLocal',
        BrLocal = <any> 'brLocal',
        CaLocal = <any> 'caLocal',
        CzLocal = <any> 'czLocal',
        DkLocal = <any> 'dkLocal',
        HkLocal = <any> 'hkLocal',
        HuLocal = <any> 'huLocal',
        Iban = <any> 'iban',
        Legacy = <any> 'legacy',
        NoLocal = <any> 'noLocal',
        NumberAndBic = <any> 'numberAndBic',
        NzLocal = <any> 'nzLocal',
        PlLocal = <any> 'plLocal',
        SeLocal = <any> 'seLocal',
        SgLocal = <any> 'sgLocal',
        UkLocal = <any> 'ukLocal',
        UsLocal = <any> 'usLocal'
    }
    export enum PaymentInstrumentTypeEnum {
        BankAccount = <any> 'BankAccount',
        Card = <any> 'Card'
    }
}
