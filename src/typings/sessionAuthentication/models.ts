/*
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */


export * from './accountHolderResource';
export * from './accountHolderResourceAllOf';
export * from './authenticationSessionRequest';
export * from './authenticationSessionResponse';
export * from './balanceAccountResource';
export * from './balanceAccountResourceAllOf';
export * from './defaultErrorResponseEntity';
export * from './invalidField';
export * from './legalEntityResource';
export * from './legalEntityResourceAllOf';
export * from './merchantAccountResource';
export * from './merchantAccountResourceAllOf';
export * from './paymentInstrumentResource';
export * from './paymentInstrumentResourceAllOf';
export * from './policy';
export * from './productType';
export * from './resource';
export * from './resourceType';


import { AccountHolderResource } from './accountHolderResource';
import { AccountHolderResourceAllOf } from './accountHolderResourceAllOf';
import { AuthenticationSessionRequest } from './authenticationSessionRequest';
import { AuthenticationSessionResponse } from './authenticationSessionResponse';
import { BalanceAccountResource } from './balanceAccountResource';
import { BalanceAccountResourceAllOf } from './balanceAccountResourceAllOf';
import { DefaultErrorResponseEntity } from './defaultErrorResponseEntity';
import { InvalidField } from './invalidField';
import { LegalEntityResource } from './legalEntityResource';
import { LegalEntityResourceAllOf } from './legalEntityResourceAllOf';
import { MerchantAccountResource } from './merchantAccountResource';
import { MerchantAccountResourceAllOf } from './merchantAccountResourceAllOf';
import { PaymentInstrumentResource } from './paymentInstrumentResource';
import { PaymentInstrumentResourceAllOf } from './paymentInstrumentResourceAllOf';
import { Policy } from './policy';
import { ProductType } from './productType';
import { Resource } from './resource';
import { ResourceType } from './resourceType';

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

let enumsMap: {[index: string]: any} = {
        "ProductType": ProductType,
        "ResourceType": ResourceType,
}

let typeMap: {[index: string]: any} = {
    "AccountHolderResource": AccountHolderResource,
    "AccountHolderResourceAllOf": AccountHolderResourceAllOf,
    "AuthenticationSessionRequest": AuthenticationSessionRequest,
    "AuthenticationSessionResponse": AuthenticationSessionResponse,
    "BalanceAccountResource": BalanceAccountResource,
    "BalanceAccountResourceAllOf": BalanceAccountResourceAllOf,
    "DefaultErrorResponseEntity": DefaultErrorResponseEntity,
    "InvalidField": InvalidField,
    "LegalEntityResource": LegalEntityResource,
    "LegalEntityResourceAllOf": LegalEntityResourceAllOf,
    "MerchantAccountResource": MerchantAccountResource,
    "MerchantAccountResourceAllOf": MerchantAccountResourceAllOf,
    "PaymentInstrumentResource": PaymentInstrumentResource,
    "PaymentInstrumentResourceAllOf": PaymentInstrumentResourceAllOf,
    "Policy": Policy,
    "Resource": Resource,
}

export class ObjectSerializer {
    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if(typeMap[discriminatorType]){
                        return discriminatorType; // use the type given in the discriminator
                    } else {
                        return expectedType; // discriminator did not map to a type
                    }
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.serialize(datum, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toISOString();
        } else if (type === "SaleToAcquirerData") {
            const dataString = JSON.stringify(data);
            return Buffer.from(dataString).toString("base64");
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // Get the actual type of this object
            type = this.findCorrectType(data, type);

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.deserialize(datum, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
