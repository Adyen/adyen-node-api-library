/*
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import { ChallengeInfo } from './challengeInfo';

export class AuthenticationInfo {
    /**
    * Universally unique transaction identifier assigned by the Access Control Server (ACS) to identify a single transaction.
    */
    'acsTransId': string;
    'challenge'?: ChallengeInfo;
    /**
    * Specifies a preference for receiving a challenge. Possible values:  * **01**: No preference * **02**: No challenge requested * **03**: Challenge requested (preference) * **04**: Challenge requested (mandate) * **05**: No challenge requested (transactional risk analysis is already performed) * **07**: No challenge requested (SCA is already performed) * **08**: No challenge requested (trusted beneficiaries exemption of no challenge required) * **09**: Challenge requested (trusted beneficiaries prompt requested if challenge required) * **80**: No challenge requested (secure corporate payment with Mastercard) * **82**: No challenge requested (secure corporate payment with Visa) 
    */
    'challengeIndicator': AuthenticationInfo.ChallengeIndicatorEnum;
    /**
    * Date and time in UTC of the cardholder authentication.   [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.
    */
    'createdAt': Date;
    /**
    * Indicates the type of channel interface being used to initiate the transaction. Possible values:  * **app** * **browser** * **3DSRequestorInitiated** (initiated by a merchant when the cardholder is not available)
    */
    'deviceChannel': AuthenticationInfo.DeviceChannelEnum;
    /**
    * Universally unique transaction identifier assigned by the DS (card scheme) to identify a single transaction.
    */
    'dsTransID': string;
    /**
    * Indicates the exemption type that was applied to the authentication by the issuer, if exemption applied. Possible values:  * **lowValue** * **secureCorporate** * **trustedBeneficiary** * **transactionRiskAnalysis** * **acquirerExemption** * **noExemptionApplied** * **visaDAFExemption** 
    */
    'exemptionIndicator'?: AuthenticationInfo.ExemptionIndicatorEnum;
    /**
    * Indicates if the purchase was in the PSD2 scope.
    */
    'inPSD2Scope': boolean;
    /**
    * Identifies the category of the message for a specific use case. Possible values:  * **payment** * **nonPayment**
    */
    'messageCategory': AuthenticationInfo.MessageCategoryEnum;
    /**
    * The `messageVersion` value as defined in the 3D Secure 2 specification.
    */
    'messageVersion': string;
    /**
    * Risk score calculated from the transaction rules.
    */
    'riskScore'?: number;
    /**
    * The `threeDSServerTransID` value as defined in the 3D Secure 2 specification.
    */
    'threeDSServerTransID': string;
    /**
    * The `transStatus` value as defined in the 3D Secure 2 specification. Possible values:  * **Y**: Authentication / Account verification successful. * **N**: Not Authenticated / Account not verified. Transaction denied. * **U**: Authentication / Account verification could not be performed. * **I**: Informational Only / 3D Secure Requestor challenge preference acknowledged. * **R**: Authentication / Account verification rejected by the Issuer. 
    */
    'transStatus': AuthenticationInfo.TransStatusEnum;
    /**
    * Provides information on why the `transStatus` field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).
    */
    'transStatusReason'?: AuthenticationInfo.TransStatusReasonEnum;
    /**
    * The type of authentication performed. Possible values:  * **frictionless** * **challenge**
    */
    'type': AuthenticationInfo.TypeEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "acsTransId",
            "baseName": "acsTransId",
            "type": "string"
        },
        {
            "name": "challenge",
            "baseName": "challenge",
            "type": "ChallengeInfo"
        },
        {
            "name": "challengeIndicator",
            "baseName": "challengeIndicator",
            "type": "AuthenticationInfo.ChallengeIndicatorEnum"
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "Date"
        },
        {
            "name": "deviceChannel",
            "baseName": "deviceChannel",
            "type": "AuthenticationInfo.DeviceChannelEnum"
        },
        {
            "name": "dsTransID",
            "baseName": "dsTransID",
            "type": "string"
        },
        {
            "name": "exemptionIndicator",
            "baseName": "exemptionIndicator",
            "type": "AuthenticationInfo.ExemptionIndicatorEnum"
        },
        {
            "name": "inPSD2Scope",
            "baseName": "inPSD2Scope",
            "type": "boolean"
        },
        {
            "name": "messageCategory",
            "baseName": "messageCategory",
            "type": "AuthenticationInfo.MessageCategoryEnum"
        },
        {
            "name": "messageVersion",
            "baseName": "messageVersion",
            "type": "string"
        },
        {
            "name": "riskScore",
            "baseName": "riskScore",
            "type": "number"
        },
        {
            "name": "threeDSServerTransID",
            "baseName": "threeDSServerTransID",
            "type": "string"
        },
        {
            "name": "transStatus",
            "baseName": "transStatus",
            "type": "AuthenticationInfo.TransStatusEnum"
        },
        {
            "name": "transStatusReason",
            "baseName": "transStatusReason",
            "type": "AuthenticationInfo.TransStatusReasonEnum"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "AuthenticationInfo.TypeEnum"
        }    ];

    static getAttributeTypeMap() {
        return AuthenticationInfo.attributeTypeMap;
    }
}

export namespace AuthenticationInfo {
    export enum ChallengeIndicatorEnum {
        _01 = '01',
        _02 = '02',
        _03 = '03',
        _04 = '04',
        _05 = '05',
        _07 = '07',
        _08 = '08',
        _09 = '09',
        _80 = '80',
        _82 = '82'
    }
    export enum DeviceChannelEnum {
        App = 'app',
        Browser = 'browser',
        ThreeDsRequestorInitiated = 'ThreeDSRequestorInitiated'
    }
    export enum ExemptionIndicatorEnum {
        LowValue = 'lowValue',
        SecureCorporate = 'secureCorporate',
        TrustedBeneficiary = 'trustedBeneficiary',
        TransactionRiskAnalysis = 'transactionRiskAnalysis',
        AcquirerExemption = 'acquirerExemption',
        NoExemptionApplied = 'noExemptionApplied',
        VisaDafExemption = 'visaDAFExemption'
    }
    export enum MessageCategoryEnum {
        Payment = 'payment',
        NonPayment = 'nonPayment'
    }
    export enum TransStatusEnum {
        Y = 'Y',
        N = 'N',
        R = 'R',
        I = 'I',
        U = 'U'
    }
    export enum TransStatusReasonEnum {
        _01 = '01',
        _02 = '02',
        _03 = '03',
        _04 = '04',
        _05 = '05',
        _06 = '06',
        _07 = '07',
        _08 = '08',
        _09 = '09',
        _10 = '10',
        _11 = '11',
        _12 = '12',
        _13 = '13',
        _14 = '14',
        _15 = '15',
        _16 = '16',
        _17 = '17',
        _18 = '18',
        _19 = '19',
        _20 = '20',
        _21 = '21',
        _22 = '22',
        _23 = '23',
        _24 = '24',
        _25 = '25',
        _26 = '26',
        _80 = '80',
        _81 = '81',
        _82 = '82',
        _83 = '83',
        _84 = '84',
        _85 = '85',
        _86 = '86',
        _87 = '87',
        _88 = '88'
    }
    export enum TypeEnum {
        Frictionless = 'frictionless',
        Challenge = 'challenge'
    }
}
