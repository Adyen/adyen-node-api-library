/*
 * The version of the OpenAPI document: v68
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import { Address } from "./address";
import { BankAccount } from "./bankAccount";
import { Card } from "./card";
import { Name } from "./name";
import { Recurring } from "./recurring";


export class StoreDetailRequest {
    /**
    * This field contains additional data, which may be required for a particular request.
    */
    "additionalData"?: { [key: string]: string; };
    "bank"?: BankAccount;
    "billingAddress"?: Address;
    "card"?: Card;
    /**
    * The date of birth. Format: [ISO-8601](https://www.w3.org/TR/NOTE-datetime); example: YYYY-MM-DD For Paysafecard it must be the same as used when registering the Paysafecard account. > This field is mandatory for natural persons.
    */
    "dateOfBirth": string;
    /**
    * The type of the entity the payout is processed for.
    */
    "entityType": StoreDetailRequest.EntityTypeEnum;
    /**
    * An integer value that is added to the normal fraud score. The value can be either positive or negative.
    */
    "fraudOffset"?: number;
    /**
    * The merchant account identifier, with which you want to process the transaction.
    */
    "merchantAccount": string;
    /**
    * The shopper\'s nationality.  A valid value is an ISO 2-character country code (e.g. \'NL\').
    */
    "nationality": string;
    "recurring": Recurring;
    /**
    * The name of the brand to make a payout to.  For Paysafecard it must be set to `paysafecard`.
    */
    "selectedBrand"?: string;
    /**
    * The shopper\'s email address.
    */
    "shopperEmail": string;
    "shopperName"?: Name;
    /**
    * The shopper\'s reference for the payment transaction.
    */
    "shopperReference": string;
    /**
    * The shopper\'s social security number.
    */
    "socialSecurityNumber"?: string;
    /**
    * The shopper\'s phone number.
    */
    "telephoneNumber"?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "additionalData",
            "baseName": "additionalData",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        {
            "name": "bank",
            "baseName": "bank",
            "type": "BankAccount",
            "format": ""
        },
        {
            "name": "billingAddress",
            "baseName": "billingAddress",
            "type": "Address",
            "format": ""
        },
        {
            "name": "card",
            "baseName": "card",
            "type": "Card",
            "format": ""
        },
        {
            "name": "dateOfBirth",
            "baseName": "dateOfBirth",
            "type": "string",
            "format": "date"
        },
        {
            "name": "entityType",
            "baseName": "entityType",
            "type": "StoreDetailRequest.EntityTypeEnum",
            "format": ""
        },
        {
            "name": "fraudOffset",
            "baseName": "fraudOffset",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "merchantAccount",
            "baseName": "merchantAccount",
            "type": "string",
            "format": ""
        },
        {
            "name": "nationality",
            "baseName": "nationality",
            "type": "string",
            "format": ""
        },
        {
            "name": "recurring",
            "baseName": "recurring",
            "type": "Recurring",
            "format": ""
        },
        {
            "name": "selectedBrand",
            "baseName": "selectedBrand",
            "type": "string",
            "format": ""
        },
        {
            "name": "shopperEmail",
            "baseName": "shopperEmail",
            "type": "string",
            "format": ""
        },
        {
            "name": "shopperName",
            "baseName": "shopperName",
            "type": "Name",
            "format": ""
        },
        {
            "name": "shopperReference",
            "baseName": "shopperReference",
            "type": "string",
            "format": ""
        },
        {
            "name": "socialSecurityNumber",
            "baseName": "socialSecurityNumber",
            "type": "string",
            "format": ""
        },
        {
            "name": "telephoneNumber",
            "baseName": "telephoneNumber",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return StoreDetailRequest.attributeTypeMap;
    }

    public constructor() {
    }
}

export namespace StoreDetailRequest {
    export enum EntityTypeEnum {
        NaturalPerson = 'NaturalPerson',
        Company = 'Company'
    }
}
