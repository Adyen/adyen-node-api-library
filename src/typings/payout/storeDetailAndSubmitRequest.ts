/*
 * The version of the OpenAPI document: v68
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import { Address } from './models';
import { Amount } from './models';
import { BankAccount } from './models';
import { Card } from './models';
import { Name } from './models';
import { Recurring } from './models';


export class StoreDetailAndSubmitRequest {
    /**
    * This field contains additional data, which may be required for a particular request.
    */
    'additionalData'?: { [key: string]: string; };
    'amount': Amount;
    'bank'?: BankAccount;
    'billingAddress'?: Address;
    'card'?: Card;
    /**
    * The date of birth. Format: [ISO-8601](https://www.w3.org/TR/NOTE-datetime); example: YYYY-MM-DD For Paysafecard it must be the same as used when registering the Paysafecard account. > This field is mandatory for natural persons.
    */
    'dateOfBirth': string;
    /**
    * The type of the entity the payout is processed for.
    */
    'entityType': StoreDetailAndSubmitRequest.EntityTypeEnum;
    /**
    * An integer value that is added to the normal fraud score. The value can be either positive or negative.
    */
    'fraudOffset'?: number;
    /**
    * The merchant account identifier, with which you want to process the transaction.
    */
    'merchantAccount': string;
    /**
    * The shopper\'s nationality.  A valid value is an ISO 2-character country code (e.g. \'NL\').
    */
    'nationality': string;
    'recurring': Recurring;
    /**
    * The merchant reference for this payment. This reference will be used in all communication to the merchant about the status of the payout. Although it is a good idea to make sure it is unique, this is not a requirement.
    */
    'reference': string;
    /**
    * The name of the brand to make a payout to.  For Paysafecard it must be set to `paysafecard`.
    */
    'selectedBrand'?: string;
    /**
    * The shopper\'s email address.
    */
    'shopperEmail': string;
    'shopperName'?: Name;
    /**
    * The shopper\'s reference for the payment transaction.
    */
    'shopperReference': string;
    /**
    * The description of this payout. This description is shown on the bank statement of the shopper (if this is supported by the chosen payment method).
    */
    'shopperStatement'?: string;
    /**
    * The shopper\'s social security number.
    */
    'socialSecurityNumber'?: string;
    /**
    * The shopper\'s phone number.
    */
    'telephoneNumber'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "additionalData",
            "baseName": "additionalData",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "Amount",
            "format": ""
        },
        {
            "name": "bank",
            "baseName": "bank",
            "type": "BankAccount",
            "format": ""
        },
        {
            "name": "billingAddress",
            "baseName": "billingAddress",
            "type": "Address",
            "format": ""
        },
        {
            "name": "card",
            "baseName": "card",
            "type": "Card",
            "format": ""
        },
        {
            "name": "dateOfBirth",
            "baseName": "dateOfBirth",
            "type": "string",
            "format": "date"
        },
        {
            "name": "entityType",
            "baseName": "entityType",
            "type": "StoreDetailAndSubmitRequest.EntityTypeEnum",
            "format": ""
        },
        {
            "name": "fraudOffset",
            "baseName": "fraudOffset",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "merchantAccount",
            "baseName": "merchantAccount",
            "type": "string",
            "format": ""
        },
        {
            "name": "nationality",
            "baseName": "nationality",
            "type": "string",
            "format": ""
        },
        {
            "name": "recurring",
            "baseName": "recurring",
            "type": "Recurring",
            "format": ""
        },
        {
            "name": "reference",
            "baseName": "reference",
            "type": "string",
            "format": ""
        },
        {
            "name": "selectedBrand",
            "baseName": "selectedBrand",
            "type": "string",
            "format": ""
        },
        {
            "name": "shopperEmail",
            "baseName": "shopperEmail",
            "type": "string",
            "format": ""
        },
        {
            "name": "shopperName",
            "baseName": "shopperName",
            "type": "Name",
            "format": ""
        },
        {
            "name": "shopperReference",
            "baseName": "shopperReference",
            "type": "string",
            "format": ""
        },
        {
            "name": "shopperStatement",
            "baseName": "shopperStatement",
            "type": "string",
            "format": ""
        },
        {
            "name": "socialSecurityNumber",
            "baseName": "socialSecurityNumber",
            "type": "string",
            "format": ""
        },
        {
            "name": "telephoneNumber",
            "baseName": "telephoneNumber",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return StoreDetailAndSubmitRequest.attributeTypeMap;
    }

    public constructor() {
    }
}

export namespace StoreDetailAndSubmitRequest {
    export enum EntityTypeEnum {
        NaturalPerson = 'NaturalPerson',
        Company = 'Company'
    }
}
