/*
 *                       ######
 *                       ######
 * ############    ####( ######  #####. ######  ############   ############
 * #############  #####( ######  #####. ######  #############  #############
 *        ######  #####( ######  #####. ######  #####  ######  #####  ######
 * ###### ######  #####( ######  #####. ######  #####  #####   #####  ######
 * ###### ######  #####( ######  #####. ######  #####          #####  ######
 * #############  #############  #############  #############  #####  ######
 *  ############   ############  #############   ############  #####  ######
 *                                      ######
 *                               #############
 *                               ############
 * Adyen NodeJS API Library
 * Copyright (c) 2020 Adyen B.V.
 * This file is open source and available under the MIT license.
 * See the LICENSE file for more info.
 */

/**
 * Terminal API
 * Definition of Terminal API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



export class CardAcquisitionTransaction {
    "allowedLoyaltyBrand"?: string[];
    "allowedPaymentBrand"?: string[];
    "cashBackFlag"?: boolean;
    "customerLanguage"?: string;
    "forceCustomerSelectionFlag"?: boolean;
    "forceEntryMode"?: CardAcquisitionTransaction.ForceEntryModeEnum[][];
    "loyaltyHandling"?: CardAcquisitionTransaction.LoyaltyHandlingEnum;
    "paymentType"?: CardAcquisitionTransaction.PaymentTypeEnum;
    "totalAmount"?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: {name: string, baseName: string, type: string}[] = [
        {
            "name": "allowedLoyaltyBrand",
            "baseName": "AllowedLoyaltyBrand",
            "type": "Array<string>"
        },
        {
            "name": "allowedPaymentBrand",
            "baseName": "AllowedPaymentBrand",
            "type": "Array<string>"
        },
        {
            "name": "cashBackFlag",
            "baseName": "CashBackFlag",
            "type": "boolean"
        },
        {
            "name": "customerLanguage",
            "baseName": "CustomerLanguage",
            "type": "string"
        },
        {
            "name": "forceCustomerSelectionFlag",
            "baseName": "ForceCustomerSelectionFlag",
            "type": "boolean"
        },
        {
            "name": "forceEntryMode",
            "baseName": "ForceEntryMode",
            "type": "Array<Array<CardAcquisitionTransaction.ForceEntryModeEnum>>"
        },
        {
            "name": "loyaltyHandling",
            "baseName": "LoyaltyHandling",
            "type": "CardAcquisitionTransaction.LoyaltyHandlingEnum"
        },
        {
            "name": "paymentType",
            "baseName": "PaymentType",
            "type": "CardAcquisitionTransaction.PaymentTypeEnum"
        },
        {
            "name": "totalAmount",
            "baseName": "TotalAmount",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return CardAcquisitionTransaction.attributeTypeMap;
    }
}

export namespace CardAcquisitionTransaction {
    export enum ForceEntryModeEnum {
        CheckReader = "CheckReader" as any,
        Contactless = "Contactless" as any,
        File = "File" as any,
        ICC = "ICC" as any,
        Keyed = "Keyed" as any,
        MagStripe = "MagStripe" as any,
        Manual = "Manual" as any,
        RFID = "RFID" as any,
        Scanned = "Scanned" as any,
        SynchronousICC = "SynchronousICC" as any,
        Tapped = "Tapped" as any
    }
    export enum LoyaltyHandlingEnum {
        Allowed = "Allowed" as any,
        Forbidden = "Forbidden" as any,
        Processed = "Processed" as any,
        Proposed = "Proposed" as any,
        Required = "Required" as any
    }
    export enum PaymentTypeEnum {
        CashAdvance = "CashAdvance" as any,
        CashDeposit = "CashDeposit" as any,
        Completion = "Completion" as any,
        FirstReservation = "FirstReservation" as any,
        Instalment = "Instalment" as any,
        IssuerInstalment = "IssuerInstalment" as any,
        Normal = "Normal" as any,
        OneTimeReservation = "OneTimeReservation" as any,
        PaidOut = "PaidOut" as any,
        Recurring = "Recurring" as any,
        Refund = "Refund" as any,
        UpdateReservation = "UpdateReservation" as any
    }
}
