/*
 *                       ######
 *                       ######
 * ############    ####( ######  #####. ######  ############   ############
 * #############  #####( ######  #####. ######  #############  #############
 *        ######  #####( ######  #####. ######  #####  ######  #####  ######
 * ###### ######  #####( ######  #####. ######  #####  #####   #####  ######
 * ###### ######  #####( ######  #####. ######  #####          #####  ######
 * #############  #############  #############  #############  #####  ######
 *  ############   ############  #############   ############  #####  ######
 *                                      ######
 *                               #############
 *                               ############
 * Adyen NodeJS API Library
 * Copyright (c) 2020 Adyen B.V.
 * This file is open source and available under the MIT license.
 * See the LICENSE file for more info.
 */

/**
 * Terminal API
 * Definition of Terminal API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { CustomerOrder } from "./customerOrder";
import { Instalment } from "./instalment";
import { PaymentInstrumentData } from "./paymentInstrumentData";
import { TransactionIdentification } from "./transactionIdentification";

export class PaymentData {
    "cardAcquisitionReference"?: TransactionIdentification;
    "customerOrder"?: CustomerOrder;
    "instalment"?: Instalment;
    "paymentInstrumentData"?: PaymentInstrumentData;
    "paymentType"?: PaymentData.PaymentTypeEnum;
    "requestedValidityDate"?: string;
    "splitPaymentFlag"?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: {name: string, baseName: string, type: string}[] = [
        {
            "name": "cardAcquisitionReference",
            "baseName": "CardAcquisitionReference",
            "type": "TransactionIdentification"
        },
        {
            "name": "customerOrder",
            "baseName": "CustomerOrder",
            "type": "CustomerOrder"
        },
        {
            "name": "instalment",
            "baseName": "Instalment",
            "type": "Instalment"
        },
        {
            "name": "paymentInstrumentData",
            "baseName": "PaymentInstrumentData",
            "type": "PaymentInstrumentData"
        },
        {
            "name": "paymentType",
            "baseName": "PaymentType",
            "type": "PaymentData.PaymentTypeEnum"
        },
        {
            "name": "requestedValidityDate",
            "baseName": "RequestedValidityDate",
            "type": "string"
        },
        {
            "name": "splitPaymentFlag",
            "baseName": "SplitPaymentFlag",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return PaymentData.attributeTypeMap;
    }
}

export namespace PaymentData {
    export enum PaymentTypeEnum {
        CashAdvance = "CashAdvance" as any,
        CashDeposit = "CashDeposit" as any,
        Completion = "Completion" as any,
        FirstReservation = "FirstReservation" as any,
        Instalment = "Instalment" as any,
        IssuerInstalment = "IssuerInstalment" as any,
        Normal = "Normal" as any,
        OneTimeReservation = "OneTimeReservation" as any,
        PaidOut = "PaidOut" as any,
        Recurring = "Recurring" as any,
        Refund = "Refund" as any,
        UpdateReservation = "UpdateReservation" as any
    }
}
