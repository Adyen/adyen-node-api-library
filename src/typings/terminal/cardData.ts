/*
 *                       ######
 *                       ######
 * ############    ####( ######  #####. ######  ############   ############
 * #############  #####( ######  #####. ######  #############  #############
 *        ######  #####( ######  #####. ######  #####  ######  #####  ######
 * ###### ######  #####( ######  #####. ######  #####  #####   #####  ######
 * ###### ######  #####( ######  #####. ######  #####          #####  ######
 * #############  #############  #############  #############  #####  ######
 *  ############   ############  #############   ############  #####  ######
 *                                      ######
 *                               #############
 *                               ############
 * Adyen NodeJS API Library
 * Copyright (c) 2020 Adyen B.V.
 * This file is open source and available under the MIT license.
 * See the LICENSE file for more info.
 */

/**
 * Terminal API
 * Definition of Terminal API Schema
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { AllowedProduct } from "./allowedProduct";
import { ContentInformation } from "./contentInformation";
import { CustomerOrder } from "./customerOrder";
import { PaymentToken } from "./paymentToken";
import { SensitiveCardData } from "./sensitiveCardData";

export class CardData {
    "allowedProduct"?: AllowedProduct[];
    "allowedProductCode"?: string[];
    "cardCountryCode"?: string;
    "customerOrder"?: CustomerOrder[];
    "entryMode"?: CardData.EntryModeEnum[];
    "maskedPAN"?: string;
    "paymentAccountRef"?: string;
    "paymentBrand"?: string;
    "paymentToken"?: PaymentToken;
    "protectedCardData"?: ContentInformation;
    "sensitiveCardData"?: SensitiveCardData;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: {name: string, baseName: string, type: string}[] = [
        {
            "name": "allowedProduct",
            "baseName": "AllowedProduct",
            "type": "Array<AllowedProduct>"
        },
        {
            "name": "allowedProductCode",
            "baseName": "AllowedProductCode",
            "type": "Array<string>"
        },
        {
            "name": "cardCountryCode",
            "baseName": "CardCountryCode",
            "type": "string"
        },
        {
            "name": "customerOrder",
            "baseName": "CustomerOrder",
            "type": "Array<CustomerOrder>"
        },
        {
            "name": "entryMode",
            "baseName": "EntryMode",
            "type": "Array<CardData.EntryModeEnum>"
        },
        {
            "name": "maskedPAN",
            "baseName": "MaskedPAN",
            "type": "string"
        },
        {
            "name": "paymentAccountRef",
            "baseName": "PaymentAccountRef",
            "type": "string"
        },
        {
            "name": "paymentBrand",
            "baseName": "PaymentBrand",
            "type": "string"
        },
        {
            "name": "paymentToken",
            "baseName": "PaymentToken",
            "type": "PaymentToken"
        },
        {
            "name": "protectedCardData",
            "baseName": "ProtectedCardData",
            "type": "ContentInformation"
        },
        {
            "name": "sensitiveCardData",
            "baseName": "SensitiveCardData",
            "type": "SensitiveCardData"
        }    ];

    static getAttributeTypeMap() {
        return CardData.attributeTypeMap;
    }
}

export namespace CardData {
    export enum EntryModeEnum {
        Contactless = "Contactless" as any,
        File = "File" as any,
        ICC = "ICC" as any,
        Keyed = "Keyed" as any,
        MagStripe = "MagStripe" as any,
        Manual = "Manual" as any,
        Mobile = "Mobile" as any,
        RFID = "RFID" as any,
        Scanned = "Scanned" as any,
        SynchronousICC = "SynchronousICC" as any,
        Tapped = "Tapped" as any
    }
}
