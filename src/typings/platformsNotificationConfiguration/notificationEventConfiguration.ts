/*
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */


export class NotificationEventConfiguration {
    /**
    * The type of event.  Possible values: **ACCOUNT_CLOSED**, **ACCOUNT_CREATED**, **ACCOUNT_FUNDS_BELOW_THRESHOLD**, **ACCOUNT_HOLDER_CREATED**, **ACCOUNT_HOLDER_LIMIT_REACHED**, **ACCOUNT_HOLDER_PAYOUT**, **ACCOUNT_HOLDER_STATUS_CHANGE**, **ACCOUNT_HOLDER_STORE_STATUS_CHANGE**, **ACCOUNT_HOLDER_UPCOMING_DEADLINE**, **ACCOUNT_HOLDER_UPDATED**, **ACCOUNT_HOLDER_VERIFICATION**, **ACCOUNT_UPDATED**, **BENEFICIARY_SETUP**, **COMPENSATE_NEGATIVE_BALANCE**, **DIRECT_DEBIT_INITIATED**, **PAYMENT_FAILURE**, **REFUND_FUNDS_TRANSFER**, **REPORT_AVAILABLE**, **SCHEDULED_REFUNDS**, **TRANSFER_FUNDS**.
    */
    'eventType': NotificationEventConfiguration.EventTypeEnum;
    /**
    * Indicates whether the specified `eventType` is sent to your webhook endpoint. Possible values: * **INCLUDE**: Send the specified `eventType`. * **EXCLUDE**: Send all event types except the specified `eventType` and other event types with the `includeMode` set to **EXCLUDE**.
    */
    'includeMode': NotificationEventConfiguration.IncludeModeEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "eventType",
            "baseName": "eventType",
            "type": "NotificationEventConfiguration.EventTypeEnum"
        },
        {
            "name": "includeMode",
            "baseName": "includeMode",
            "type": "NotificationEventConfiguration.IncludeModeEnum"
        }    ];

    static getAttributeTypeMap() {
        return NotificationEventConfiguration.attributeTypeMap;
    }
}

export namespace NotificationEventConfiguration {
    export enum EventTypeEnum {
        AccountClosed = 'ACCOUNT_CLOSED',
        AccountCreated = 'ACCOUNT_CREATED',
        AccountFundsBelowThreshold = 'ACCOUNT_FUNDS_BELOW_THRESHOLD',
        AccountHolderCreated = 'ACCOUNT_HOLDER_CREATED',
        AccountHolderLimitReached = 'ACCOUNT_HOLDER_LIMIT_REACHED',
        AccountHolderMigrated = 'ACCOUNT_HOLDER_MIGRATED',
        AccountHolderPayout = 'ACCOUNT_HOLDER_PAYOUT',
        AccountHolderStatusChange = 'ACCOUNT_HOLDER_STATUS_CHANGE',
        AccountHolderStoreStatusChange = 'ACCOUNT_HOLDER_STORE_STATUS_CHANGE',
        AccountHolderUpcomingDeadline = 'ACCOUNT_HOLDER_UPCOMING_DEADLINE',
        AccountHolderUpdated = 'ACCOUNT_HOLDER_UPDATED',
        AccountHolderVerification = 'ACCOUNT_HOLDER_VERIFICATION',
        AccountUpdated = 'ACCOUNT_UPDATED',
        BeneficiarySetup = 'BENEFICIARY_SETUP',
        CompensateNegativeBalance = 'COMPENSATE_NEGATIVE_BALANCE',
        DirectDebitInitiated = 'DIRECT_DEBIT_INITIATED',
        FundsMigrated = 'FUNDS_MIGRATED',
        PaymentFailure = 'PAYMENT_FAILURE',
        PendingCredit = 'PENDING_CREDIT',
        RefundFundsTransfer = 'REFUND_FUNDS_TRANSFER',
        ReportAvailable = 'REPORT_AVAILABLE',
        ScheduledRefunds = 'SCHEDULED_REFUNDS',
        ScoreSignalTriggered = 'SCORE_SIGNAL_TRIGGERED',
        TransferFunds = 'TRANSFER_FUNDS',
        TransferNotPaidoutTransfers = 'TRANSFER_NOT_PAIDOUT_TRANSFERS'
    }
    export enum IncludeModeEnum {
        Exclude = 'EXCLUDE',
        Include = 'INCLUDE'
    }
}
