/*
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import { ErrorFieldType } from './errorFieldType';
import { ExchangeMessage } from './exchangeMessage';

export class TestNotificationConfigurationResponse {
    /**
    * Any error messages encountered.
    */
    'errorMessages'?: Array<string>;
    /**
    * The event types that were tested. >Permitted values: `ACCOUNT_HOLDER_CREATED`, `ACCOUNT_CREATED`, `ACCOUNT_UPDATED`, `ACCOUNT_HOLDER_UPDATED`, `ACCOUNT_HOLDER_STATUS_CHANGE`, `ACCOUNT_HOLDER_STORE_STATUS_CHANGE` `ACCOUNT_HOLDER_VERIFICATION`, `ACCOUNT_HOLDER_LIMIT_REACHED`, `ACCOUNT_HOLDER_PAYOUT`, `PAYMENT_FAILURE`, `SCHEDULED_REFUNDS`, `REPORT_AVAILABLE`, `TRANSFER_FUNDS`, `BENEFICIARY_SETUP`, `COMPENSATE_NEGATIVE_BALANCE`.
    */
    'eventTypes'?: Array<TestNotificationConfigurationResponse.EventTypesEnum>;
    /**
    * The notification message and related response messages.
    */
    'exchangeMessages'?: Array<ExchangeMessage>;
    /**
    * Contains field validation errors that would prevent requests from being processed.
    */
    'invalidFields'?: Array<ErrorFieldType>;
    /**
    * The ID of the notification subscription configuration.
    */
    'notificationId': number;
    /**
    * A list of messages describing the testing steps.
    */
    'okMessages'?: Array<string>;
    /**
    * The reference of a request. Can be used to uniquely identify the request.
    */
    'pspReference'?: string;
    /**
    * The result code.
    */
    'resultCode'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "errorMessages",
            "baseName": "errorMessages",
            "type": "Array<string>"
        },
        {
            "name": "eventTypes",
            "baseName": "eventTypes",
            "type": "Array<TestNotificationConfigurationResponse.EventTypesEnum>"
        },
        {
            "name": "exchangeMessages",
            "baseName": "exchangeMessages",
            "type": "Array<ExchangeMessage>"
        },
        {
            "name": "invalidFields",
            "baseName": "invalidFields",
            "type": "Array<ErrorFieldType>"
        },
        {
            "name": "notificationId",
            "baseName": "notificationId",
            "type": "number"
        },
        {
            "name": "okMessages",
            "baseName": "okMessages",
            "type": "Array<string>"
        },
        {
            "name": "pspReference",
            "baseName": "pspReference",
            "type": "string"
        },
        {
            "name": "resultCode",
            "baseName": "resultCode",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return TestNotificationConfigurationResponse.attributeTypeMap;
    }
}

export namespace TestNotificationConfigurationResponse {
    export enum EventTypesEnum {
        AccountClosed = 'ACCOUNT_CLOSED',
        AccountCreated = 'ACCOUNT_CREATED',
        AccountFundsBelowThreshold = 'ACCOUNT_FUNDS_BELOW_THRESHOLD',
        AccountHolderCreated = 'ACCOUNT_HOLDER_CREATED',
        AccountHolderLimitReached = 'ACCOUNT_HOLDER_LIMIT_REACHED',
        AccountHolderMigrated = 'ACCOUNT_HOLDER_MIGRATED',
        AccountHolderPayout = 'ACCOUNT_HOLDER_PAYOUT',
        AccountHolderStatusChange = 'ACCOUNT_HOLDER_STATUS_CHANGE',
        AccountHolderStoreStatusChange = 'ACCOUNT_HOLDER_STORE_STATUS_CHANGE',
        AccountHolderUpcomingDeadline = 'ACCOUNT_HOLDER_UPCOMING_DEADLINE',
        AccountHolderUpdated = 'ACCOUNT_HOLDER_UPDATED',
        AccountHolderVerification = 'ACCOUNT_HOLDER_VERIFICATION',
        AccountUpdated = 'ACCOUNT_UPDATED',
        BeneficiarySetup = 'BENEFICIARY_SETUP',
        CompensateNegativeBalance = 'COMPENSATE_NEGATIVE_BALANCE',
        DirectDebitInitiated = 'DIRECT_DEBIT_INITIATED',
        FundsMigrated = 'FUNDS_MIGRATED',
        PaymentFailure = 'PAYMENT_FAILURE',
        PendingCredit = 'PENDING_CREDIT',
        RefundFundsTransfer = 'REFUND_FUNDS_TRANSFER',
        ReportAvailable = 'REPORT_AVAILABLE',
        ScheduledRefunds = 'SCHEDULED_REFUNDS',
        ScoreSignalTriggered = 'SCORE_SIGNAL_TRIGGERED',
        TransferFunds = 'TRANSFER_FUNDS',
        TransferNotPaidoutTransfers = 'TRANSFER_NOT_PAIDOUT_TRANSFERS'
    }
}
