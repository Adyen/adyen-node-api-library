/**
 * Issuing: Balance Platform API
 * Adyen Issuing lets you create and issue cards using the Balance Platform API. Use the API to onboard users as account holders in your balance platform, create balance accounts, and issue cards.  For more information, refer to [Adyen Issuing](https://docs.adyen.com/issuing).   ## Authentication To connect to the Balance Platform API, you must use your basic authentication credentials. To create your web service user and generate credentials, refer to [API credentials](https://docs.adyen.com/development-resources/api-credentials#basic-authentication). Then use the credentials to authenticate your request, for example:  ``` curl -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new basic authentication credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Balance Platform API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/bcl/v1 ```
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Authentication } from './authentication';
import { CardConfiguration } from './cardConfiguration';
import { Contact } from './contact';
import { Expiry } from './expiry';

export class Card {
    'authentication'?: Authentication;
    /**
    * The BIN of the card number.
    */
    'bin'?: string;
    /**
    * The brand for the payment instrument. Possible values: **visa**, **mc**.
    */
    'brand': string;
    /**
    * The brand variant for the payment instrument. >Contact your Adyen Implementation Manager to get the values that are relevant to your integration. Examples: **visadebit**, **mcprepaid**.
    */
    'brandVariant': string;
    /**
    * The name of the card holder.
    */
    'cardholderName': string;
    'configuration'?: CardConfiguration;
    /**
    * The CVC2 value of the card. >By default this field will not be present. Only for single use virtual cards the CVC2 is returned (only in response to `POST` request).
    */
    'cvc'?: string;
    'deliveryContact'?: Contact;
    'expiration'?: Expiry;
    /**
    * The form factor of the card. Possible values: **virtual**, **physical**.
    */
    'formFactor': Card.FormFactorEnum;
    /**
    * Last last four digits of the card number.
    */
    'lastFour'?: string;
    /**
    * The primary account number of the card. >By default the primary account number will be masked. Only for single use virtual cards the full primary account number is returned.
    */
    'number': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "authentication",
            "baseName": "authentication",
            "type": "Authentication"
        },
        {
            "name": "bin",
            "baseName": "bin",
            "type": "string"
        },
        {
            "name": "brand",
            "baseName": "brand",
            "type": "string"
        },
        {
            "name": "brandVariant",
            "baseName": "brandVariant",
            "type": "string"
        },
        {
            "name": "cardholderName",
            "baseName": "cardholderName",
            "type": "string"
        },
        {
            "name": "configuration",
            "baseName": "configuration",
            "type": "CardConfiguration"
        },
        {
            "name": "cvc",
            "baseName": "cvc",
            "type": "string"
        },
        {
            "name": "deliveryContact",
            "baseName": "deliveryContact",
            "type": "Contact"
        },
        {
            "name": "expiration",
            "baseName": "expiration",
            "type": "Expiry"
        },
        {
            "name": "formFactor",
            "baseName": "formFactor",
            "type": "Card.FormFactorEnum"
        },
        {
            "name": "lastFour",
            "baseName": "lastFour",
            "type": "string"
        },
        {
            "name": "number",
            "baseName": "number",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Card.attributeTypeMap;
    }
}

export namespace Card {
    export enum FormFactorEnum {
        Physical = <any> 'physical',
        Unknown = <any> 'unknown',
        Virtual = <any> 'virtual'
    }
}
