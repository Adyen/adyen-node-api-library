/**
 * Issuing: Balance Platform API
 * Adyen Issuing lets you create and issue cards using the Balance Platform API. Use the API to onboard users as account holders in your balance platform, create balance accounts, and issue cards.  For more information, refer to [Adyen Issuing](https://docs.adyen.com/issuing).   ## Authentication To connect to the Balance Platform API, you must use your basic authentication credentials. To create your web service user and generate credentials, refer to [API credentials](https://docs.adyen.com/development-resources/api-credentials#basic-authentication). Then use the credentials to authenticate your request, for example:  ``` curl -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new basic authentication credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Balance Platform API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/bcl/v1 ```
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Amount } from './amount';
import { TransactionRuleInterval } from './transactionRuleInterval';

export class TransactionRuleInfo {
    'amount'?: Amount;
    /**
    * The name of the balance platform to which the rule applies.
    */
    'balancePlatformId'?: string;
    /**
    * List of countries to which the rule applies. For example: **[\"NL\",\"US\"]**.
    */
    'countries'?: Array<string>;
    /**
    * Your description for the transaction rule, maximum 300 characters.
    */
    'description': string;
    /**
    * The date when the rule will stop being evaluated, in ISO 8601 extended offset date-time format.  For example, **2020-12-18T10:15:30+01:00**.  If not provided when creating a transaction rule, the rule will be evaluated until the rule status is set to **inactive**.
    */
    'endDate'?: string;
    /**
    * List of point-of-sale entry modes to which the rule applies.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **token**, **server**, **barcode**, **ocr**.
    */
    'entryModes'?: Array<TransactionRuleInfo.EntryModesEnum>;
    'interval': TransactionRuleInterval;
    /**
    * The maximum number of transactions that a payment instrument can be used for in a given period specified in the `interval.type`.
    */
    'maxTransactions'?: number;
    /**
    * List of Merchant Category Codes (MCCs) to which the rule applies.
    */
    'mccs'?: Array<string>;
    /**
    * The ID of the payment instrument group to which the rule applies.
    */
    'paymentInstrumentGroupId'?: string;
    /**
    * The ID of the payment instrument to which the rule applies.
    */
    'paymentInstrumentId'?: string;
    /**
    * List of processing types to which the rule applies.  Possible values: **atmWithdraw**, **pos**, **ecommerce**, **moto**, **recurring**, **balanceInquiry**.
    */
    'processingTypes'?: Array<TransactionRuleInfo.ProcessingTypesEnum>;
    /**
    * Your reference for the transaction rule, maximum 150 characters.
    */
    'reference': string;
    /**
    * The date when the rule will start to be evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.  If not provided when creating a transaction rule, the `startDate` is set to the date when the rule status is set to **active**.   
    */
    'startDate'?: string;
    /**
    * The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created  with an **active** status.   Possible values: **active**, **inactive**.
    */
    'status'?: TransactionRuleInfo.StatusEnum;
    /**
    * The type of conditions provided in the rule.  Possible values:   * **allowList** - The rule provides categories (such as country and MCC) where payments must be allowed.   * **blockList** - The rule provides categories (such as country and MCC) where payments must be blocked.   * **maxUsage** - The rule sets limits for the maximum amount or maximum number of transactions for the lifetime of the payment instrument.   * **velocity** - The rule sets limits for the maximum amount or maximum number of transactions for a given time interval. 
    */
    'type': TransactionRuleInfo.TypeEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "amount",
            "baseName": "amount",
            "type": "Amount"
        },
        {
            "name": "balancePlatformId",
            "baseName": "balancePlatformId",
            "type": "string"
        },
        {
            "name": "countries",
            "baseName": "countries",
            "type": "Array<string>"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "endDate",
            "baseName": "endDate",
            "type": "string"
        },
        {
            "name": "entryModes",
            "baseName": "entryModes",
            "type": "Array<TransactionRuleInfo.EntryModesEnum>"
        },
        {
            "name": "interval",
            "baseName": "interval",
            "type": "TransactionRuleInterval"
        },
        {
            "name": "maxTransactions",
            "baseName": "maxTransactions",
            "type": "number"
        },
        {
            "name": "mccs",
            "baseName": "mccs",
            "type": "Array<string>"
        },
        {
            "name": "paymentInstrumentGroupId",
            "baseName": "paymentInstrumentGroupId",
            "type": "string"
        },
        {
            "name": "paymentInstrumentId",
            "baseName": "paymentInstrumentId",
            "type": "string"
        },
        {
            "name": "processingTypes",
            "baseName": "processingTypes",
            "type": "Array<TransactionRuleInfo.ProcessingTypesEnum>"
        },
        {
            "name": "reference",
            "baseName": "reference",
            "type": "string"
        },
        {
            "name": "startDate",
            "baseName": "startDate",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "TransactionRuleInfo.StatusEnum"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "TransactionRuleInfo.TypeEnum"
        }    ];

    static getAttributeTypeMap() {
        return TransactionRuleInfo.attributeTypeMap;
    }
}

export namespace TransactionRuleInfo {
    export enum EntryModesEnum {
        Barcode = <any> 'barcode',
        Chip = <any> 'chip',
        Cof = <any> 'cof',
        Contactless = <any> 'contactless',
        Magstripe = <any> 'magstripe',
        Manual = <any> 'manual',
        Ocr = <any> 'ocr',
        Server = <any> 'server',
        Token = <any> 'token',
        Unknown = <any> 'unknown'
    }
    export enum ProcessingTypesEnum {
        AtmWithdraw = <any> 'atmWithdraw',
        BalanceInquiry = <any> 'balanceInquiry',
        Ecommerce = <any> 'ecommerce',
        Moto = <any> 'moto',
        Pos = <any> 'pos',
        Recurring = <any> 'recurring',
        Unknown = <any> 'unknown'
    }
    export enum StatusEnum {
        Active = <any> 'Active',
        Inactive = <any> 'Inactive',
        Active = <any> 'active',
        Inactive = <any> 'inactive'
    }
    export enum TypeEnum {
        AllowList = <any> 'allowList',
        BlockList = <any> 'blockList',
        MaxUsage = <any> 'maxUsage',
        Velocity = <any> 'velocity'
    }
}
