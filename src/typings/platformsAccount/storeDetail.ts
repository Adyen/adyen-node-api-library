/**
 * Adyen for Platforms: Account API
 * The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and KYC-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/platforms). ## Authentication To connect to the Account API, you must use basic authentication credentials of your web service user. If you don\'t have one, contact the [Adyen Support Team](https://support.adyen.com/hc/en-us/requests/new). Then use its credentials to authenticate your request, for example:  ``` curl -U \"ws@MarketPlace.YourMarketPlace\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v6/createAccountHolder ```
 *
 * The version of the OpenAPI document: 6
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {ViasAddress} from './viasAddress';
import {ViasPhoneNumber} from './viasPhoneNumber';

export class StoreDetail {
    'address': ViasAddress;
    /**
    * The phone number of the store provided as a single string.  It will be handled as a landline phone.  Examples: \"0031 6 11 22 33 44\", \"+316/1122-3344\", \"(0031) 611223344\"
    */
    'fullPhoneNumber'?: string;
    /**
    * The merchant account to which the store belongs.
    */
    'merchantAccount': string;
    /**
    * The merchant category code (MCC) that classifies the business of the account holder.
    */
    'merchantCategoryCode': string;
    'phoneNumber'?: ViasPhoneNumber;
    /**
    * The sales channel. Possible values: **Ecommerce**, **POS**.
    */
    'shopperInteraction'?: StoreDetail.ShopperInteractionEnum;
    /**
    * The unique reference for the split configuration, returned when you configure splits in your Customer Area. When this is provided, the `virtualAccount` is also required. Adyen uses the configuration and the `virtualAccount` to split funds between accounts in your platform.
    */
    'splitConfigurationUUID'?: string;
    /**
    * The status of the store. Possible values: **Pending**, **Active**, **Inactive**, **InactiveWithModifications**, **Closed**.
    */
    'status'?: StoreDetail.StatusEnum;
    /**
    * Adyen-generated unique alphanumeric identifier (UUID) for the store, returned in the response when you create a store. Required when updating an existing store in an `/updateAccountHolder` request.
    */
    'store'?: string;
    /**
    * The name of the account holder\'s store, between  3 to 22 characters in length. This value will be shown in shopper statements.
    */
    'storeName'?: string;
    /**
    * Your unique identifier for the store, between 3 to 128 characters in length. This value will be shown as the store description in your Customer Area.
    */
    'storeReference': string;
    /**
    * The account holder\'s `accountCode` where the split amount will be sent. Required when you provide the `splitConfigurationUUID`.
    */
    'virtualAccount'?: string;
    /**
    * URL of the ecommerce store.
    */
    'webAddress'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "address",
            "baseName": "address",
            "type": "ViasAddress"
        },
        {
            "name": "fullPhoneNumber",
            "baseName": "fullPhoneNumber",
            "type": "string"
        },
        {
            "name": "merchantAccount",
            "baseName": "merchantAccount",
            "type": "string"
        },
        {
            "name": "merchantCategoryCode",
            "baseName": "merchantCategoryCode",
            "type": "string"
        },
        {
            "name": "phoneNumber",
            "baseName": "phoneNumber",
            "type": "ViasPhoneNumber"
        },
        {
            "name": "shopperInteraction",
            "baseName": "shopperInteraction",
            "type": "StoreDetail.ShopperInteractionEnum"
        },
        {
            "name": "splitConfigurationUUID",
            "baseName": "splitConfigurationUUID",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "StoreDetail.StatusEnum"
        },
        {
            "name": "store",
            "baseName": "store",
            "type": "string"
        },
        {
            "name": "storeName",
            "baseName": "storeName",
            "type": "string"
        },
        {
            "name": "storeReference",
            "baseName": "storeReference",
            "type": "string"
        },
        {
            "name": "virtualAccount",
            "baseName": "virtualAccount",
            "type": "string"
        },
        {
            "name": "webAddress",
            "baseName": "webAddress",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return StoreDetail.attributeTypeMap;
    }
}

export namespace StoreDetail {
    export enum ShopperInteractionEnum {
        Ecommerce = <any> 'Ecommerce',
        Pos = <any> 'POS'
    }
    export enum StatusEnum {
        Active = <any> 'Active',
        Closed = <any> 'Closed',
        Inactive = <any> 'Inactive',
        InactiveWithModifications = <any> 'InactiveWithModifications',
        Pending = <any> 'Pending'
    }
}
