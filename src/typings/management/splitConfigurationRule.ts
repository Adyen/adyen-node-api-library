/*
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import { SplitConfigurationLogic } from "./splitConfigurationLogic";


export class SplitConfigurationRule {
    /**
    * The card region condition that determines whether the [split logic](https://docs.adyen.com/api-explorer/Management/latest/post/merchants/(merchantId)/splitConfigurations#request-rules-splitLogic) applies to the transaction.  > This condition is in pilot phase, and not yet available for all platforms.  Possible values: * **domestic**: The card issuer and the store where the transaction is processed are registered in the same country. * **international**: The card issuer and the store where the transaction is processed are registered in different countries or regions. Includes all **interRegional** and **intraRegional** transactions. * **interRegional**: The card issuer and the store where the transaction is processed are registered in different regions. * **intraRegional**: The card issuer and the store where the transaction is processed are registered in different countries, but in the same region. * **ANY**: Applies to all transactions, regardless of the processing and issuing country/region.
    */
    "cardRegion"?: SplitConfigurationRule.CardRegionEnum;
    /**
    * The currency condition that defines whether the split logic applies. Its value must be a three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).
    */
    "currency": string;
    /**
    * The funding source of the payment method.  Possible values: * **credit** * **debit** * **prepaid** * **deferred_debit** * **charged** * **ANY**
    */
    "fundingSource": SplitConfigurationRule.FundingSourceEnum;
    /**
    * The payment method condition that defines whether the split logic applies.  Possible values: * [Payment method variant](https://docs.adyen.com/development-resources/paymentmethodvariant): Apply the split logic for a specific payment method. * **ANY**: Apply the split logic for all available payment methods.
    */
    "paymentMethod": string;
    /**
    * The unique identifier of the split configuration rule.
    */
    "ruleId"?: string;
    /**
    * The sales channel condition that defines whether the split logic applies.  Possible values: * **Ecommerce**: online transactions where the cardholder is present. * **ContAuth**: card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). * **Moto**: mail-order and telephone-order transactions where the customer is in contact with the merchant via email or telephone. * **POS**: point-of-sale transactions where the customer is physically present to make a payment using a secure payment terminal. * **ANY**: all sales channels.
    */
    "shopperInteraction": SplitConfigurationRule.ShopperInteractionEnum;
    "splitLogic": SplitConfigurationLogic;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "cardRegion",
            "baseName": "cardRegion",
            "type": "SplitConfigurationRule.CardRegionEnum",
            "format": ""
        },
        {
            "name": "currency",
            "baseName": "currency",
            "type": "string",
            "format": ""
        },
        {
            "name": "fundingSource",
            "baseName": "fundingSource",
            "type": "SplitConfigurationRule.FundingSourceEnum",
            "format": ""
        },
        {
            "name": "paymentMethod",
            "baseName": "paymentMethod",
            "type": "string",
            "format": ""
        },
        {
            "name": "ruleId",
            "baseName": "ruleId",
            "type": "string",
            "format": ""
        },
        {
            "name": "shopperInteraction",
            "baseName": "shopperInteraction",
            "type": "SplitConfigurationRule.ShopperInteractionEnum",
            "format": ""
        },
        {
            "name": "splitLogic",
            "baseName": "splitLogic",
            "type": "SplitConfigurationLogic",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return SplitConfigurationRule.attributeTypeMap;
    }

    public constructor() {
    }
}

export namespace SplitConfigurationRule {
    export enum CardRegionEnum {
        International = 'international',
        IntraRegional = 'intraRegional',
        InterRegional = 'interRegional',
        Domestic = 'domestic',
        Any = 'ANY'
    }
    export enum FundingSourceEnum {
        Charged = 'charged',
        Credit = 'credit',
        Debit = 'debit',
        DeferredDebit = 'deferred_debit',
        Prepaid = 'prepaid',
        Any = 'ANY'
    }
    export enum ShopperInteractionEnum {
        Ecommerce = 'Ecommerce',
        ContAuth = 'ContAuth',
        Moto = 'Moto',
        Pos = 'POS',
        Any = 'ANY'
    }
}
