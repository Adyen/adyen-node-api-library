/*
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import { AccelInfo } from "./accelInfo";
import { AffirmInfo } from "./affirmInfo";
import { AfterpayTouchInfo } from "./afterpayTouchInfo";
import { AmexInfo } from "./amexInfo";
import { ApplePayInfo } from "./applePayInfo";
import { BcmcInfo } from "./bcmcInfo";
import { CartesBancairesInfo } from "./cartesBancairesInfo";
import { ClearpayInfo } from "./clearpayInfo";
import { DinersInfo } from "./dinersInfo";
import { GenericPmWithTdiInfo } from "./genericPmWithTdiInfo";
import { GooglePayInfo } from "./googlePayInfo";
import { JCBInfo } from "./jCBInfo";
import { KlarnaInfo } from "./klarnaInfo";
import { MealVoucherFRInfo } from "./mealVoucherFRInfo";
import { NyceInfo } from "./nyceInfo";
import { PayByBankPlaidInfo } from "./payByBankPlaidInfo";
import { PayMeInfo } from "./payMeInfo";
import { PayPalInfo } from "./payPalInfo";
import { PayToInfo } from "./payToInfo";
import { PulseInfo } from "./pulseInfo";
import { SodexoInfo } from "./sodexoInfo";
import { SofortInfo } from "./sofortInfo";
import { StarInfo } from "./starInfo";
import { SwishInfo } from "./swishInfo";
import { TicketInfo } from "./ticketInfo";
import { TwintInfo } from "./twintInfo";
import { VippsInfo } from "./vippsInfo";
import { WeChatPayInfo } from "./weChatPayInfo";
import { WeChatPayPosInfo } from "./weChatPayPosInfo";


export class PaymentMethodSetupInfo {
    "accel"?: AccelInfo;
    "affirm"?: AffirmInfo;
    "afterpayTouch"?: AfterpayTouchInfo;
    "amex"?: AmexInfo;
    "applePay"?: ApplePayInfo;
    "bcmc"?: BcmcInfo;
    /**
    * The unique identifier of the business line. Required if you are a [platform model](https://docs.adyen.com/platforms).
    */
    "businessLineId"?: string;
    "cartesBancaires"?: CartesBancairesInfo;
    "clearpay"?: ClearpayInfo;
    /**
    * The list of countries where a payment method is available. By default, all countries supported by the payment method.
    */
    "countries"?: Array<string>;
    "cup"?: GenericPmWithTdiInfo;
    /**
    * The list of currencies that a payment method supports. By default, all currencies supported by the payment method.
    */
    "currencies"?: Array<string>;
    /**
    * The list of custom routing flags to route payment to the intended acquirer.
    */
    "customRoutingFlags"?: Array<string>;
    "diners"?: DinersInfo;
    "discover"?: GenericPmWithTdiInfo;
    "eft_directdebit_CA"?: GenericPmWithTdiInfo;
    "eftpos_australia"?: GenericPmWithTdiInfo;
    "girocard"?: GenericPmWithTdiInfo;
    "googlePay"?: GooglePayInfo;
    "ideal"?: GenericPmWithTdiInfo;
    "interac_card"?: GenericPmWithTdiInfo;
    "jcb"?: JCBInfo;
    "klarna"?: KlarnaInfo;
    "maestro"?: GenericPmWithTdiInfo;
    "mc"?: GenericPmWithTdiInfo;
    "mealVoucher_FR"?: MealVoucherFRInfo;
    "nyce"?: NyceInfo;
    "paybybank_plaid"?: PayByBankPlaidInfo;
    "payme"?: PayMeInfo;
    "paypal"?: PayPalInfo;
    "payto"?: PayToInfo;
    "pulse"?: PulseInfo;
    /**
    * Your reference for the payment method. Supported characters a-z, A-Z, 0-9.
    */
    "reference"?: string;
    /**
    * The sales channel. Required if the merchant account does not have a sales channel. When you provide this field, it overrides the default sales channel set on the merchant account.  Possible values: **eCommerce**, **pos**, **contAuth**, and **moto**. 
    */
    "shopperInteraction"?: PaymentMethodSetupInfo.ShopperInteractionEnum;
    "sodexo"?: SodexoInfo;
    "sofort"?: SofortInfo;
    "star"?: StarInfo;
    /**
    * The unique identifier of the store for which to configure the payment method, if any.
    */
    "storeIds"?: Array<string>;
    "swish"?: SwishInfo;
    "ticket"?: TicketInfo;
    "twint"?: TwintInfo;
    /**
    * Payment method [variant](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api).
    */
    "type": PaymentMethodSetupInfo.TypeEnum;
    "vipps"?: VippsInfo;
    "visa"?: GenericPmWithTdiInfo;
    "wechatpay"?: WeChatPayInfo;
    "wechatpay_pos"?: WeChatPayPosInfo;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "accel",
            "baseName": "accel",
            "type": "AccelInfo",
            "format": ""
        },
        {
            "name": "affirm",
            "baseName": "affirm",
            "type": "AffirmInfo",
            "format": ""
        },
        {
            "name": "afterpayTouch",
            "baseName": "afterpayTouch",
            "type": "AfterpayTouchInfo",
            "format": ""
        },
        {
            "name": "amex",
            "baseName": "amex",
            "type": "AmexInfo",
            "format": ""
        },
        {
            "name": "applePay",
            "baseName": "applePay",
            "type": "ApplePayInfo",
            "format": ""
        },
        {
            "name": "bcmc",
            "baseName": "bcmc",
            "type": "BcmcInfo",
            "format": ""
        },
        {
            "name": "businessLineId",
            "baseName": "businessLineId",
            "type": "string",
            "format": ""
        },
        {
            "name": "cartesBancaires",
            "baseName": "cartesBancaires",
            "type": "CartesBancairesInfo",
            "format": ""
        },
        {
            "name": "clearpay",
            "baseName": "clearpay",
            "type": "ClearpayInfo",
            "format": ""
        },
        {
            "name": "countries",
            "baseName": "countries",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "cup",
            "baseName": "cup",
            "type": "GenericPmWithTdiInfo",
            "format": ""
        },
        {
            "name": "currencies",
            "baseName": "currencies",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "customRoutingFlags",
            "baseName": "customRoutingFlags",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "diners",
            "baseName": "diners",
            "type": "DinersInfo",
            "format": ""
        },
        {
            "name": "discover",
            "baseName": "discover",
            "type": "GenericPmWithTdiInfo",
            "format": ""
        },
        {
            "name": "eft_directdebit_CA",
            "baseName": "eft_directdebit_CA",
            "type": "GenericPmWithTdiInfo",
            "format": ""
        },
        {
            "name": "eftpos_australia",
            "baseName": "eftpos_australia",
            "type": "GenericPmWithTdiInfo",
            "format": ""
        },
        {
            "name": "girocard",
            "baseName": "girocard",
            "type": "GenericPmWithTdiInfo",
            "format": ""
        },
        {
            "name": "googlePay",
            "baseName": "googlePay",
            "type": "GooglePayInfo",
            "format": ""
        },
        {
            "name": "ideal",
            "baseName": "ideal",
            "type": "GenericPmWithTdiInfo",
            "format": ""
        },
        {
            "name": "interac_card",
            "baseName": "interac_card",
            "type": "GenericPmWithTdiInfo",
            "format": ""
        },
        {
            "name": "jcb",
            "baseName": "jcb",
            "type": "JCBInfo",
            "format": ""
        },
        {
            "name": "klarna",
            "baseName": "klarna",
            "type": "KlarnaInfo",
            "format": ""
        },
        {
            "name": "maestro",
            "baseName": "maestro",
            "type": "GenericPmWithTdiInfo",
            "format": ""
        },
        {
            "name": "mc",
            "baseName": "mc",
            "type": "GenericPmWithTdiInfo",
            "format": ""
        },
        {
            "name": "mealVoucher_FR",
            "baseName": "mealVoucher_FR",
            "type": "MealVoucherFRInfo",
            "format": ""
        },
        {
            "name": "nyce",
            "baseName": "nyce",
            "type": "NyceInfo",
            "format": ""
        },
        {
            "name": "paybybank_plaid",
            "baseName": "paybybank_plaid",
            "type": "PayByBankPlaidInfo",
            "format": ""
        },
        {
            "name": "payme",
            "baseName": "payme",
            "type": "PayMeInfo",
            "format": ""
        },
        {
            "name": "paypal",
            "baseName": "paypal",
            "type": "PayPalInfo",
            "format": ""
        },
        {
            "name": "payto",
            "baseName": "payto",
            "type": "PayToInfo",
            "format": ""
        },
        {
            "name": "pulse",
            "baseName": "pulse",
            "type": "PulseInfo",
            "format": ""
        },
        {
            "name": "reference",
            "baseName": "reference",
            "type": "string",
            "format": ""
        },
        {
            "name": "shopperInteraction",
            "baseName": "shopperInteraction",
            "type": "PaymentMethodSetupInfo.ShopperInteractionEnum",
            "format": ""
        },
        {
            "name": "sodexo",
            "baseName": "sodexo",
            "type": "SodexoInfo",
            "format": ""
        },
        {
            "name": "sofort",
            "baseName": "sofort",
            "type": "SofortInfo",
            "format": ""
        },
        {
            "name": "star",
            "baseName": "star",
            "type": "StarInfo",
            "format": ""
        },
        {
            "name": "storeIds",
            "baseName": "storeIds",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "swish",
            "baseName": "swish",
            "type": "SwishInfo",
            "format": ""
        },
        {
            "name": "ticket",
            "baseName": "ticket",
            "type": "TicketInfo",
            "format": ""
        },
        {
            "name": "twint",
            "baseName": "twint",
            "type": "TwintInfo",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "PaymentMethodSetupInfo.TypeEnum",
            "format": ""
        },
        {
            "name": "vipps",
            "baseName": "vipps",
            "type": "VippsInfo",
            "format": ""
        },
        {
            "name": "visa",
            "baseName": "visa",
            "type": "GenericPmWithTdiInfo",
            "format": ""
        },
        {
            "name": "wechatpay",
            "baseName": "wechatpay",
            "type": "WeChatPayInfo",
            "format": ""
        },
        {
            "name": "wechatpay_pos",
            "baseName": "wechatpay_pos",
            "type": "WeChatPayPosInfo",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return PaymentMethodSetupInfo.attributeTypeMap;
    }

    public constructor() {
    }
}

export namespace PaymentMethodSetupInfo {
    export enum ShopperInteractionEnum {
        ECommerce = 'eCommerce',
        Pos = 'pos',
        Moto = 'moto',
        ContAuth = 'contAuth'
    }
    export enum TypeEnum {
        Accel = 'accel',
        Ach = 'ach',
        Affirm = 'affirm',
        Afterpaytouch = 'afterpaytouch',
        Alelo = 'alelo',
        Alipay = 'alipay',
        AlipayHk = 'alipay_hk',
        AlipayWap = 'alipay_wap',
        Amex = 'amex',
        Applepay = 'applepay',
        BaneseCard = 'banese_card',
        BaneseCardCredit = 'banese_card_credit',
        BaneseCardDebit = 'banese_card_debit',
        BaneseCardPrepaid = 'banese_card_prepaid',
        Bcmc = 'bcmc',
        Blik = 'blik',
        Cartebancaire = 'cartebancaire',
        Clearpay = 'clearpay',
        Clicktopay = 'clicktopay',
        Credtodos = 'credtodos',
        CredtodosPrivateCredit = 'credtodos_private_credit',
        CredtodosPrivateDebit = 'credtodos_private_debit',
        Cup = 'cup',
        Diners = 'diners',
        DirectdebitGb = 'directdebit_GB',
        Discover = 'discover',
        EbankingFi = 'ebanking_FI',
        EftDirectdebitCa = 'eft_directdebit_CA',
        EftposAustralia = 'eftpos_australia',
        Elo = 'elo',
        Elocredit = 'elocredit',
        Elodebit = 'elodebit',
        Girocard = 'girocard',
        Googlepay = 'googlepay',
        Hiper = 'hiper',
        Hipercard = 'hipercard',
        Ideal = 'ideal',
        InteracCard = 'interac_card',
        Jcb = 'jcb',
        Klarna = 'klarna',
        KlarnaAccount = 'klarna_account',
        KlarnaPaynow = 'klarna_paynow',
        Maestro = 'maestro',
        Mbway = 'mbway',
        Mc = 'mc',
        Mcdebit = 'mcdebit',
        MealVoucherFr = 'mealVoucher_FR',
        Mobilepay = 'mobilepay',
        Multibanco = 'multibanco',
        Nyce = 'nyce',
        OnlineBankingPl = 'onlineBanking_PL',
        Paybybank = 'paybybank',
        PaybybankPlaid = 'paybybank_plaid',
        Payme = 'payme',
        PaymePos = 'payme_pos',
        Paynow = 'paynow',
        PaynowPos = 'paynow_pos',
        Paypal = 'paypal',
        Payto = 'payto',
        Pulse = 'pulse',
        Sodexo = 'sodexo',
        Star = 'star',
        Swish = 'swish',
        Ticket = 'ticket',
        TodoGiftcard = 'todo_giftcard',
        Trustly = 'trustly',
        Twint = 'twint',
        TwintPos = 'twint_pos',
        UpBrazilCredit = 'up_brazil_credit',
        ValeRefeicao = 'vale_refeicao',
        ValeRefeicaoPrepaid = 'vale_refeicao_prepaid',
        Vipps = 'vipps',
        Visa = 'visa',
        Visadebit = 'visadebit',
        Vpay = 'vpay',
        Wechatpay = 'wechatpay',
        WechatpayPos = 'wechatpay_pos'
    }
}
