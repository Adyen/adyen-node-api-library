/*
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */


export * from './additionalCommission';
export * from './additionalSettings';
export * from './additionalSettingsResponse';
export * from './address';
export * from './afterpayTouchInfo';
export * from './allowedOrigin';
export * from './allowedOriginsResponse';
export * from './amount';
export * from './androidApp';
export * from './androidAppsResponse';
export * from './androidCertificate';
export * from './androidCertificatesResponse';
export * from './apiCredential';
export * from './apiCredentialLinks';
export * from './applePayInfo';
export * from './bcmcInfo';
export * from './billingEntitiesResponse';
export * from './billingEntity';
export * from './cardholderReceipt';
export * from './cartesBancairesInfo';
export * from './clearpayInfo';
export * from './commission';
export * from './company';
export * from './companyApiCredential';
export * from './companyLinks';
export * from './companyUser';
export * from './configuration';
export * from './connectivity';
export * from './contact';
export * from './createAllowedOriginRequest';
export * from './createApiCredentialResponse';
export * from './createCompanyApiCredentialRequest';
export * from './createCompanyApiCredentialResponse';
export * from './createCompanyUserRequest';
export * from './createCompanyUserResponse';
export * from './createCompanyWebhookRequest';
export * from './createMerchantApiCredentialRequest';
export * from './createMerchantRequest';
export * from './createMerchantResponse';
export * from './createMerchantUserRequest';
export * from './createMerchantWebhookRequest';
export * from './createUserResponse';
export * from './currency';
export * from './customNotification';
export * from './dataCenter';
export * from './eventUrl';
export * from './externalTerminalAction';
export * from './generateApiKeyResponse';
export * from './generateClientKeyResponse';
export * from './generateHmacKeyResponse';
export * from './genericPmWithTdiInfo';
export * from './giroPayInfo';
export * from './googlePayInfo';
export * from './gratuity';
export * from './hardware';
export * from './idName';
export * from './installAndroidAppDetails';
export * from './installAndroidCertificateDetails';
export * from './invalidField';
export * from './invalidFieldWrapper';
export * from './jSONObject';
export * from './jSONPath';
export * from './jSONPathWrapper';
export * from './key';
export * from './klarnaInfo';
export * from './links';
export * from './linksElement';
export * from './listCompanyApiCredentialsResponse';
export * from './listCompanyResponse';
export * from './listCompanyUsersResponse';
export * from './listExternalTerminalActionsResponse';
export * from './listMerchantApiCredentialsResponse';
export * from './listMerchantResponse';
export * from './listMerchantUsersResponse';
export * from './listStoresResponse';
export * from './listTerminalsResponse';
export * from './listWebhooksResponse';
export * from './logo';
export * from './meApiCredential';
export * from './mealVoucherFRInfo';
export * from './merchant';
export * from './merchantLinks';
export * from './minorUnitsMonetaryValue';
export * from './modelFile';
export * from './name';
export * from './name2';
export * from './nexo';
export * from './notification';
export * from './notificationUrl';
export * from './offlineProcessing';
export * from './opi';
export * from './orderItem';
export * from './paginationLinks';
export * from './passcodes';
export * from './payAtTable';
export * from './payPalInfo';
export * from './payment';
export * from './paymentMethod';
export * from './paymentMethodResponse';
export * from './paymentMethodSetupInfo';
export * from './paymentMethodWrapper';
export * from './payoutSettings';
export * from './payoutSettingsRequest';
export * from './payoutSettingsResponse';
export * from './profile';
export * from './receiptOptions';
export * from './receiptPrinting';
export * from './releaseUpdateDetails';
export * from './requestActivationResponse';
export * from './restServiceError';
export * from './scheduleTerminalActionsRequest';
export * from './scheduleTerminalActionsResponse';
export * from './settings';
export * from './shippingLocation';
export * from './shippingLocationsResponse';
export * from './signature';
export * from './sofortInfo';
export * from './splitConfiguration';
export * from './splitConfigurationList';
export * from './splitConfigurationLogic';
export * from './splitConfigurationRule';
export * from './standalone';
export * from './store';
export * from './storeCreationRequest';
export * from './storeCreationWithMerchantCodeRequest';
export * from './storeLocation';
export * from './storeSplitConfiguration';
export * from './surcharge';
export * from './swishInfo';
export * from './terminal';
export * from './terminalActionScheduleDetail';
export * from './terminalModelsResponse';
export * from './terminalOrder';
export * from './terminalOrderRequest';
export * from './terminalOrdersResponse';
export * from './terminalProduct';
export * from './terminalProductPrice';
export * from './terminalProductsResponse';
export * from './terminalSettings';
export * from './testCompanyWebhookRequest';
export * from './testOutput';
export * from './testWebhookRequest';
export * from './testWebhookResponse';
export * from './timeouts';
export * from './transactionDescriptionInfo';
export * from './twintInfo';
export * from './uninstallAndroidAppDetails';
export * from './uninstallAndroidCertificateDetails';
export * from './updatableAddress';
export * from './updateCompanyApiCredentialRequest';
export * from './updateCompanyUserRequest';
export * from './updateCompanyWebhookRequest';
export * from './updateMerchantApiCredentialRequest';
export * from './updateMerchantUserRequest';
export * from './updateMerchantWebhookRequest';
export * from './updatePaymentMethodInfo';
export * from './updatePayoutSettingsRequest';
export * from './updateSplitConfigurationLogicRequest';
export * from './updateSplitConfigurationRequest';
export * from './updateSplitConfigurationRuleRequest';
export * from './updateStoreRequest';
export * from './url';
export * from './user';
export * from './vippsInfo';
export * from './webhook';
export * from './webhookLinks';
export * from './wifiProfiles';


import { AdditionalCommission } from './additionalCommission';
import { AdditionalSettings } from './additionalSettings';
import { AdditionalSettingsResponse } from './additionalSettingsResponse';
import { Address } from './address';
import { AfterpayTouchInfo } from './afterpayTouchInfo';
import { AllowedOrigin } from './allowedOrigin';
import { AllowedOriginsResponse } from './allowedOriginsResponse';
import { Amount } from './amount';
import { AndroidApp } from './androidApp';
import { AndroidAppsResponse } from './androidAppsResponse';
import { AndroidCertificate } from './androidCertificate';
import { AndroidCertificatesResponse } from './androidCertificatesResponse';
import { ApiCredential } from './apiCredential';
import { ApiCredentialLinks } from './apiCredentialLinks';
import { ApplePayInfo } from './applePayInfo';
import { BcmcInfo } from './bcmcInfo';
import { BillingEntitiesResponse } from './billingEntitiesResponse';
import { BillingEntity } from './billingEntity';
import { CardholderReceipt } from './cardholderReceipt';
import { CartesBancairesInfo } from './cartesBancairesInfo';
import { ClearpayInfo } from './clearpayInfo';
import { Commission } from './commission';
import { Company } from './company';
import { CompanyApiCredential } from './companyApiCredential';
import { CompanyLinks } from './companyLinks';
import { CompanyUser } from './companyUser';
import { Configuration } from './configuration';
import { Connectivity } from './connectivity';
import { Contact } from './contact';
import { CreateAllowedOriginRequest } from './createAllowedOriginRequest';
import { CreateApiCredentialResponse } from './createApiCredentialResponse';
import { CreateCompanyApiCredentialRequest } from './createCompanyApiCredentialRequest';
import { CreateCompanyApiCredentialResponse } from './createCompanyApiCredentialResponse';
import { CreateCompanyUserRequest } from './createCompanyUserRequest';
import { CreateCompanyUserResponse } from './createCompanyUserResponse';
import { CreateCompanyWebhookRequest } from './createCompanyWebhookRequest';
import { CreateMerchantApiCredentialRequest } from './createMerchantApiCredentialRequest';
import { CreateMerchantRequest } from './createMerchantRequest';
import { CreateMerchantResponse } from './createMerchantResponse';
import { CreateMerchantUserRequest } from './createMerchantUserRequest';
import { CreateMerchantWebhookRequest } from './createMerchantWebhookRequest';
import { CreateUserResponse } from './createUserResponse';
import { Currency } from './currency';
import { CustomNotification } from './customNotification';
import { DataCenter } from './dataCenter';
import { EventUrl } from './eventUrl';
import { ExternalTerminalAction } from './externalTerminalAction';
import { GenerateApiKeyResponse } from './generateApiKeyResponse';
import { GenerateClientKeyResponse } from './generateClientKeyResponse';
import { GenerateHmacKeyResponse } from './generateHmacKeyResponse';
import { GenericPmWithTdiInfo } from './genericPmWithTdiInfo';
import { GiroPayInfo } from './giroPayInfo';
import { GooglePayInfo } from './googlePayInfo';
import { Gratuity } from './gratuity';
import { Hardware } from './hardware';
import { IdName } from './idName';
import { InstallAndroidAppDetails } from './installAndroidAppDetails';
import { InstallAndroidCertificateDetails } from './installAndroidCertificateDetails';
import { InvalidField } from './invalidField';
import { InvalidFieldWrapper } from './invalidFieldWrapper';
import { JSONObject } from './jSONObject';
import { JSONPath } from './jSONPath';
import { JSONPathWrapper } from './jSONPathWrapper';
import { Key } from './key';
import { KlarnaInfo } from './klarnaInfo';
import { Links } from './links';
import { LinksElement } from './linksElement';
import { ListCompanyApiCredentialsResponse } from './listCompanyApiCredentialsResponse';
import { ListCompanyResponse } from './listCompanyResponse';
import { ListCompanyUsersResponse } from './listCompanyUsersResponse';
import { ListExternalTerminalActionsResponse } from './listExternalTerminalActionsResponse';
import { ListMerchantApiCredentialsResponse } from './listMerchantApiCredentialsResponse';
import { ListMerchantResponse } from './listMerchantResponse';
import { ListMerchantUsersResponse } from './listMerchantUsersResponse';
import { ListStoresResponse } from './listStoresResponse';
import { ListTerminalsResponse } from './listTerminalsResponse';
import { ListWebhooksResponse } from './listWebhooksResponse';
import { Logo } from './logo';
import { MeApiCredential } from './meApiCredential';
import { MealVoucherFRInfo } from './mealVoucherFRInfo';
import { Merchant } from './merchant';
import { MerchantLinks } from './merchantLinks';
import { MinorUnitsMonetaryValue } from './minorUnitsMonetaryValue';
import { ModelFile } from './modelFile';
import { Name } from './name';
import { Name2 } from './name2';
import { Nexo } from './nexo';
import { Notification } from './notification';
import { NotificationUrl } from './notificationUrl';
import { OfflineProcessing } from './offlineProcessing';
import { Opi } from './opi';
import { OrderItem } from './orderItem';
import { PaginationLinks } from './paginationLinks';
import { Passcodes } from './passcodes';
import { PayAtTable } from './payAtTable';
import { PayPalInfo } from './payPalInfo';
import { Payment } from './payment';
import { PaymentMethod } from './paymentMethod';
import { PaymentMethodResponse } from './paymentMethodResponse';
import { PaymentMethodSetupInfo } from './paymentMethodSetupInfo';
import { PaymentMethodWrapper } from './paymentMethodWrapper';
import { PayoutSettings } from './payoutSettings';
import { PayoutSettingsRequest } from './payoutSettingsRequest';
import { PayoutSettingsResponse } from './payoutSettingsResponse';
import { Profile } from './profile';
import { ReceiptOptions } from './receiptOptions';
import { ReceiptPrinting } from './receiptPrinting';
import { ReleaseUpdateDetails } from './releaseUpdateDetails';
import { RequestActivationResponse } from './requestActivationResponse';
import { RestServiceError } from './restServiceError';
import { ScheduleTerminalActionsRequest } from './scheduleTerminalActionsRequest';
import { ScheduleTerminalActionsResponse } from './scheduleTerminalActionsResponse';
import { Settings } from './settings';
import { ShippingLocation } from './shippingLocation';
import { ShippingLocationsResponse } from './shippingLocationsResponse';
import { Signature } from './signature';
import { SofortInfo } from './sofortInfo';
import { SplitConfiguration } from './splitConfiguration';
import { SplitConfigurationList } from './splitConfigurationList';
import { SplitConfigurationLogic } from './splitConfigurationLogic';
import { SplitConfigurationRule } from './splitConfigurationRule';
import { Standalone } from './standalone';
import { Store } from './store';
import { StoreCreationRequest } from './storeCreationRequest';
import { StoreCreationWithMerchantCodeRequest } from './storeCreationWithMerchantCodeRequest';
import { StoreLocation } from './storeLocation';
import { StoreSplitConfiguration } from './storeSplitConfiguration';
import { Surcharge } from './surcharge';
import { SwishInfo } from './swishInfo';
import { Terminal } from './terminal';
import { TerminalActionScheduleDetail } from './terminalActionScheduleDetail';
import { TerminalModelsResponse } from './terminalModelsResponse';
import { TerminalOrder } from './terminalOrder';
import { TerminalOrderRequest } from './terminalOrderRequest';
import { TerminalOrdersResponse } from './terminalOrdersResponse';
import { TerminalProduct } from './terminalProduct';
import { TerminalProductPrice } from './terminalProductPrice';
import { TerminalProductsResponse } from './terminalProductsResponse';
import { TerminalSettings } from './terminalSettings';
import { TestCompanyWebhookRequest } from './testCompanyWebhookRequest';
import { TestOutput } from './testOutput';
import { TestWebhookRequest } from './testWebhookRequest';
import { TestWebhookResponse } from './testWebhookResponse';
import { Timeouts } from './timeouts';
import { TransactionDescriptionInfo } from './transactionDescriptionInfo';
import { TwintInfo } from './twintInfo';
import { UninstallAndroidAppDetails } from './uninstallAndroidAppDetails';
import { UninstallAndroidCertificateDetails } from './uninstallAndroidCertificateDetails';
import { UpdatableAddress } from './updatableAddress';
import { UpdateCompanyApiCredentialRequest } from './updateCompanyApiCredentialRequest';
import { UpdateCompanyUserRequest } from './updateCompanyUserRequest';
import { UpdateCompanyWebhookRequest } from './updateCompanyWebhookRequest';
import { UpdateMerchantApiCredentialRequest } from './updateMerchantApiCredentialRequest';
import { UpdateMerchantUserRequest } from './updateMerchantUserRequest';
import { UpdateMerchantWebhookRequest } from './updateMerchantWebhookRequest';
import { UpdatePaymentMethodInfo } from './updatePaymentMethodInfo';
import { UpdatePayoutSettingsRequest } from './updatePayoutSettingsRequest';
import { UpdateSplitConfigurationLogicRequest } from './updateSplitConfigurationLogicRequest';
import { UpdateSplitConfigurationRequest } from './updateSplitConfigurationRequest';
import { UpdateSplitConfigurationRuleRequest } from './updateSplitConfigurationRuleRequest';
import { UpdateStoreRequest } from './updateStoreRequest';
import { Url } from './url';
import { User } from './user';
import { VippsInfo } from './vippsInfo';
import { Webhook } from './webhook';
import { WebhookLinks } from './webhookLinks';
import { WifiProfiles } from './wifiProfiles';

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

let enumsMap: {[index: string]: any} = {
        "Connectivity.SimcardStatusEnum": Connectivity.SimcardStatusEnum,
        "CreateCompanyWebhookRequest.CommunicationFormatEnum": CreateCompanyWebhookRequest.CommunicationFormatEnum,
        "CreateCompanyWebhookRequest.FilterMerchantAccountTypeEnum": CreateCompanyWebhookRequest.FilterMerchantAccountTypeEnum,
        "CreateCompanyWebhookRequest.NetworkTypeEnum": CreateCompanyWebhookRequest.NetworkTypeEnum,
        "CreateCompanyWebhookRequest.SslVersionEnum": CreateCompanyWebhookRequest.SslVersionEnum,
        "CreateMerchantWebhookRequest.CommunicationFormatEnum": CreateMerchantWebhookRequest.CommunicationFormatEnum,
        "CreateMerchantWebhookRequest.NetworkTypeEnum": CreateMerchantWebhookRequest.NetworkTypeEnum,
        "CreateMerchantWebhookRequest.SslVersionEnum": CreateMerchantWebhookRequest.SslVersionEnum,
        "InstallAndroidAppDetails.TypeEnum": InstallAndroidAppDetails.TypeEnum,
        "InstallAndroidCertificateDetails.TypeEnum": InstallAndroidCertificateDetails.TypeEnum,
        "KlarnaInfo.RegionEnum": KlarnaInfo.RegionEnum,
        "PayAtTable.AuthenticationMethodEnum": PayAtTable.AuthenticationMethodEnum,
        "PaymentMethod.VerificationStatusEnum": PaymentMethod.VerificationStatusEnum,
        "PaymentMethodResponse.TypesWithErrorsEnum": PaymentMethodResponse.TypesWithErrorsEnum,
        "PaymentMethodSetupInfo.ShopperInteractionEnum": PaymentMethodSetupInfo.ShopperInteractionEnum,
        "PaymentMethodSetupInfo.TypeEnum": PaymentMethodSetupInfo.TypeEnum,
        "PayoutSettings.PriorityEnum": PayoutSettings.PriorityEnum,
        "PayoutSettings.VerificationStatusEnum": PayoutSettings.VerificationStatusEnum,
        "ReleaseUpdateDetails.TypeEnum": ReleaseUpdateDetails.TypeEnum,
        "SplitConfigurationLogic.ChargebackEnum": SplitConfigurationLogic.ChargebackEnum,
        "SplitConfigurationLogic.PaymentFeeEnum": SplitConfigurationLogic.PaymentFeeEnum,
        "SplitConfigurationLogic.RemainderEnum": SplitConfigurationLogic.RemainderEnum,
        "SplitConfigurationLogic.SurchargeEnum": SplitConfigurationLogic.SurchargeEnum,
        "SplitConfigurationLogic.TipEnum": SplitConfigurationLogic.TipEnum,
        "SplitConfigurationRule.FundingSourceEnum": SplitConfigurationRule.FundingSourceEnum,
        "SplitConfigurationRule.ShopperInteractionEnum": SplitConfigurationRule.ShopperInteractionEnum,
        "Store.StatusEnum": Store.StatusEnum,
        "TransactionDescriptionInfo.TypeEnum": TransactionDescriptionInfo.TypeEnum,
        "UninstallAndroidAppDetails.TypeEnum": UninstallAndroidAppDetails.TypeEnum,
        "UninstallAndroidCertificateDetails.TypeEnum": UninstallAndroidCertificateDetails.TypeEnum,
        "UpdateCompanyWebhookRequest.CommunicationFormatEnum": UpdateCompanyWebhookRequest.CommunicationFormatEnum,
        "UpdateCompanyWebhookRequest.FilterMerchantAccountTypeEnum": UpdateCompanyWebhookRequest.FilterMerchantAccountTypeEnum,
        "UpdateCompanyWebhookRequest.NetworkTypeEnum": UpdateCompanyWebhookRequest.NetworkTypeEnum,
        "UpdateCompanyWebhookRequest.SslVersionEnum": UpdateCompanyWebhookRequest.SslVersionEnum,
        "UpdateMerchantWebhookRequest.CommunicationFormatEnum": UpdateMerchantWebhookRequest.CommunicationFormatEnum,
        "UpdateMerchantWebhookRequest.NetworkTypeEnum": UpdateMerchantWebhookRequest.NetworkTypeEnum,
        "UpdateMerchantWebhookRequest.SslVersionEnum": UpdateMerchantWebhookRequest.SslVersionEnum,
        "UpdateSplitConfigurationLogicRequest.ChargebackEnum": UpdateSplitConfigurationLogicRequest.ChargebackEnum,
        "UpdateSplitConfigurationLogicRequest.PaymentFeeEnum": UpdateSplitConfigurationLogicRequest.PaymentFeeEnum,
        "UpdateSplitConfigurationLogicRequest.RemainderEnum": UpdateSplitConfigurationLogicRequest.RemainderEnum,
        "UpdateSplitConfigurationLogicRequest.SurchargeEnum": UpdateSplitConfigurationLogicRequest.SurchargeEnum,
        "UpdateSplitConfigurationLogicRequest.TipEnum": UpdateSplitConfigurationLogicRequest.TipEnum,
        "UpdateStoreRequest.StatusEnum": UpdateStoreRequest.StatusEnum,
        "Webhook.CommunicationFormatEnum": Webhook.CommunicationFormatEnum,
        "Webhook.FilterMerchantAccountTypeEnum": Webhook.FilterMerchantAccountTypeEnum,
        "Webhook.NetworkTypeEnum": Webhook.NetworkTypeEnum,
        "Webhook.SslVersionEnum": Webhook.SslVersionEnum,
}

let typeMap: {[index: string]: any} = {
    "AdditionalCommission": AdditionalCommission,
    "AdditionalSettings": AdditionalSettings,
    "AdditionalSettingsResponse": AdditionalSettingsResponse,
    "Address": Address,
    "AfterpayTouchInfo": AfterpayTouchInfo,
    "AllowedOrigin": AllowedOrigin,
    "AllowedOriginsResponse": AllowedOriginsResponse,
    "Amount": Amount,
    "AndroidApp": AndroidApp,
    "AndroidAppsResponse": AndroidAppsResponse,
    "AndroidCertificate": AndroidCertificate,
    "AndroidCertificatesResponse": AndroidCertificatesResponse,
    "ApiCredential": ApiCredential,
    "ApiCredentialLinks": ApiCredentialLinks,
    "ApplePayInfo": ApplePayInfo,
    "BcmcInfo": BcmcInfo,
    "BillingEntitiesResponse": BillingEntitiesResponse,
    "BillingEntity": BillingEntity,
    "CardholderReceipt": CardholderReceipt,
    "CartesBancairesInfo": CartesBancairesInfo,
    "ClearpayInfo": ClearpayInfo,
    "Commission": Commission,
    "Company": Company,
    "CompanyApiCredential": CompanyApiCredential,
    "CompanyLinks": CompanyLinks,
    "CompanyUser": CompanyUser,
    "Configuration": Configuration,
    "Connectivity": Connectivity,
    "Contact": Contact,
    "CreateAllowedOriginRequest": CreateAllowedOriginRequest,
    "CreateApiCredentialResponse": CreateApiCredentialResponse,
    "CreateCompanyApiCredentialRequest": CreateCompanyApiCredentialRequest,
    "CreateCompanyApiCredentialResponse": CreateCompanyApiCredentialResponse,
    "CreateCompanyUserRequest": CreateCompanyUserRequest,
    "CreateCompanyUserResponse": CreateCompanyUserResponse,
    "CreateCompanyWebhookRequest": CreateCompanyWebhookRequest,
    "CreateMerchantApiCredentialRequest": CreateMerchantApiCredentialRequest,
    "CreateMerchantRequest": CreateMerchantRequest,
    "CreateMerchantResponse": CreateMerchantResponse,
    "CreateMerchantUserRequest": CreateMerchantUserRequest,
    "CreateMerchantWebhookRequest": CreateMerchantWebhookRequest,
    "CreateUserResponse": CreateUserResponse,
    "Currency": Currency,
    "CustomNotification": CustomNotification,
    "DataCenter": DataCenter,
    "EventUrl": EventUrl,
    "ExternalTerminalAction": ExternalTerminalAction,
    "GenerateApiKeyResponse": GenerateApiKeyResponse,
    "GenerateClientKeyResponse": GenerateClientKeyResponse,
    "GenerateHmacKeyResponse": GenerateHmacKeyResponse,
    "GenericPmWithTdiInfo": GenericPmWithTdiInfo,
    "GiroPayInfo": GiroPayInfo,
    "GooglePayInfo": GooglePayInfo,
    "Gratuity": Gratuity,
    "Hardware": Hardware,
    "IdName": IdName,
    "InstallAndroidAppDetails": InstallAndroidAppDetails,
    "InstallAndroidCertificateDetails": InstallAndroidCertificateDetails,
    "InvalidField": InvalidField,
    "InvalidFieldWrapper": InvalidFieldWrapper,
    "JSONObject": JSONObject,
    "JSONPath": JSONPath,
    "JSONPathWrapper": JSONPathWrapper,
    "Key": Key,
    "KlarnaInfo": KlarnaInfo,
    "Links": Links,
    "LinksElement": LinksElement,
    "ListCompanyApiCredentialsResponse": ListCompanyApiCredentialsResponse,
    "ListCompanyResponse": ListCompanyResponse,
    "ListCompanyUsersResponse": ListCompanyUsersResponse,
    "ListExternalTerminalActionsResponse": ListExternalTerminalActionsResponse,
    "ListMerchantApiCredentialsResponse": ListMerchantApiCredentialsResponse,
    "ListMerchantResponse": ListMerchantResponse,
    "ListMerchantUsersResponse": ListMerchantUsersResponse,
    "ListStoresResponse": ListStoresResponse,
    "ListTerminalsResponse": ListTerminalsResponse,
    "ListWebhooksResponse": ListWebhooksResponse,
    "Logo": Logo,
    "MeApiCredential": MeApiCredential,
    "MealVoucherFRInfo": MealVoucherFRInfo,
    "Merchant": Merchant,
    "MerchantLinks": MerchantLinks,
    "MinorUnitsMonetaryValue": MinorUnitsMonetaryValue,
    "ModelFile": ModelFile,
    "Name": Name,
    "Name2": Name2,
    "Nexo": Nexo,
    "Notification": Notification,
    "NotificationUrl": NotificationUrl,
    "OfflineProcessing": OfflineProcessing,
    "Opi": Opi,
    "OrderItem": OrderItem,
    "PaginationLinks": PaginationLinks,
    "Passcodes": Passcodes,
    "PayAtTable": PayAtTable,
    "PayPalInfo": PayPalInfo,
    "Payment": Payment,
    "PaymentMethod": PaymentMethod,
    "PaymentMethodResponse": PaymentMethodResponse,
    "PaymentMethodSetupInfo": PaymentMethodSetupInfo,
    "PaymentMethodWrapper": PaymentMethodWrapper,
    "PayoutSettings": PayoutSettings,
    "PayoutSettingsRequest": PayoutSettingsRequest,
    "PayoutSettingsResponse": PayoutSettingsResponse,
    "Profile": Profile,
    "ReceiptOptions": ReceiptOptions,
    "ReceiptPrinting": ReceiptPrinting,
    "ReleaseUpdateDetails": ReleaseUpdateDetails,
    "RequestActivationResponse": RequestActivationResponse,
    "RestServiceError": RestServiceError,
    "ScheduleTerminalActionsRequest": ScheduleTerminalActionsRequest,
    "ScheduleTerminalActionsResponse": ScheduleTerminalActionsResponse,
    "Settings": Settings,
    "ShippingLocation": ShippingLocation,
    "ShippingLocationsResponse": ShippingLocationsResponse,
    "Signature": Signature,
    "SofortInfo": SofortInfo,
    "SplitConfiguration": SplitConfiguration,
    "SplitConfigurationList": SplitConfigurationList,
    "SplitConfigurationLogic": SplitConfigurationLogic,
    "SplitConfigurationRule": SplitConfigurationRule,
    "Standalone": Standalone,
    "Store": Store,
    "StoreCreationRequest": StoreCreationRequest,
    "StoreCreationWithMerchantCodeRequest": StoreCreationWithMerchantCodeRequest,
    "StoreLocation": StoreLocation,
    "StoreSplitConfiguration": StoreSplitConfiguration,
    "Surcharge": Surcharge,
    "SwishInfo": SwishInfo,
    "Terminal": Terminal,
    "TerminalActionScheduleDetail": TerminalActionScheduleDetail,
    "TerminalModelsResponse": TerminalModelsResponse,
    "TerminalOrder": TerminalOrder,
    "TerminalOrderRequest": TerminalOrderRequest,
    "TerminalOrdersResponse": TerminalOrdersResponse,
    "TerminalProduct": TerminalProduct,
    "TerminalProductPrice": TerminalProductPrice,
    "TerminalProductsResponse": TerminalProductsResponse,
    "TerminalSettings": TerminalSettings,
    "TestCompanyWebhookRequest": TestCompanyWebhookRequest,
    "TestOutput": TestOutput,
    "TestWebhookRequest": TestWebhookRequest,
    "TestWebhookResponse": TestWebhookResponse,
    "Timeouts": Timeouts,
    "TransactionDescriptionInfo": TransactionDescriptionInfo,
    "TwintInfo": TwintInfo,
    "UninstallAndroidAppDetails": UninstallAndroidAppDetails,
    "UninstallAndroidCertificateDetails": UninstallAndroidCertificateDetails,
    "UpdatableAddress": UpdatableAddress,
    "UpdateCompanyApiCredentialRequest": UpdateCompanyApiCredentialRequest,
    "UpdateCompanyUserRequest": UpdateCompanyUserRequest,
    "UpdateCompanyWebhookRequest": UpdateCompanyWebhookRequest,
    "UpdateMerchantApiCredentialRequest": UpdateMerchantApiCredentialRequest,
    "UpdateMerchantUserRequest": UpdateMerchantUserRequest,
    "UpdateMerchantWebhookRequest": UpdateMerchantWebhookRequest,
    "UpdatePaymentMethodInfo": UpdatePaymentMethodInfo,
    "UpdatePayoutSettingsRequest": UpdatePayoutSettingsRequest,
    "UpdateSplitConfigurationLogicRequest": UpdateSplitConfigurationLogicRequest,
    "UpdateSplitConfigurationRequest": UpdateSplitConfigurationRequest,
    "UpdateSplitConfigurationRuleRequest": UpdateSplitConfigurationRuleRequest,
    "UpdateStoreRequest": UpdateStoreRequest,
    "Url": Url,
    "User": User,
    "VippsInfo": VippsInfo,
    "Webhook": Webhook,
    "WebhookLinks": WebhookLinks,
    "WifiProfiles": WifiProfiles,
}

export class ObjectSerializer {
    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if(typeMap[discriminatorType]){
                        return discriminatorType; // use the type given in the discriminator
                    } else {
                        return expectedType; // discriminator did not map to a type
                    }
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.serialize(datum, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toISOString();
        } else if (type === "SaleToAcquirerData") {
            const dataString = JSON.stringify(data);
            return Buffer.from(dataString).toString("base64");
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // Get the actual type of this object
            type = this.findCorrectType(data, type);

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.deserialize(datum, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
