/*
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import { BankCategoryData } from './bankCategoryData';
import { InternalCategoryData } from './internalCategoryData';
import { IssuedCard } from './issuedCard';
import { PlatformPayment } from './platformPayment';
import { RelayedAuthorisationData } from './relayedAuthorisationData';
import { TransferNotificationValidationFact } from './transferNotificationValidationFact';

/**
* The relevant data according to the transfer category.
*/
export class TransferDataCategoryData {
    /**
    * The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.  Possible values:  * **regular**: for normal, low-value transactions.  * **fast**: a faster way to transfer funds, but the fees are higher. Recommended for high-priority, low-value transactions.  * **wire**: the fastest way to transfer funds, but this has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: for instant funds transfers in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: for high-value transfers to a recipient in a different country.  * **internal**: for transfers to an Adyen-issued business bank account (by bank account number/IBAN).
    */
    'priority'?: TransferDataCategoryData.PriorityEnum;
    /**
    * **bank**
    */
    'type'?: TransferDataCategoryData.TypeEnum = TransferDataCategoryData.TypeEnum.Bank;
    /**
    * The capture\'s merchant reference included in the transfer.
    */
    'modificationMerchantReference'?: string;
    /**
    * The capture reference included in the transfer.
    */
    'modificationPspReference'?: string;
    /**
    * The authorisation type. For example, **defaultAuthorisation**, **preAuthorisation**, **finalAuthorisation**
    */
    'authorisationType'?: string;
    /**
    * Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**.
    */
    'panEntryMode'?: TransferDataCategoryData.PanEntryModeEnum;
    /**
    * Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments.
    */
    'processingType'?: TransferDataCategoryData.ProcessingTypeEnum;
    'relayedAuthorisationData'?: RelayedAuthorisationData;
    /**
    * The identifier of the original payment. This ID is provided by the scheme and can be alphanumeric or numeric, depending on the scheme. The `schemeTraceID` should refer to an original `schemeUniqueTransactionID` provided in an earlier payment (not necessarily processed by Adyen). A `schemeTraceId` is typically available for authorization adjustments or recurring payments.
    */
    'schemeTraceId'?: string;
    /**
    * The unique identifier created by the scheme. This ID can be alphanumeric or numeric depending on the scheme.
    */
    'schemeUniqueTransactionId'?: string;
    /**
    * The evaluation of the validation facts. See [validation checks](https://docs.adyen.com/issuing/validation-checks) for more information.
    */
    'validationFacts'?: Array<TransferNotificationValidationFact>;
    /**
    * The payment\'s merchant reference included in the transfer.
    */
    'paymentMerchantReference'?: string;
    /**
    * Specifies the nature of the transfer. This parameter helps categorize transfers so you can reconcile transactions at a later time, using the Balance Platform Accounting Report for [marketplaces](https://docs.adyen.com/marketplaces/reports-and-fees/balance-platform-accounting-report/) or [platforms](https://docs.adyen.com/platforms/reports-and-fees/balance-platform-accounting-report/).  Possible values:  * **AcquiringFees**: for the acquiring fee incurred on a transaction.  * **AdyenCommission**: for the transaction fee due to Adyen under [blended rates](https://www.adyen.com/knowledge-hub/guides/payments-training-guide/get-the-best-from-your-card-processing).  * **AdyenFees**: for all the transaction fees due to Adyen. This is the sum of Adyen\'s commission and Adyen\'s markup.  * **AdyenMarkup**: for the transaction fee due to Adyen under [Interchange++ pricing](https://www.adyen.com/pricing).  * **BalanceAccount**: or the sale amount of a transaction.  * **Commission**: for your platform\'s commission on a transaction.  * **DCCPlatformCommission**: for the DCC Commission for the platform on a transaction.  * **Interchange**: for the interchange fee (fee paid to the issuer) incurred on a transaction.  * **PaymentFee**: for all of the transaction fees.  * **Remainder**: for the left over amount after currency conversion.  * **SchemeFee**: for the scheme fee incurred on a transaction. This is the sum of the interchange fees and the acquiring fees.  * **Surcharge**: for the surcharge paid by the customer on a transaction.  * **Tip**: for the tip paid by the customer.  * **TopUp**: for an incoming transfer to top up your user\'s balance account.  * **VAT**: for the Value Added Tax.
    */
    'platformPaymentType'?: TransferDataCategoryData.PlatformPaymentTypeEnum;
    /**
    * The payment reference included in the transfer.
    */
    'pspPaymentReference'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "priority",
            "baseName": "priority",
            "type": "TransferDataCategoryData.PriorityEnum"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "TransferDataCategoryData.TypeEnum"
        },
        {
            "name": "modificationMerchantReference",
            "baseName": "modificationMerchantReference",
            "type": "string"
        },
        {
            "name": "modificationPspReference",
            "baseName": "modificationPspReference",
            "type": "string"
        },
        {
            "name": "authorisationType",
            "baseName": "authorisationType",
            "type": "string"
        },
        {
            "name": "panEntryMode",
            "baseName": "panEntryMode",
            "type": "TransferDataCategoryData.PanEntryModeEnum"
        },
        {
            "name": "processingType",
            "baseName": "processingType",
            "type": "TransferDataCategoryData.ProcessingTypeEnum"
        },
        {
            "name": "relayedAuthorisationData",
            "baseName": "relayedAuthorisationData",
            "type": "RelayedAuthorisationData"
        },
        {
            "name": "schemeTraceId",
            "baseName": "schemeTraceId",
            "type": "string"
        },
        {
            "name": "schemeUniqueTransactionId",
            "baseName": "schemeUniqueTransactionId",
            "type": "string"
        },
        {
            "name": "validationFacts",
            "baseName": "validationFacts",
            "type": "Array<TransferNotificationValidationFact>"
        },
        {
            "name": "paymentMerchantReference",
            "baseName": "paymentMerchantReference",
            "type": "string"
        },
        {
            "name": "platformPaymentType",
            "baseName": "platformPaymentType",
            "type": "TransferDataCategoryData.PlatformPaymentTypeEnum"
        },
        {
            "name": "pspPaymentReference",
            "baseName": "pspPaymentReference",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return TransferDataCategoryData.attributeTypeMap;
    }
}

export namespace TransferDataCategoryData {
    export enum PriorityEnum {
        CrossBorder = <any> 'crossBorder',
        Fast = <any> 'fast',
        Instant = <any> 'instant',
        Internal = <any> 'internal',
        Regular = <any> 'regular',
        Wire = <any> 'wire'
    }
    export enum TypeEnum {
        Bank = <any> 'bank',
        Internal = <any> 'internal',
        IssuedCard = <any> 'issuedCard',
        PlatformPayment = <any> 'platformPayment'
    }
    export enum PanEntryModeEnum {
        Chip = <any> 'chip',
        Cof = <any> 'cof',
        Contactless = <any> 'contactless',
        Ecommerce = <any> 'ecommerce',
        Magstripe = <any> 'magstripe',
        Manual = <any> 'manual',
        Token = <any> 'token'
    }
    export enum ProcessingTypeEnum {
        AtmWithdraw = <any> 'atmWithdraw',
        BalanceInquiry = <any> 'balanceInquiry',
        Ecommerce = <any> 'ecommerce',
        Moto = <any> 'moto',
        Pos = <any> 'pos',
        PurchaseWithCashback = <any> 'purchaseWithCashback',
        Recurring = <any> 'recurring',
        Token = <any> 'token'
    }
    export enum PlatformPaymentTypeEnum {
        AcquiringFees = <any> 'AcquiringFees',
        AdyenCommission = <any> 'AdyenCommission',
        AdyenFees = <any> 'AdyenFees',
        AdyenMarkup = <any> 'AdyenMarkup',
        BalanceAccount = <any> 'BalanceAccount',
        Commission = <any> 'Commission',
        DccPlatformCommission = <any> 'DCCPlatformCommission',
        Default = <any> 'Default',
        Interchange = <any> 'Interchange',
        PaymentFee = <any> 'PaymentFee',
        Remainder = <any> 'Remainder',
        SchemeFee = <any> 'SchemeFee',
        Surcharge = <any> 'Surcharge',
        Tip = <any> 'Tip',
        TopUp = <any> 'TopUp',
        Vat = <any> 'VAT'
    }
}
