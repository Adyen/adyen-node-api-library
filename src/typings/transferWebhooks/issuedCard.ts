/*
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import { RelayedAuthorisationData } from './relayedAuthorisationData';
import { TransferNotificationValidationFact } from './transferNotificationValidationFact';

export class IssuedCard {
    /**
    * The authorisation type. For example, **defaultAuthorisation**, **preAuthorisation**, **finalAuthorisation**
    */
    'authorisationType'?: string;
    /**
    * Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**.
    */
    'panEntryMode'?: IssuedCard.PanEntryModeEnum;
    /**
    * Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments.
    */
    'processingType'?: IssuedCard.ProcessingTypeEnum;
    'relayedAuthorisationData'?: RelayedAuthorisationData;
    /**
    * The identifier of the original payment. This ID is provided by the scheme and can be alphanumeric or numeric, depending on the scheme. The `schemeTraceID` should refer to an original `schemeUniqueTransactionID` provided in an earlier payment (not necessarily processed by Adyen). A `schemeTraceId` is typically available for authorization adjustments or recurring payments.
    */
    'schemeTraceId'?: string;
    /**
    * The unique identifier created by the scheme. This ID can be alphanumeric or numeric depending on the scheme.
    */
    'schemeUniqueTransactionId'?: string;
    /**
    * **issuedCard**
    */
    'type'?: IssuedCard.TypeEnum = IssuedCard.TypeEnum.IssuedCard;
    /**
    * The evaluation of the validation facts. See [validation checks](https://docs.adyen.com/issuing/validation-checks) for more information.
    */
    'validationFacts'?: Array<TransferNotificationValidationFact>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "authorisationType",
            "baseName": "authorisationType",
            "type": "string"
        },
        {
            "name": "panEntryMode",
            "baseName": "panEntryMode",
            "type": "IssuedCard.PanEntryModeEnum"
        },
        {
            "name": "processingType",
            "baseName": "processingType",
            "type": "IssuedCard.ProcessingTypeEnum"
        },
        {
            "name": "relayedAuthorisationData",
            "baseName": "relayedAuthorisationData",
            "type": "RelayedAuthorisationData"
        },
        {
            "name": "schemeTraceId",
            "baseName": "schemeTraceId",
            "type": "string"
        },
        {
            "name": "schemeUniqueTransactionId",
            "baseName": "schemeUniqueTransactionId",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "IssuedCard.TypeEnum"
        },
        {
            "name": "validationFacts",
            "baseName": "validationFacts",
            "type": "Array<TransferNotificationValidationFact>"
        }    ];

    static getAttributeTypeMap() {
        return IssuedCard.attributeTypeMap;
    }
}

export namespace IssuedCard {
    export enum PanEntryModeEnum {
        Chip = <any> 'chip',
        Cof = <any> 'cof',
        Contactless = <any> 'contactless',
        Ecommerce = <any> 'ecommerce',
        Magstripe = <any> 'magstripe',
        Manual = <any> 'manual',
        Token = <any> 'token'
    }
    export enum ProcessingTypeEnum {
        AtmWithdraw = <any> 'atmWithdraw',
        BalanceInquiry = <any> 'balanceInquiry',
        Ecommerce = <any> 'ecommerce',
        Moto = <any> 'moto',
        Pos = <any> 'pos',
        PurchaseWithCashback = <any> 'purchaseWithCashback',
        Recurring = <any> 'recurring',
        Token = <any> 'token'
    }
    export enum TypeEnum {
        IssuedCard = <any> 'issuedCard'
    }
}
