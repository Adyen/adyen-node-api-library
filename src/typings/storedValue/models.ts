/*
 * The version of the OpenAPI document: v46
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */


export * from './amount';
export * from './serviceError';
export * from './storedValueBalanceCheckRequest';
export * from './storedValueBalanceCheckResponse';
export * from './storedValueBalanceMergeRequest';
export * from './storedValueBalanceMergeResponse';
export * from './storedValueIssueRequest';
export * from './storedValueIssueResponse';
export * from './storedValueLoadRequest';
export * from './storedValueLoadResponse';
export * from './storedValueStatusChangeRequest';
export * from './storedValueStatusChangeResponse';
export * from './storedValueVoidRequest';
export * from './storedValueVoidResponse';


import { Amount } from './amount';
import { ServiceError } from './serviceError';
import { StoredValueBalanceCheckRequest } from './storedValueBalanceCheckRequest';
import { StoredValueBalanceCheckResponse } from './storedValueBalanceCheckResponse';
import { StoredValueBalanceMergeRequest } from './storedValueBalanceMergeRequest';
import { StoredValueBalanceMergeResponse } from './storedValueBalanceMergeResponse';
import { StoredValueIssueRequest } from './storedValueIssueRequest';
import { StoredValueIssueResponse } from './storedValueIssueResponse';
import { StoredValueLoadRequest } from './storedValueLoadRequest';
import { StoredValueLoadResponse } from './storedValueLoadResponse';
import { StoredValueStatusChangeRequest } from './storedValueStatusChangeRequest';
import { StoredValueStatusChangeResponse } from './storedValueStatusChangeResponse';
import { StoredValueVoidRequest } from './storedValueVoidRequest';
import { StoredValueVoidResponse } from './storedValueVoidResponse';

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

let enumsMap: {[index: string]: any} = {
        "StoredValueBalanceCheckRequest.ShopperInteractionEnum": StoredValueBalanceCheckRequest.ShopperInteractionEnum,
        "StoredValueBalanceCheckResponse.ResultCodeEnum": StoredValueBalanceCheckResponse.ResultCodeEnum,
        "StoredValueBalanceMergeRequest.ShopperInteractionEnum": StoredValueBalanceMergeRequest.ShopperInteractionEnum,
        "StoredValueBalanceMergeResponse.ResultCodeEnum": StoredValueBalanceMergeResponse.ResultCodeEnum,
        "StoredValueIssueRequest.ShopperInteractionEnum": StoredValueIssueRequest.ShopperInteractionEnum,
        "StoredValueIssueResponse.ResultCodeEnum": StoredValueIssueResponse.ResultCodeEnum,
        "StoredValueLoadRequest.LoadTypeEnum": StoredValueLoadRequest.LoadTypeEnum,
        "StoredValueLoadRequest.ShopperInteractionEnum": StoredValueLoadRequest.ShopperInteractionEnum,
        "StoredValueLoadResponse.ResultCodeEnum": StoredValueLoadResponse.ResultCodeEnum,
        "StoredValueStatusChangeRequest.ShopperInteractionEnum": StoredValueStatusChangeRequest.ShopperInteractionEnum,
        "StoredValueStatusChangeRequest.StatusEnum": StoredValueStatusChangeRequest.StatusEnum,
        "StoredValueStatusChangeResponse.ResultCodeEnum": StoredValueStatusChangeResponse.ResultCodeEnum,
        "StoredValueVoidResponse.ResultCodeEnum": StoredValueVoidResponse.ResultCodeEnum,
}

let typeMap: {[index: string]: any} = {
    "Amount": Amount,
    "ServiceError": ServiceError,
    "StoredValueBalanceCheckRequest": StoredValueBalanceCheckRequest,
    "StoredValueBalanceCheckResponse": StoredValueBalanceCheckResponse,
    "StoredValueBalanceMergeRequest": StoredValueBalanceMergeRequest,
    "StoredValueBalanceMergeResponse": StoredValueBalanceMergeResponse,
    "StoredValueIssueRequest": StoredValueIssueRequest,
    "StoredValueIssueResponse": StoredValueIssueResponse,
    "StoredValueLoadRequest": StoredValueLoadRequest,
    "StoredValueLoadResponse": StoredValueLoadResponse,
    "StoredValueStatusChangeRequest": StoredValueStatusChangeRequest,
    "StoredValueStatusChangeResponse": StoredValueStatusChangeResponse,
    "StoredValueVoidRequest": StoredValueVoidRequest,
    "StoredValueVoidResponse": StoredValueVoidResponse,
}

export class ObjectSerializer {
    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if(typeMap[discriminatorType]){
                        return discriminatorType; // use the type given in the discriminator
                    } else {
                        return expectedType; // discriminator did not map to a type
                    }
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.serialize(datum, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toISOString();
        } else if (type === "SaleToAcquirerData") {
            const dataString = JSON.stringify(data);
            return Buffer.from(dataString).toString("base64");
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // Get the actual type of this object
            type = this.findCorrectType(data, type);

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.deserialize(datum, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
