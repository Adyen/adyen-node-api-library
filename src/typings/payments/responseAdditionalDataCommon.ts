/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication To connect to the Payments API, you must use your basic authentication credentials. For this, create your web service user, as described in [How to get the WS user password](https://docs.adyen.com/user-management/how-to-get-the-web-service-ws-user-password). Then use its credentials to authenticate your request, for example:  ``` curl -U \"ws@Company.YourCompany\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Payments API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v51/authorise ```
 *
 * The version of the OpenAPI document: 51
 * Contact: support@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export class ResponseAdditionalDataCommon {
    /**
    * The name of the Adyen acquirer account.  Example: PayPalSandbox_TestAcquirer > Only relevant for PayPal transactions.
    */
    'acquirerAccountCode'?: string;
    /**
    * The name of the acquirer processing the payment request.  Example: TestPmmAcquirer
    */
    'acquirerCode'?: string;
    /**
    * The reference number that can be used for reconciliation in case a non-Adyen acquirer is used for settlement.  Example: 7C9N3FNBKT9
    */
    'acquirerReference'?: string;
    /**
    * The Adyen alias of the card.  Example: H167852639363479
    */
    'alias'?: string;
    /**
    * The type of the card alias.  Example: Default
    */
    'aliasType'?: string;
    /**
    * Authorisation code: * When the payment is authorised successfully, this field holds the authorisation code for the payment. * When the payment is not authorised, this field is empty.  Example: 58747
    */
    'authCode'?: string;
    /**
    * The currency of the authorised amount, as a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).
    */
    'authorisedAmountCurrency'?: string;
    /**
    * Value of the amount authorised.  This amount is represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).
    */
    'authorisedAmountValue'?: string;
    /**
    * The AVS result code of the payment, which provides information about the outcome of the AVS check.  For possible values, see [AVS](https://docs.adyen.com/risk-management/configure-standard-risk-rules/consistency-rules#billing-address-does-not-match-cardholder-address-avs).
    */
    'avsResult'?: string;
    /**
    * Raw AVS result received from the acquirer, where available.  Example: D
    */
    'avsResultRaw'?: string;
    /**
    * BIC of a bank account.  Example: TESTNL01 > Only relevant for SEPA Direct Debit transactions.
    */
    'bic'?: string;
    /**
    * Supported for 3D Secure 2. The unique transaction identifier assigned by the DS to identify a single transaction.
    */
    'dsTransID'?: string;
    /**
    * The Electronic Commerce Indicator returned from the schemes for the 3DS payment session.  Example: 02
    */
    'eci'?: string;
    /**
    * The expiry date on the card.  Example: 6/2016 > Returned only in case of a card payment.
    */
    'expiryDate'?: string;
    /**
    * The currency of the extra amount charged due to additional amounts set in the skin used in the HPP payment request.  Example: EUR
    */
    'extraCostsCurrency'?: string;
    /**
    * The value of the extra amount charged due to additional amounts set in the skin used in the HPP payment request. The amount is in minor units.
    */
    'extraCostsValue'?: string;
    /**
    * The fraud score due to a particular fraud check. The fraud check name is found in the key of the key-value pair.
    */
    'fraudCheckItemNrFraudCheckname'?: string;
    /**
    * Information regarding the funding type of the card. The possible return values are: * CHARGE * CREDIT * DEBIT * PREPAID * PREPAID_RELOADABLE * PREPAID_NONRELOADABLE * DEFFERED_DEBIT > This functionality requires additional configuration on Adyen\'s end. To enable it, contact the Support Team.  For receiving this field in the notification, enable **Include Funding Source** in **Notifications** > **Additional settings**.
    */
    'fundingSource'?: string;
    /**
    * Indicates availability of funds.  Visa: * \"I\" (fast funds are supported) * \"N\" (otherwise)  Mastercard: * \"I\" (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list) * \"N\" (otherwise)  > Returned when you verify a card BIN or estimate costs, and only if payoutEligible is \"Y\" or \"D\".
    */
    'fundsAvailability'?: string;
    /**
    * Provides the more granular indication of why a transaction was refused. When a transaction fails with either \"Refused\", \"Restricted Card\", \"Transaction Not Permitted\", \"Not supported\" or \"DeclinedNon Generic\" refusalReason from the issuer, Adyen cross references its PSP-wide data for extra insight into the refusal reason. If an inferred refusal reason is available, the `inferredRefusalReason`, field is populated and the `refusalReason`, is set to \"Not Supported\".  Possible values: * 3D Secure Mandated * ContAuth Not Supported * CVC Mandated * Ecommerce Not Allowed * Crossborder Not Supported * Card Updated * Low Authrate Bin * Non-reloadable prepaid card
    */
    'inferredRefusalReason'?: string;
    /**
    * The issuing country of the card based on the BIN list that Adyen maintains.  Example: JP
    */
    'issuerCountry'?: string;
    /**
    * Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.
    */
    'networkTxReference'?: string;
    /**
    * The owner name of a bank account.  Only relevant for SEPA Direct Debit transactions.
    */
    'ownerName'?: string;
    /**
    * The Payment Account Reference (PAR) value links a network token with the underlying primary account number (PAN). The PAR value consists of 29 uppercase alphanumeric characters.
    */
    'paymentAccountReference'?: string;
    /**
    * The Adyen sub-variant of the payment method used for the payment request.  For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).  Example: mcpro
    */
    'paymentMethodVariant'?: string;
    /**
    * Indicates whether a payout is eligible or not for this card.  Visa: * \"Y\" * \"N\"  Mastercard: * \"Y\" (domestic and cross-border) * \"D\" (only domestic) * \"N\" (no MoneySend) * \"U\" (unknown)
    */
    'payoutEligible'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "acquirerAccountCode",
            "baseName": "acquirerAccountCode",
            "type": "string"
        },
        {
            "name": "acquirerCode",
            "baseName": "acquirerCode",
            "type": "string"
        },
        {
            "name": "acquirerReference",
            "baseName": "acquirerReference",
            "type": "string"
        },
        {
            "name": "alias",
            "baseName": "alias",
            "type": "string"
        },
        {
            "name": "aliasType",
            "baseName": "aliasType",
            "type": "string"
        },
        {
            "name": "authCode",
            "baseName": "authCode",
            "type": "string"
        },
        {
            "name": "authorisedAmountCurrency",
            "baseName": "authorisedAmountCurrency",
            "type": "string"
        },
        {
            "name": "authorisedAmountValue",
            "baseName": "authorisedAmountValue",
            "type": "string"
        },
        {
            "name": "avsResult",
            "baseName": "avsResult",
            "type": "string"
        },
        {
            "name": "avsResultRaw",
            "baseName": "avsResultRaw",
            "type": "string"
        },
        {
            "name": "bic",
            "baseName": "bic",
            "type": "string"
        },
        {
            "name": "dsTransID",
            "baseName": "dsTransID",
            "type": "string"
        },
        {
            "name": "eci",
            "baseName": "eci",
            "type": "string"
        },
        {
            "name": "expiryDate",
            "baseName": "expiryDate",
            "type": "string"
        },
        {
            "name": "extraCostsCurrency",
            "baseName": "extraCostsCurrency",
            "type": "string"
        },
        {
            "name": "extraCostsValue",
            "baseName": "extraCostsValue",
            "type": "string"
        },
        {
            "name": "fraudCheckItemNrFraudCheckname",
            "baseName": "fraudCheck-[itemNr]-[FraudCheckname]",
            "type": "string"
        },
        {
            "name": "fundingSource",
            "baseName": "fundingSource",
            "type": "string"
        },
        {
            "name": "fundsAvailability",
            "baseName": "fundsAvailability",
            "type": "string"
        },
        {
            "name": "inferredRefusalReason",
            "baseName": "inferredRefusalReason",
            "type": "string"
        },
        {
            "name": "issuerCountry",
            "baseName": "issuerCountry",
            "type": "string"
        },
        {
            "name": "networkTxReference",
            "baseName": "networkTxReference",
            "type": "string"
        },
        {
            "name": "ownerName",
            "baseName": "ownerName",
            "type": "string"
        },
        {
            "name": "paymentAccountReference",
            "baseName": "paymentAccountReference",
            "type": "string"
        },
        {
            "name": "paymentMethodVariant",
            "baseName": "paymentMethodVariant",
            "type": "string"
        },
        {
            "name": "payoutEligible",
            "baseName": "payoutEligible",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ResponseAdditionalDataCommon.attributeTypeMap;
    }
}

