/*
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import { AmountsResp } from './amountsResp';
import { CapturedSignature } from './capturedSignature';
import { CurrencyConversion } from './currencyConversion';
import { Instalment } from './instalment';
import { PaymentAcquirerData } from './paymentAcquirerData';
import { PaymentInstrumentData } from './paymentInstrumentData';
import { PaymentType } from './paymentType';

export class PaymentResult {
    'PaymentType'?: PaymentType;
    'PaymentInstrumentData'?: PaymentInstrumentData;
    'AmountsResp'?: AmountsResp;
    'Instalment'?: Instalment;
    'CurrencyConversion'?: Array<CurrencyConversion>;
    'MerchantOverrideFlag'?: boolean;
    'CapturedSignature'?: CapturedSignature;
    'ProtectedSignature'?: string;
    'CustomerLanguage'?: string;
    'OnlineFlag'?: boolean;
    'AuthenticationMethod'?: Array<PaymentResult.AuthenticationMethodEnum>;
    'ValidityDate'?: string;
    'PaymentAcquirerData'?: PaymentAcquirerData;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "PaymentType",
            "baseName": "PaymentType",
            "type": "PaymentType"
        },
        {
            "name": "PaymentInstrumentData",
            "baseName": "PaymentInstrumentData",
            "type": "PaymentInstrumentData"
        },
        {
            "name": "AmountsResp",
            "baseName": "AmountsResp",
            "type": "AmountsResp"
        },
        {
            "name": "Instalment",
            "baseName": "Instalment",
            "type": "Instalment"
        },
        {
            "name": "CurrencyConversion",
            "baseName": "CurrencyConversion",
            "type": "Array<CurrencyConversion>"
        },
        {
            "name": "MerchantOverrideFlag",
            "baseName": "MerchantOverrideFlag",
            "type": "boolean"
        },
        {
            "name": "CapturedSignature",
            "baseName": "CapturedSignature",
            "type": "CapturedSignature"
        },
        {
            "name": "ProtectedSignature",
            "baseName": "ProtectedSignature",
            "type": "string"
        },
        {
            "name": "CustomerLanguage",
            "baseName": "CustomerLanguage",
            "type": "string"
        },
        {
            "name": "OnlineFlag",
            "baseName": "OnlineFlag",
            "type": "boolean"
        },
        {
            "name": "AuthenticationMethod",
            "baseName": "AuthenticationMethod",
            "type": "Array<PaymentResult.AuthenticationMethodEnum>"
        },
        {
            "name": "ValidityDate",
            "baseName": "ValidityDate",
            "type": "string"
        },
        {
            "name": "PaymentAcquirerData",
            "baseName": "PaymentAcquirerData",
            "type": "PaymentAcquirerData"
        }    ];

    static getAttributeTypeMap() {
        return PaymentResult.attributeTypeMap;
    }
}

export namespace PaymentResult {
    export enum AuthenticationMethodEnum {
        Bypass = 'Bypass',
        ManualVerification = 'ManualVerification',
        MerchantAuthentication = 'MerchantAuthentication',
        OfflinePin = 'OfflinePIN',
        OnlinePin = 'OnlinePIN',
        PaperSignature = 'PaperSignature',
        SecureCertificate = 'SecureCertificate',
        SecureNoCertificate = 'SecureNoCertificate',
        SecuredChannel = 'SecuredChannel',
        SignatureCapture = 'SignatureCapture',
        UnknownMethod = 'UnknownMethod'
    }
}
