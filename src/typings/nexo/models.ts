/*
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */


export * from './abortRequest';
export * from './accountType';
export * from './adminRequest';
export * from './adminResponse';
export * from './alignment';
export * from './allowedProduct';
export * from './amountsReq';
export * from './amountsResp';
export * from './areaSize';
export * from './balanceInquiryRequest';
export * from './balanceInquiryResponse';
export * from './barcodeType';
export * from './capturedSignature';
export * from './cardAcquisitionRequest';
export * from './cardAcquisitionResponse';
export * from './cardAcquisitionTransaction';
export * from './cardData';
export * from './cardHolderPIN';
export * from './cardReaderAPDURequest';
export * from './cardReaderAPDUResponse';
export * from './cashHandlingDevice';
export * from './characterHeight';
export * from './characterStyle';
export * from './characterWidth';
export * from './checkData';
export * from './coinsOrBills';
export * from './color';
export * from './convertedAmount';
export * from './currencyConversion';
export * from './customerOrder';
export * from './device';
export * from './diagnosisRequest';
export * from './diagnosisResponse';
export * from './displayOutput';
export * from './displayRequest';
export * from './displayResponse';
export * from './documentQualifier';
export * from './enableServiceRequest';
export * from './enableServiceResponse';
export * from './errorCondition';
export * from './eventNotification';
export * from './eventToNotify';
export * from './genericProfile';
export * from './geographicCoordinates';
export * from './geolocation';
export * from './getTotalsRequest';
export * from './getTotalsResponse';
export * from './globalStatus';
export * from './hostStatus';
export * from './iCCResetData';
export * from './identificationSupport';
export * from './identificationType';
export * from './infoQualify';
export * from './input';
export * from './inputCommand';
export * from './inputData';
export * from './inputRequest';
export * from './inputResponse';
export * from './inputResult';
export * from './inputUpdate';
export * from './instalment';
export * from './instalmentType';
export * from './loginRequest';
export * from './loginResponse';
export * from './logoutRequest';
export * from './logoutResponse';
export * from './loyaltyAccount';
export * from './loyaltyAccountID';
export * from './loyaltyAccountReq';
export * from './loyaltyAccountStatus';
export * from './loyaltyAcquirerData';
export * from './loyaltyAmount';
export * from './loyaltyData';
export * from './loyaltyHandling';
export * from './loyaltyRequest';
export * from './loyaltyResponse';
export * from './loyaltyResult';
export * from './loyaltyTotals';
export * from './loyaltyTransaction';
export * from './loyaltyTransactionType';
export * from './loyaltyUnit';
export * from './menuEntry';
export * from './menuEntryTag';
export * from './messageCategory';
export * from './messageClass';
export * from './messageHeader';
export * from './messageReference';
export * from './messageType';
export * from './mobileData';
export * from './originalPOITransaction';
export * from './outputBarcode';
export * from './outputContent';
export * from './outputFormat';
export * from './outputResult';
export * from './outputText';
export * from './pINFormat';
export * from './pINRequestType';
export * from './pOIData';
export * from './pOIProfile';
export * from './pOISoftware';
export * from './pOIStatus';
export * from './pOISystemData';
export * from './pOITerminalData';
export * from './paymentAccountReq';
export * from './paymentAccountStatus';
export * from './paymentAcquirerData';
export * from './paymentData';
export * from './paymentInstrumentData';
export * from './paymentInstrumentType';
export * from './paymentReceipt';
export * from './paymentRequest';
export * from './paymentResponse';
export * from './paymentResult';
export * from './paymentToken';
export * from './paymentTotals';
export * from './paymentTransaction';
export * from './paymentType';
export * from './performedTransaction';
export * from './periodUnit';
export * from './point';
export * from './predefinedContent';
export * from './printOutput';
export * from './printRequest';
export * from './printResponse';
export * from './printerStatus';
export * from './rebates';
export * from './reconciliationRequest';
export * from './reconciliationResponse';
export * from './reconciliationType';
export * from './repeatedMessageResponse';
export * from './repeatedResponseMessageBody';
export * from './response';
export * from './responseMode';
export * from './result';
export * from './reversalReason';
export * from './reversalRequest';
export * from './reversalResponse';
export * from './saleData';
export * from './saleItem';
export * from './saleItemRebate';
export * from './saleSoftware';
export * from './saleTerminalData';
export * from './saleToIssuerData';
export * from './securityTrailer';
export * from './sensitiveCardData';
export * from './sensitiveMobileData';
export * from './soundAction';
export * from './soundContent';
export * from './soundFormat';
export * from './storedValueAccountID';
export * from './storedValueAccountStatus';
export * from './storedValueAccountType';
export * from './storedValueData';
export * from './storedValueRequest';
export * from './storedValueResponse';
export * from './storedValueResult';
export * from './storedValueTransactionType';
export * from './terminalEnvironment';
export * from './tokenRequestedType';
export * from './totalFilter';
export * from './trackData';
export * from './trackFormat';
export * from './transactionAction';
export * from './transactionConditions';
export * from './transactionIDType';
export * from './transactionStatusRequest';
export * from './transactionStatusResponse';
export * from './transactionTotals';
export * from './transactionType';
export * from './typeCode';
export * from './uTMCoordinates';
export * from './unitOfMeasure';


import { AbortRequest } from './abortRequest';
import { AccountType } from './accountType';
import { AdminRequest } from './adminRequest';
import { AdminResponse } from './adminResponse';
import { Alignment } from './alignment';
import { AllowedProduct } from './allowedProduct';
import { AmountsReq } from './amountsReq';
import { AmountsResp } from './amountsResp';
import { AreaSize } from './areaSize';
import { BalanceInquiryRequest } from './balanceInquiryRequest';
import { BalanceInquiryResponse } from './balanceInquiryResponse';
import { BarcodeType } from './barcodeType';
import { CapturedSignature } from './capturedSignature';
import { CardAcquisitionRequest } from './cardAcquisitionRequest';
import { CardAcquisitionResponse } from './cardAcquisitionResponse';
import { CardAcquisitionTransaction } from './cardAcquisitionTransaction';
import { CardData } from './cardData';
import { CardHolderPIN } from './cardHolderPIN';
import { CardReaderAPDURequest } from './cardReaderAPDURequest';
import { CardReaderAPDUResponse } from './cardReaderAPDUResponse';
import { CashHandlingDevice } from './cashHandlingDevice';
import { CharacterHeight } from './characterHeight';
import { CharacterStyle } from './characterStyle';
import { CharacterWidth } from './characterWidth';
import { CheckData } from './checkData';
import { CoinsOrBills } from './coinsOrBills';
import { Color } from './color';
import { ConvertedAmount } from './convertedAmount';
import { CurrencyConversion } from './currencyConversion';
import { CustomerOrder } from './customerOrder';
import { Device } from './device';
import { DiagnosisRequest } from './diagnosisRequest';
import { DiagnosisResponse } from './diagnosisResponse';
import { DisplayOutput } from './displayOutput';
import { DisplayRequest } from './displayRequest';
import { DisplayResponse } from './displayResponse';
import { DocumentQualifier } from './documentQualifier';
import { EnableServiceRequest } from './enableServiceRequest';
import { EnableServiceResponse } from './enableServiceResponse';
import { ErrorCondition } from './errorCondition';
import { EventNotification } from './eventNotification';
import { EventToNotify } from './eventToNotify';
import { GenericProfile } from './genericProfile';
import { GeographicCoordinates } from './geographicCoordinates';
import { Geolocation } from './geolocation';
import { GetTotalsRequest } from './getTotalsRequest';
import { GetTotalsResponse } from './getTotalsResponse';
import { GlobalStatus } from './globalStatus';
import { HostStatus } from './hostStatus';
import { ICCResetData } from './iCCResetData';
import { IdentificationSupport } from './identificationSupport';
import { IdentificationType } from './identificationType';
import { InfoQualify } from './infoQualify';
import { Input } from './input';
import { InputCommand } from './inputCommand';
import { InputData } from './inputData';
import { InputRequest } from './inputRequest';
import { InputResponse } from './inputResponse';
import { InputResult } from './inputResult';
import { InputUpdate } from './inputUpdate';
import { Instalment } from './instalment';
import { InstalmentType } from './instalmentType';
import { LoginRequest } from './loginRequest';
import { LoginResponse } from './loginResponse';
import { LogoutRequest } from './logoutRequest';
import { LogoutResponse } from './logoutResponse';
import { LoyaltyAccount } from './loyaltyAccount';
import { LoyaltyAccountID } from './loyaltyAccountID';
import { LoyaltyAccountReq } from './loyaltyAccountReq';
import { LoyaltyAccountStatus } from './loyaltyAccountStatus';
import { LoyaltyAcquirerData } from './loyaltyAcquirerData';
import { LoyaltyAmount } from './loyaltyAmount';
import { LoyaltyData } from './loyaltyData';
import { LoyaltyHandling } from './loyaltyHandling';
import { LoyaltyRequest } from './loyaltyRequest';
import { LoyaltyResponse } from './loyaltyResponse';
import { LoyaltyResult } from './loyaltyResult';
import { LoyaltyTotals } from './loyaltyTotals';
import { LoyaltyTransaction } from './loyaltyTransaction';
import { LoyaltyTransactionType } from './loyaltyTransactionType';
import { LoyaltyUnit } from './loyaltyUnit';
import { MenuEntry } from './menuEntry';
import { MenuEntryTag } from './menuEntryTag';
import { MessageCategory } from './messageCategory';
import { MessageClass } from './messageClass';
import { MessageHeader } from './messageHeader';
import { MessageReference } from './messageReference';
import { MessageType } from './messageType';
import { MobileData } from './mobileData';
import { OriginalPOITransaction } from './originalPOITransaction';
import { OutputBarcode } from './outputBarcode';
import { OutputContent } from './outputContent';
import { OutputFormat } from './outputFormat';
import { OutputResult } from './outputResult';
import { OutputText } from './outputText';
import { PINFormat } from './pINFormat';
import { PINRequestType } from './pINRequestType';
import { POIData } from './pOIData';
import { POIProfile } from './pOIProfile';
import { POISoftware } from './pOISoftware';
import { POIStatus } from './pOIStatus';
import { POISystemData } from './pOISystemData';
import { POITerminalData } from './pOITerminalData';
import { PaymentAccountReq } from './paymentAccountReq';
import { PaymentAccountStatus } from './paymentAccountStatus';
import { PaymentAcquirerData } from './paymentAcquirerData';
import { PaymentData } from './paymentData';
import { PaymentInstrumentData } from './paymentInstrumentData';
import { PaymentInstrumentType } from './paymentInstrumentType';
import { PaymentReceipt } from './paymentReceipt';
import { PaymentRequest } from './paymentRequest';
import { PaymentResponse } from './paymentResponse';
import { PaymentResult } from './paymentResult';
import { PaymentToken } from './paymentToken';
import { PaymentTotals } from './paymentTotals';
import { PaymentTransaction } from './paymentTransaction';
import { PaymentType } from './paymentType';
import { PerformedTransaction } from './performedTransaction';
import { PeriodUnit } from './periodUnit';
import { Point } from './point';
import { PredefinedContent } from './predefinedContent';
import { PrintOutput } from './printOutput';
import { PrintRequest } from './printRequest';
import { PrintResponse } from './printResponse';
import { PrinterStatus } from './printerStatus';
import { Rebates } from './rebates';
import { ReconciliationRequest } from './reconciliationRequest';
import { ReconciliationResponse } from './reconciliationResponse';
import { ReconciliationType } from './reconciliationType';
import { RepeatedMessageResponse } from './repeatedMessageResponse';
import { RepeatedResponseMessageBody } from './repeatedResponseMessageBody';
import { Response } from './response';
import { ResponseMode } from './responseMode';
import { Result } from './result';
import { ReversalReason } from './reversalReason';
import { ReversalRequest } from './reversalRequest';
import { ReversalResponse } from './reversalResponse';
import { SaleData } from './saleData';
import { SaleItem } from './saleItem';
import { SaleItemRebate } from './saleItemRebate';
import { SaleSoftware } from './saleSoftware';
import { SaleTerminalData } from './saleTerminalData';
import { SaleToIssuerData } from './saleToIssuerData';
import { SecurityTrailer } from './securityTrailer';
import { SensitiveCardData } from './sensitiveCardData';
import { SensitiveMobileData } from './sensitiveMobileData';
import { SoundAction } from './soundAction';
import { SoundContent } from './soundContent';
import { SoundFormat } from './soundFormat';
import { StoredValueAccountID } from './storedValueAccountID';
import { StoredValueAccountStatus } from './storedValueAccountStatus';
import { StoredValueAccountType } from './storedValueAccountType';
import { StoredValueData } from './storedValueData';
import { StoredValueRequest } from './storedValueRequest';
import { StoredValueResponse } from './storedValueResponse';
import { StoredValueResult } from './storedValueResult';
import { StoredValueTransactionType } from './storedValueTransactionType';
import { TerminalEnvironment } from './terminalEnvironment';
import { TokenRequestedType } from './tokenRequestedType';
import { TotalFilter } from './totalFilter';
import { TrackData } from './trackData';
import { TrackFormat } from './trackFormat';
import { TransactionAction } from './transactionAction';
import { TransactionConditions } from './transactionConditions';
import { TransactionIDType } from './transactionIDType';
import { TransactionStatusRequest } from './transactionStatusRequest';
import { TransactionStatusResponse } from './transactionStatusResponse';
import { TransactionTotals } from './transactionTotals';
import { TransactionType } from './transactionType';
import { TypeCode } from './typeCode';
import { UTMCoordinates } from './uTMCoordinates';
import { UnitOfMeasure } from './unitOfMeasure';

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

let enumsMap: {[index: string]: any} = {
        "AccountType": AccountType,
        "Alignment": Alignment,
        "BarcodeType": BarcodeType,
        "CardAcquisitionTransaction.ForceEntryModeEnum": CardAcquisitionTransaction.ForceEntryModeEnum,
        "CardData.EntryModeEnum": CardData.EntryModeEnum,
        "CharacterHeight": CharacterHeight,
        "CharacterStyle": CharacterStyle,
        "CharacterWidth": CharacterWidth,
        "Color": Color,
        "Device": Device,
        "DocumentQualifier": DocumentQualifier,
        "EnableServiceRequest.ServicesEnabledEnum": EnableServiceRequest.ServicesEnabledEnum,
        "ErrorCondition": ErrorCondition,
        "EventToNotify": EventToNotify,
        "GenericProfile": GenericProfile,
        "GetTotalsRequest.TotalDetailsEnum": GetTotalsRequest.TotalDetailsEnum,
        "GlobalStatus": GlobalStatus,
        "IdentificationSupport": IdentificationSupport,
        "IdentificationType": IdentificationType,
        "InfoQualify": InfoQualify,
        "InputCommand": InputCommand,
        "InstalmentType": InstalmentType,
        "LoginRequest.CustomerOrderReqEnum": LoginRequest.CustomerOrderReqEnum,
        "LoyaltyAccountID.EntryModeEnum": LoyaltyAccountID.EntryModeEnum,
        "LoyaltyHandling": LoyaltyHandling,
        "LoyaltyTransactionType": LoyaltyTransactionType,
        "LoyaltyUnit": LoyaltyUnit,
        "MenuEntryTag": MenuEntryTag,
        "MessageCategory": MessageCategory,
        "MessageClass": MessageClass,
        "MessageType": MessageType,
        "OutputFormat": OutputFormat,
        "PINFormat": PINFormat,
        "PINRequestType": PINRequestType,
        "POIProfile.ServiceProfilesEnum": POIProfile.ServiceProfilesEnum,
        "POITerminalData.POICapabilitiesEnum": POITerminalData.POICapabilitiesEnum,
        "PaymentInstrumentType": PaymentInstrumentType,
        "PaymentResult.AuthenticationMethodEnum": PaymentResult.AuthenticationMethodEnum,
        "PaymentType": PaymentType,
        "PeriodUnit": PeriodUnit,
        "PrinterStatus": PrinterStatus,
        "ReconciliationType": ReconciliationType,
        "ResponseMode": ResponseMode,
        "Result": Result,
        "ReversalReason": ReversalReason,
        "SaleData.CustomerOrderReqEnum": SaleData.CustomerOrderReqEnum,
        "SoundAction": SoundAction,
        "SoundFormat": SoundFormat,
        "StoredValueAccountID.EntryModeEnum": StoredValueAccountID.EntryModeEnum,
        "StoredValueAccountType": StoredValueAccountType,
        "StoredValueTransactionType": StoredValueTransactionType,
        "TerminalEnvironment": TerminalEnvironment,
        "TokenRequestedType": TokenRequestedType,
        "TrackFormat": TrackFormat,
        "TransactionAction": TransactionAction,
        "TransactionConditions.ForceEntryModeEnum": TransactionConditions.ForceEntryModeEnum,
        "TransactionType": TransactionType,
        "TypeCode": TypeCode,
        "UnitOfMeasure": UnitOfMeasure,
}

let typeMap: {[index: string]: any} = {
    "AbortRequest": AbortRequest,
    "AdminRequest": AdminRequest,
    "AdminResponse": AdminResponse,
    "AllowedProduct": AllowedProduct,
    "AmountsReq": AmountsReq,
    "AmountsResp": AmountsResp,
    "AreaSize": AreaSize,
    "BalanceInquiryRequest": BalanceInquiryRequest,
    "BalanceInquiryResponse": BalanceInquiryResponse,
    "CapturedSignature": CapturedSignature,
    "CardAcquisitionRequest": CardAcquisitionRequest,
    "CardAcquisitionResponse": CardAcquisitionResponse,
    "CardAcquisitionTransaction": CardAcquisitionTransaction,
    "CardData": CardData,
    "CardHolderPIN": CardHolderPIN,
    "CardReaderAPDURequest": CardReaderAPDURequest,
    "CardReaderAPDUResponse": CardReaderAPDUResponse,
    "CashHandlingDevice": CashHandlingDevice,
    "CheckData": CheckData,
    "CoinsOrBills": CoinsOrBills,
    "ConvertedAmount": ConvertedAmount,
    "CurrencyConversion": CurrencyConversion,
    "CustomerOrder": CustomerOrder,
    "DiagnosisRequest": DiagnosisRequest,
    "DiagnosisResponse": DiagnosisResponse,
    "DisplayOutput": DisplayOutput,
    "DisplayRequest": DisplayRequest,
    "DisplayResponse": DisplayResponse,
    "EnableServiceRequest": EnableServiceRequest,
    "EnableServiceResponse": EnableServiceResponse,
    "EventNotification": EventNotification,
    "GeographicCoordinates": GeographicCoordinates,
    "Geolocation": Geolocation,
    "GetTotalsRequest": GetTotalsRequest,
    "GetTotalsResponse": GetTotalsResponse,
    "HostStatus": HostStatus,
    "ICCResetData": ICCResetData,
    "Input": Input,
    "InputData": InputData,
    "InputRequest": InputRequest,
    "InputResponse": InputResponse,
    "InputResult": InputResult,
    "InputUpdate": InputUpdate,
    "Instalment": Instalment,
    "LoginRequest": LoginRequest,
    "LoginResponse": LoginResponse,
    "LogoutRequest": LogoutRequest,
    "LogoutResponse": LogoutResponse,
    "LoyaltyAccount": LoyaltyAccount,
    "LoyaltyAccountID": LoyaltyAccountID,
    "LoyaltyAccountReq": LoyaltyAccountReq,
    "LoyaltyAccountStatus": LoyaltyAccountStatus,
    "LoyaltyAcquirerData": LoyaltyAcquirerData,
    "LoyaltyAmount": LoyaltyAmount,
    "LoyaltyData": LoyaltyData,
    "LoyaltyRequest": LoyaltyRequest,
    "LoyaltyResponse": LoyaltyResponse,
    "LoyaltyResult": LoyaltyResult,
    "LoyaltyTotals": LoyaltyTotals,
    "LoyaltyTransaction": LoyaltyTransaction,
    "MenuEntry": MenuEntry,
    "MessageHeader": MessageHeader,
    "MessageReference": MessageReference,
    "MobileData": MobileData,
    "OriginalPOITransaction": OriginalPOITransaction,
    "OutputBarcode": OutputBarcode,
    "OutputContent": OutputContent,
    "OutputResult": OutputResult,
    "OutputText": OutputText,
    "POIData": POIData,
    "POIProfile": POIProfile,
    "POISoftware": POISoftware,
    "POIStatus": POIStatus,
    "POISystemData": POISystemData,
    "POITerminalData": POITerminalData,
    "PaymentAccountReq": PaymentAccountReq,
    "PaymentAccountStatus": PaymentAccountStatus,
    "PaymentAcquirerData": PaymentAcquirerData,
    "PaymentData": PaymentData,
    "PaymentInstrumentData": PaymentInstrumentData,
    "PaymentReceipt": PaymentReceipt,
    "PaymentRequest": PaymentRequest,
    "PaymentResponse": PaymentResponse,
    "PaymentResult": PaymentResult,
    "PaymentToken": PaymentToken,
    "PaymentTotals": PaymentTotals,
    "PaymentTransaction": PaymentTransaction,
    "PerformedTransaction": PerformedTransaction,
    "Point": Point,
    "PredefinedContent": PredefinedContent,
    "PrintOutput": PrintOutput,
    "PrintRequest": PrintRequest,
    "PrintResponse": PrintResponse,
    "Rebates": Rebates,
    "ReconciliationRequest": ReconciliationRequest,
    "ReconciliationResponse": ReconciliationResponse,
    "RepeatedMessageResponse": RepeatedMessageResponse,
    "RepeatedResponseMessageBody": RepeatedResponseMessageBody,
    "Response": Response,
    "ReversalRequest": ReversalRequest,
    "ReversalResponse": ReversalResponse,
    "SaleData": SaleData,
    "SaleItem": SaleItem,
    "SaleItemRebate": SaleItemRebate,
    "SaleSoftware": SaleSoftware,
    "SaleTerminalData": SaleTerminalData,
    "SaleToIssuerData": SaleToIssuerData,
    "SecurityTrailer": SecurityTrailer,
    "SensitiveCardData": SensitiveCardData,
    "SensitiveMobileData": SensitiveMobileData,
    "SoundContent": SoundContent,
    "StoredValueAccountID": StoredValueAccountID,
    "StoredValueAccountStatus": StoredValueAccountStatus,
    "StoredValueData": StoredValueData,
    "StoredValueRequest": StoredValueRequest,
    "StoredValueResponse": StoredValueResponse,
    "StoredValueResult": StoredValueResult,
    "TotalFilter": TotalFilter,
    "TrackData": TrackData,
    "TransactionConditions": TransactionConditions,
    "TransactionIDType": TransactionIDType,
    "TransactionStatusRequest": TransactionStatusRequest,
    "TransactionStatusResponse": TransactionStatusResponse,
    "TransactionTotals": TransactionTotals,
    "UTMCoordinates": UTMCoordinates,
}

export class ObjectSerializer {
    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if(typeMap[discriminatorType]){
                        return discriminatorType; // use the type given in the discriminator
                    } else {
                        return expectedType; // discriminator did not map to a type
                    }
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.serialize(datum, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toISOString();
        } else if (type === "SaleToAcquirerData") {
            const dataString = JSON.stringify(data);
            return Buffer.from(dataString).toString("base64");
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // Get the actual type of this object
            type = this.findCorrectType(data, type);

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.deserialize(datum, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
