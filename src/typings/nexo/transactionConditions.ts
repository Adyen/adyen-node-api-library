/*
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import { LoyaltyHandling } from './loyaltyHandling';

/**
* Conditions on which the transaction must be processed.
*/
export class TransactionConditions {
    'AllowedPaymentBrand'?: Array<string>;
    'AcquirerID'?: Array<number>;
    /**
    * The preferred type of payment is a debit transaction rather a credit transaction.
    */
    'DebitPreferredFlag'?: boolean;
    'AllowedLoyaltyBrand'?: Array<string>;
    'LoyaltyHandling'?: LoyaltyHandling;
    /**
    * If the language is selected by the Sale System before the request to the POI.
    */
    'CustomerLanguage'?: string;
    /**
    * Go online if data sent.
    */
    'ForceOnlineFlag'?: boolean;
    'ForceEntryMode'?: Array<TransactionConditions.ForceEntryModeEnum>;
    /**
    * The payment implies a specific MCC.
    */
    'MerchantCategoryCode'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "AllowedPaymentBrand",
            "baseName": "AllowedPaymentBrand",
            "type": "Array<string>"
        },
        {
            "name": "AcquirerID",
            "baseName": "AcquirerID",
            "type": "Array<number>"
        },
        {
            "name": "DebitPreferredFlag",
            "baseName": "DebitPreferredFlag",
            "type": "boolean"
        },
        {
            "name": "AllowedLoyaltyBrand",
            "baseName": "AllowedLoyaltyBrand",
            "type": "Array<string>"
        },
        {
            "name": "LoyaltyHandling",
            "baseName": "LoyaltyHandling",
            "type": "LoyaltyHandling"
        },
        {
            "name": "CustomerLanguage",
            "baseName": "CustomerLanguage",
            "type": "string"
        },
        {
            "name": "ForceOnlineFlag",
            "baseName": "ForceOnlineFlag",
            "type": "boolean"
        },
        {
            "name": "ForceEntryMode",
            "baseName": "ForceEntryMode",
            "type": "Array<TransactionConditions.ForceEntryModeEnum>"
        },
        {
            "name": "MerchantCategoryCode",
            "baseName": "MerchantCategoryCode",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return TransactionConditions.attributeTypeMap;
    }
}

export namespace TransactionConditions {
    export enum ForceEntryModeEnum {
        CheckReader = 'CheckReader',
        Contactless = 'Contactless',
        File = 'File',
        Icc = 'ICC',
        Keyed = 'Keyed',
        MagStripe = 'MagStripe',
        Manual = 'Manual',
        Rfid = 'RFID',
        Scanned = 'Scanned',
        SynchronousIcc = 'SynchronousICC',
        Tapped = 'Tapped'
    }
}
