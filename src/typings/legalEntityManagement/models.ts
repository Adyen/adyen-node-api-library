/*
 * The version of the OpenAPI document: v2
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */


export * from './acceptTermsOfServiceRequest';
export * from './acceptTermsOfServiceResponse';
export * from './address';
export * from './amount';
export * from './attachment';
export * from './bankAccountInfo';
export * from './birthData';
export * from './businessLine';
export * from './businessLineInfo';
export * from './businessLineInfoUpdate';
export * from './businessLines';
export * from './calculateTermsOfServiceStatusResponse';
export * from './capabilityProblem';
export * from './capabilityProblemEntity';
export * from './capabilityProblemEntityRecursive';
export * from './capabilitySettings';
export * from './document';
export * from './documentReference';
export * from './entityReference';
export * from './getTermsOfServiceAcceptanceInfosResponse';
export * from './getTermsOfServiceDocumentRequest';
export * from './getTermsOfServiceDocumentResponse';
export * from './identificationData';
export * from './individual';
export * from './legalEntity';
export * from './legalEntityAssociation';
export * from './legalEntityCapability';
export * from './legalEntityInfo';
export * from './legalEntityInfoRequiredType';
export * from './name';
export * from './onboardingLink';
export * from './onboardingLinkInfo';
export * from './onboardingTheme';
export * from './onboardingThemes';
export * from './organization';
export * from './ownerEntity';
export * from './phoneNumber';
export * from './remediatingAction';
export * from './serviceError';
export * from './soleProprietorship';
export * from './sourceOfFunds';
export * from './stockData';
export * from './supportingEntityCapability';
export * from './taxInformation';
export * from './taxReportingClassification';
export * from './termsOfServiceAcceptanceInfo';
export * from './transferInstrument';
export * from './transferInstrumentInfo';
export * from './transferInstrumentReference';
export * from './verificationError';
export * from './verificationErrorRecursive';
export * from './webData';
export * from './webDataExemption';


import { AcceptTermsOfServiceRequest } from './acceptTermsOfServiceRequest';
import { AcceptTermsOfServiceResponse } from './acceptTermsOfServiceResponse';
import { Address } from './address';
import { Amount } from './amount';
import { Attachment } from './attachment';
import { BankAccountInfo } from './bankAccountInfo';
import { BirthData } from './birthData';
import { BusinessLine } from './businessLine';
import { BusinessLineInfo } from './businessLineInfo';
import { BusinessLineInfoUpdate } from './businessLineInfoUpdate';
import { BusinessLines } from './businessLines';
import { CalculateTermsOfServiceStatusResponse } from './calculateTermsOfServiceStatusResponse';
import { CapabilityProblem } from './capabilityProblem';
import { CapabilityProblemEntity } from './capabilityProblemEntity';
import { CapabilityProblemEntityRecursive } from './capabilityProblemEntityRecursive';
import { CapabilitySettings } from './capabilitySettings';
import { Document } from './document';
import { DocumentReference } from './documentReference';
import { EntityReference } from './entityReference';
import { GetTermsOfServiceAcceptanceInfosResponse } from './getTermsOfServiceAcceptanceInfosResponse';
import { GetTermsOfServiceDocumentRequest } from './getTermsOfServiceDocumentRequest';
import { GetTermsOfServiceDocumentResponse } from './getTermsOfServiceDocumentResponse';
import { IdentificationData } from './identificationData';
import { Individual } from './individual';
import { LegalEntity } from './legalEntity';
import { LegalEntityAssociation } from './legalEntityAssociation';
import { LegalEntityCapability } from './legalEntityCapability';
import { LegalEntityInfo } from './legalEntityInfo';
import { LegalEntityInfoRequiredType } from './legalEntityInfoRequiredType';
import { Name } from './name';
import { OnboardingLink } from './onboardingLink';
import { OnboardingLinkInfo } from './onboardingLinkInfo';
import { OnboardingTheme } from './onboardingTheme';
import { OnboardingThemes } from './onboardingThemes';
import { Organization } from './organization';
import { OwnerEntity } from './ownerEntity';
import { PhoneNumber } from './phoneNumber';
import { RemediatingAction } from './remediatingAction';
import { ServiceError } from './serviceError';
import { SoleProprietorship } from './soleProprietorship';
import { SourceOfFunds } from './sourceOfFunds';
import { StockData } from './stockData';
import { SupportingEntityCapability } from './supportingEntityCapability';
import { TaxInformation } from './taxInformation';
import { TaxReportingClassification } from './taxReportingClassification';
import { TermsOfServiceAcceptanceInfo } from './termsOfServiceAcceptanceInfo';
import { TransferInstrument } from './transferInstrument';
import { TransferInstrumentInfo } from './transferInstrumentInfo';
import { TransferInstrumentReference } from './transferInstrumentReference';
import { VerificationError } from './verificationError';
import { VerificationErrorRecursive } from './verificationErrorRecursive';
import { WebData } from './webData';
import { WebDataExemption } from './webDataExemption';

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

let enumsMap: {[index: string]: any} = {
        "AcceptTermsOfServiceResponse.TypeEnum": AcceptTermsOfServiceResponse.TypeEnum,
        "CalculateTermsOfServiceStatusResponse.TermsOfServiceTypesEnum": CalculateTermsOfServiceStatusResponse.TermsOfServiceTypesEnum,
        "CapabilityProblemEntity.TypeEnum": CapabilityProblemEntity.TypeEnum,
        "CapabilityProblemEntityRecursive.TypeEnum": CapabilityProblemEntityRecursive.TypeEnum,
        "CapabilitySettings.FundingSourceEnum": CapabilitySettings.FundingSourceEnum,
        "CapabilitySettings.IntervalEnum": CapabilitySettings.IntervalEnum,
        "Document.TypeEnum": Document.TypeEnum,
        "GetTermsOfServiceDocumentRequest.TypeEnum": GetTermsOfServiceDocumentRequest.TypeEnum,
        "GetTermsOfServiceDocumentResponse.TypeEnum": GetTermsOfServiceDocumentResponse.TypeEnum,
        "IdentificationData.TypeEnum": IdentificationData.TypeEnum,
        "LegalEntity.TypeEnum": LegalEntity.TypeEnum,
        "LegalEntityAssociation.TypeEnum": LegalEntityAssociation.TypeEnum,
        "LegalEntityCapability.AllowedLevelEnum": LegalEntityCapability.AllowedLevelEnum,
        "LegalEntityCapability.RequestedLevelEnum": LegalEntityCapability.RequestedLevelEnum,
        "LegalEntityInfo.TypeEnum": LegalEntityInfo.TypeEnum,
        "LegalEntityInfoRequiredType.TypeEnum": LegalEntityInfoRequiredType.TypeEnum,
        "Organization.TypeEnum": Organization.TypeEnum,
        "Organization.VatAbsenceReasonEnum": Organization.VatAbsenceReasonEnum,
        "SoleProprietorship.VatAbsenceReasonEnum": SoleProprietorship.VatAbsenceReasonEnum,
        "SourceOfFunds.TypeEnum": SourceOfFunds.TypeEnum,
        "TaxReportingClassification.BusinessTypeEnum": TaxReportingClassification.BusinessTypeEnum,
        "TaxReportingClassification.MainSourceOfIncomeEnum": TaxReportingClassification.MainSourceOfIncomeEnum,
        "TaxReportingClassification.TypeEnum": TaxReportingClassification.TypeEnum,
        "TermsOfServiceAcceptanceInfo.TypeEnum": TermsOfServiceAcceptanceInfo.TypeEnum,
        "TransferInstrument.TypeEnum": TransferInstrument.TypeEnum,
        "TransferInstrumentInfo.TypeEnum": TransferInstrumentInfo.TypeEnum,
        "VerificationError.CapabilitiesEnum": VerificationError.CapabilitiesEnum,
        "VerificationError.TypeEnum": VerificationError.TypeEnum,
        "VerificationErrorRecursive.CapabilitiesEnum": VerificationErrorRecursive.CapabilitiesEnum,
        "VerificationErrorRecursive.TypeEnum": VerificationErrorRecursive.TypeEnum,
        "WebDataExemption.ReasonEnum": WebDataExemption.ReasonEnum,
}

let typeMap: {[index: string]: any} = {
    "AcceptTermsOfServiceRequest": AcceptTermsOfServiceRequest,
    "AcceptTermsOfServiceResponse": AcceptTermsOfServiceResponse,
    "Address": Address,
    "Amount": Amount,
    "Attachment": Attachment,
    "BankAccountInfo": BankAccountInfo,
    "BirthData": BirthData,
    "BusinessLine": BusinessLine,
    "BusinessLineInfo": BusinessLineInfo,
    "BusinessLineInfoUpdate": BusinessLineInfoUpdate,
    "BusinessLines": BusinessLines,
    "CalculateTermsOfServiceStatusResponse": CalculateTermsOfServiceStatusResponse,
    "CapabilityProblem": CapabilityProblem,
    "CapabilityProblemEntity": CapabilityProblemEntity,
    "CapabilityProblemEntityRecursive": CapabilityProblemEntityRecursive,
    "CapabilitySettings": CapabilitySettings,
    "Document": Document,
    "DocumentReference": DocumentReference,
    "EntityReference": EntityReference,
    "GetTermsOfServiceAcceptanceInfosResponse": GetTermsOfServiceAcceptanceInfosResponse,
    "GetTermsOfServiceDocumentRequest": GetTermsOfServiceDocumentRequest,
    "GetTermsOfServiceDocumentResponse": GetTermsOfServiceDocumentResponse,
    "IdentificationData": IdentificationData,
    "Individual": Individual,
    "LegalEntity": LegalEntity,
    "LegalEntityAssociation": LegalEntityAssociation,
    "LegalEntityCapability": LegalEntityCapability,
    "LegalEntityInfo": LegalEntityInfo,
    "LegalEntityInfoRequiredType": LegalEntityInfoRequiredType,
    "Name": Name,
    "OnboardingLink": OnboardingLink,
    "OnboardingLinkInfo": OnboardingLinkInfo,
    "OnboardingTheme": OnboardingTheme,
    "OnboardingThemes": OnboardingThemes,
    "Organization": Organization,
    "OwnerEntity": OwnerEntity,
    "PhoneNumber": PhoneNumber,
    "RemediatingAction": RemediatingAction,
    "ServiceError": ServiceError,
    "SoleProprietorship": SoleProprietorship,
    "SourceOfFunds": SourceOfFunds,
    "StockData": StockData,
    "SupportingEntityCapability": SupportingEntityCapability,
    "TaxInformation": TaxInformation,
    "TaxReportingClassification": TaxReportingClassification,
    "TermsOfServiceAcceptanceInfo": TermsOfServiceAcceptanceInfo,
    "TransferInstrument": TransferInstrument,
    "TransferInstrumentInfo": TransferInstrumentInfo,
    "TransferInstrumentReference": TransferInstrumentReference,
    "VerificationError": VerificationError,
    "VerificationErrorRecursive": VerificationErrorRecursive,
    "WebData": WebData,
    "WebDataExemption": WebDataExemption,
}

export class ObjectSerializer {
    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    var discriminatorType = data[discriminatorProperty];
                    if(typeMap[discriminatorType]){
                        return discriminatorType; // use the type given in the discriminator
                    } else {
                        return expectedType; // discriminator did not map to a type
                    }
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.serialize(datum, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toISOString();
        } else if (type === "SaleToAcquirerData") {
            const dataString = JSON.stringify(data);
            return Buffer.from(dataString).toString("base64");
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // Get the actual type of this object
            type = this.findCorrectType(data, type);

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index = 0; index < data.length; index++) {
                let datum = data[index];
                transformedData.push(ObjectSerializer.deserialize(datum, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index = 0; index < attributeTypes.length; index++) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}
