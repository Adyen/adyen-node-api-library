/*
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */


export class LegalEntityAssociation {
    /**
    * The unique identifier of another legal entity with which the `legalEntityId` is associated. When the `legalEntityId` is associated to legal entities other than the current one, the response returns all the associations.
    */
    "associatorId"?: string;
    /**
    * The legal entity type of associated legal entity.  For example, **organization**, **soleProprietorship** or **individual**.
    */
    "entityType"?: string;
    /**
    * The individual\'s job title if the `type` is **uboThroughControl** or **signatory**.
    */
    "jobTitle"?: string;
    /**
    * The unique identifier of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).
    */
    "legalEntityId": string;
    /**
    * The name of the associated [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id).  - For **individual**, `name.firstName` and `name.lastName`. - For **organization**, `legalName`. - For **soleProprietorship**, `name`.
    */
    "name"?: string;
    /**
    * Default value: **false** Set to **true** if the entity association `type` **director**, **secondaryPartner** or **shareholder** is also a nominee. Only applicable to New Zealand.
    */
    "nominee"?: boolean;
    /**
    * The individual\'s relationship to a legal representative if the `type` is **legalRepresentative**. Possible values: **parent**, **guardian**.
    */
    "relationship"?: string;
    /**
    * Defines the KYC exemption reason for a settlor associated with a trust. Only applicable to trusts in Australia.  For example, **professionalServiceProvider**, **deceased**, or **contributionBelowThreshold**.
    */
    "settlorExemptionReason"?: Array<string>;
    /**
    * Defines the relationship of the legal entity to the current legal entity.  Possible value for individuals: **legalRepresentative**.  Possible values for organizations: **director**, **signatory**, **trustOwnership**, **uboThroughOwnership**, **uboThroughControl**, or **ultimateParentCompany**.  Possible values for sole proprietorships: **soleProprietorship**.  Possible value for trusts: **trust**.  Possible values for trust members: **definedBeneficiary**, **protector**, **secondaryTrustee**, **settlor**, **uboThroughControl**, or **uboThroughOwnership**.  Possible value for unincorporated partnership: **unincorporatedPartnership**.  Possible values for unincorporated partnership members: **secondaryPartner**, **uboThroughControl**, **uboThroughOwnership**
    */
    "type": LegalEntityAssociation.TypeEnum;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "associatorId",
            "baseName": "associatorId",
            "type": "string",
            "format": ""
        },
        {
            "name": "entityType",
            "baseName": "entityType",
            "type": "string",
            "format": ""
        },
        {
            "name": "jobTitle",
            "baseName": "jobTitle",
            "type": "string",
            "format": ""
        },
        {
            "name": "legalEntityId",
            "baseName": "legalEntityId",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "nominee",
            "baseName": "nominee",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "relationship",
            "baseName": "relationship",
            "type": "string",
            "format": ""
        },
        {
            "name": "settlorExemptionReason",
            "baseName": "settlorExemptionReason",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "LegalEntityAssociation.TypeEnum",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return LegalEntityAssociation.attributeTypeMap;
    }

    public constructor() {
    }
}

export namespace LegalEntityAssociation {
    export enum TypeEnum {
        DefinedBeneficiary = 'definedBeneficiary',
        Director = 'director',
        ImmediateParentCompany = 'immediateParentCompany',
        LegalRepresentative = 'legalRepresentative',
        PciSignatory = 'pciSignatory',
        Protector = 'protector',
        SecondaryPartner = 'secondaryPartner',
        SecondaryTrustee = 'secondaryTrustee',
        Settlor = 'settlor',
        Signatory = 'signatory',
        SoleProprietorship = 'soleProprietorship',
        Trust = 'trust',
        TrustOwnership = 'trustOwnership',
        UboThroughControl = 'uboThroughControl',
        UboThroughOwnership = 'uboThroughOwnership',
        UltimateParentCompany = 'ultimateParentCompany',
        UndefinedBeneficiary = 'undefinedBeneficiary',
        UnincorporatedPartnership = 'unincorporatedPartnership'
    }
}
