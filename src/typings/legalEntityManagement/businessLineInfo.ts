/*
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import { SourceOfFunds } from "./sourceOfFunds";
import { WebData } from "./webData";
import { WebDataExemption } from "./webDataExemption";


export class BusinessLineInfo {
    /**
    * The capability for which you are creating the business line.  Possible values: **receivePayments**, **receiveFromPlatformPayments**, **issueBankAccount**
    *
	* @deprecated since Legal Entity Management API v3
	* Use `service` instead.
    */
    "capability"?: BusinessLineInfo.CapabilityEnum;
    /**
    * A code that represents the industry of the legal entity for [marketplaces](https://docs.adyen.com/marketplaces/verification-requirements/reference-additional-products/#list-industry-codes) or [platforms](https://docs.adyen.com/platforms/verification-requirements/reference-additional-products/#list-industry-codes). For example, **4431A** for computer software stores.
    */
    "industryCode": string;
    /**
    * Unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id) that owns the business line.
    */
    "legalEntityId": string;
    /**
    * A list of channels where goods or services are sold.  Possible values: **pos**, **posMoto**, **eCommerce**, **ecomMoto**, **payByLink**.  Required only in combination with the `service` **paymentProcessing**.
    */
    "salesChannels"?: Array<string>;
    /**
    * The service for which you are creating the business line.    Possible values: *  **paymentProcessing** *  **banking**  
    */
    "service": BusinessLineInfo.ServiceEnum;
    "sourceOfFunds"?: SourceOfFunds | null;
    /**
    * List of website URLs where your user\'s goods or services are sold. When this is required for a service but your user does not have an online presence, provide the reason in the `webDataExemption` object.
    */
    "webData"?: Array<WebData>;
    "webDataExemption"?: WebDataExemption | null;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "capability",
            "baseName": "capability",
            "type": "BusinessLineInfo.CapabilityEnum",
            "format": ""
        },
        {
            "name": "industryCode",
            "baseName": "industryCode",
            "type": "string",
            "format": ""
        },
        {
            "name": "legalEntityId",
            "baseName": "legalEntityId",
            "type": "string",
            "format": ""
        },
        {
            "name": "salesChannels",
            "baseName": "salesChannels",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "service",
            "baseName": "service",
            "type": "BusinessLineInfo.ServiceEnum",
            "format": ""
        },
        {
            "name": "sourceOfFunds",
            "baseName": "sourceOfFunds",
            "type": "SourceOfFunds | null",
            "format": ""
        },
        {
            "name": "webData",
            "baseName": "webData",
            "type": "Array<WebData>",
            "format": ""
        },
        {
            "name": "webDataExemption",
            "baseName": "webDataExemption",
            "type": "WebDataExemption | null",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return BusinessLineInfo.attributeTypeMap;
    }

    public constructor() {
    }
}

export namespace BusinessLineInfo {
    export enum CapabilityEnum {
        ReceivePayments = 'receivePayments',
        ReceiveFromPlatformPayments = 'receiveFromPlatformPayments',
        IssueBankAccount = 'issueBankAccount'
    }
    export enum ServiceEnum {
        PaymentProcessing = 'paymentProcessing',
        Banking = 'banking'
    }
}
