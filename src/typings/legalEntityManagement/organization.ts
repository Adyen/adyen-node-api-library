/*
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import { Address } from "./address";
import { FinancialReport } from "./financialReport";
import { PhoneNumber } from "./phoneNumber";
import { StockData } from "./stockData";
import { TaxInformation } from "./taxInformation";
import { TaxReportingClassification } from "./taxReportingClassification";
import { WebData } from "./webData";


export class Organization {
    /**
    * The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code of the governing country.
    */
    "countryOfGoverningLaw"?: string;
    /**
    * The date when the organization was incorporated in YYYY-MM-DD format.
    */
    "dateOfIncorporation"?: string;
    /**
    * Your description for the organization.
    */
    "description"?: string;
    /**
    * The organization\'s trading name, if different from the registered legal name.
    */
    "doingBusinessAs"?: string;
    /**
    * The email address of the legal entity.
    */
    "email"?: string;
    /**
    * The financial report information of the organization.
    */
    "financialReports"?: Array<FinancialReport>;
    /**
    * The organization\'s legal name.
    */
    "legalName": string;
    "phone"?: PhoneNumber;
    "principalPlaceOfBusiness"?: Address;
    "registeredAddress": Address;
    /**
    * The organization\'s registration number.
    */
    "registrationNumber"?: string;
    "stockData"?: StockData;
    /**
    * The tax information of the organization.
    */
    "taxInformation"?: Array<TaxInformation>;
    "taxReportingClassification"?: TaxReportingClassification;
    /**
    * Type of organization.  Possible values: **associationIncorporated**, **governmentalOrganization**, **listedPublicCompany**, **nonProfit**, **partnershipIncorporated**, **privateCompany**.
    */
    "type"?: Organization.TypeEnum;
    /**
    * The reason the organization has not provided a VAT number.  Possible values: **industryExemption**, **belowTaxThreshold**.
    */
    "vatAbsenceReason"?: Organization.VatAbsenceReasonEnum;
    /**
    * The organization\'s VAT number.
    */
    "vatNumber"?: string;
    "webData"?: WebData;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "countryOfGoverningLaw",
            "baseName": "countryOfGoverningLaw",
            "type": "string",
            "format": ""
        },
        {
            "name": "dateOfIncorporation",
            "baseName": "dateOfIncorporation",
            "type": "string",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "doingBusinessAs",
            "baseName": "doingBusinessAs",
            "type": "string",
            "format": ""
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string",
            "format": ""
        },
        {
            "name": "financialReports",
            "baseName": "financialReports",
            "type": "Array<FinancialReport>",
            "format": ""
        },
        {
            "name": "legalName",
            "baseName": "legalName",
            "type": "string",
            "format": ""
        },
        {
            "name": "phone",
            "baseName": "phone",
            "type": "PhoneNumber",
            "format": ""
        },
        {
            "name": "principalPlaceOfBusiness",
            "baseName": "principalPlaceOfBusiness",
            "type": "Address",
            "format": ""
        },
        {
            "name": "registeredAddress",
            "baseName": "registeredAddress",
            "type": "Address",
            "format": ""
        },
        {
            "name": "registrationNumber",
            "baseName": "registrationNumber",
            "type": "string",
            "format": ""
        },
        {
            "name": "stockData",
            "baseName": "stockData",
            "type": "StockData",
            "format": ""
        },
        {
            "name": "taxInformation",
            "baseName": "taxInformation",
            "type": "Array<TaxInformation>",
            "format": ""
        },
        {
            "name": "taxReportingClassification",
            "baseName": "taxReportingClassification",
            "type": "TaxReportingClassification",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "Organization.TypeEnum",
            "format": ""
        },
        {
            "name": "vatAbsenceReason",
            "baseName": "vatAbsenceReason",
            "type": "Organization.VatAbsenceReasonEnum",
            "format": ""
        },
        {
            "name": "vatNumber",
            "baseName": "vatNumber",
            "type": "string",
            "format": ""
        },
        {
            "name": "webData",
            "baseName": "webData",
            "type": "WebData",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Organization.attributeTypeMap;
    }

    public constructor() {
    }
}

export namespace Organization {
    export enum TypeEnum {
        AssociationIncorporated = 'associationIncorporated',
        GovernmentalOrganization = 'governmentalOrganization',
        ListedPublicCompany = 'listedPublicCompany',
        NonProfit = 'nonProfit',
        PartnershipIncorporated = 'partnershipIncorporated',
        PrivateCompany = 'privateCompany'
    }
    export enum VatAbsenceReasonEnum {
        IndustryExemption = 'industryExemption',
        BelowTaxThreshold = 'belowTaxThreshold'
    }
}
