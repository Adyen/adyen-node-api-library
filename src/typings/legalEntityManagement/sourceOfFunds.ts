/*
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */

import { Amount } from "./amount";
import { Financier } from "./financier";


export class SourceOfFunds {
    /**
    * Indicates whether the funds are coming from transactions processed by Adyen. If **false**, the `type` is required.
    */
    "adyenProcessedFunds": boolean;
    "amount"?: Amount | null;
    /**
    * The number of months that the asset has been in possession of the user.  For example, if the source of funds is of type **cryptocurrencyIncome** then `assetMonthsHeld` is the number of months the user has owned the cryptocurrency.
    */
    "assetMonthsHeld"?: number;
    /**
    * The cryptocurrency exchange where the funds were acquired. Required if `type` is **cryptocurrencyIncome**.
    */
    "cryptocurrencyExchange"?: string;
    /**
    * The date the funds were received, in YYYY-MM-DD format. Required if `type` is **donations** or **inheritance**.
    */
    "dateOfFundsReceived"?: string;
    /**
    * The date the funds were received, in YYYY-MM-DD format. Required if `type` is **assetSale** or **gamblingWinnings**.  For example, if the source of funds is of type **assetSale**, the dateOfSourceEvent is the date of the sale. If the source of funds is of type **gamblingWinnings**, the dateOfSourceEvent is the date of winnings.
    */
    "dateOfSourceEvent"?: string;
    /**
    * Text describing the source of funds. Required if `type` is **business** or **assetSale**.  For example, for `type` **business**, provide a description of where the business transactions come from, such as payments through bank transfer. For `type` **assetSale**, provide a description of the asset. For example, the address of a residential property if it is a property sale.
    */
    "description"?: string;
    /**
    * Information about the financiers. Required if `type` is **thirdPartyFunding**.
    */
    "financiers"?: Array<Financier>;
    /**
    * The legal entity ID representing the originator of the source of funds. Required if `type` is **donations** or **inheritance**.  For example, if the source of funds is **inheritance**, then `originatorOfFundsReference` should be the legal entity reference of the benefactor.
    */
    "originatorLegalEntityId"?: string;
    /**
    * The reason for receiving the funds. Required if `type` is **donations**.
    */
    "purpose"?: string;
    /**
    * The relationship of the originator of the funds to the recipient. Required if `type` is **donations** or **inheritance**.
    */
    "relationship"?: string;
    /**
    * The type of the source of funds.    Possible values: *  **business** *  **employment** *  **donations** *  **inheritance** *  **financialAid** *  **rentalIncome** *  **dividendIncome** *  **royaltyIncome** *  **thirdPartyFunding** *  **pensionIncome** *  **insuranceSettlement** *  **cryptocurrencyIncome** *  **assetSale** *  **loans** *  **gamblingWinnings**  
    */
    "type"?: SourceOfFunds.TypeEnum;
    /**
    * The location of the gambling site. Required if `type` is **gamblingWinnings**.  If the source of funds is online gambling, provide the website of the gambling company.
    */
    "website"?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "adyenProcessedFunds",
            "baseName": "adyenProcessedFunds",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "Amount | null",
            "format": ""
        },
        {
            "name": "assetMonthsHeld",
            "baseName": "assetMonthsHeld",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "cryptocurrencyExchange",
            "baseName": "cryptocurrencyExchange",
            "type": "string",
            "format": ""
        },
        {
            "name": "dateOfFundsReceived",
            "baseName": "dateOfFundsReceived",
            "type": "string",
            "format": "date"
        },
        {
            "name": "dateOfSourceEvent",
            "baseName": "dateOfSourceEvent",
            "type": "string",
            "format": "date"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "financiers",
            "baseName": "financiers",
            "type": "Array<Financier>",
            "format": ""
        },
        {
            "name": "originatorLegalEntityId",
            "baseName": "originatorLegalEntityId",
            "type": "string",
            "format": ""
        },
        {
            "name": "purpose",
            "baseName": "purpose",
            "type": "string",
            "format": ""
        },
        {
            "name": "relationship",
            "baseName": "relationship",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "SourceOfFunds.TypeEnum",
            "format": ""
        },
        {
            "name": "website",
            "baseName": "website",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return SourceOfFunds.attributeTypeMap;
    }

    public constructor() {
    }
}

export namespace SourceOfFunds {
    export enum TypeEnum {
        Business = 'business',
        Employment = 'employment',
        Donations = 'donations',
        Inheritance = 'inheritance',
        FinancialAid = 'financialAid',
        RentalIncome = 'rentalIncome',
        DividendIncome = 'dividendIncome',
        RoyaltyIncome = 'royaltyIncome',
        ThirdPartyFunding = 'thirdPartyFunding',
        PensionIncome = 'pensionIncome',
        InsuranceSettlement = 'insuranceSettlement',
        CryptocurrencyIncome = 'cryptocurrencyIncome',
        AssetSale = 'assetSale',
        Loans = 'loans',
        GamblingWinnings = 'gamblingWinnings'
    }
}
